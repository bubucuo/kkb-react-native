diff --git a/node_modules/react-native-amap3d/lib/android/build.gradle b/node_modules/react-native-amap3d/lib/android/build.gradle
index 12ee6aa..89a0893 100644
--- a/node_modules/react-native-amap3d/lib/android/build.gradle
+++ b/node_modules/react-native-amap3d/lib/android/build.gradle
@@ -6,10 +6,10 @@ def getExt(prop, fallback) {
 }
 
 buildscript {
-    ext.kotlin_version = '1.5.31'
+    ext.kotlin_version = '1.3.21'
 
     repositories {
-        mavenCentral()
+        jcenter()
     }
 
     dependencies {
@@ -18,27 +18,17 @@ buildscript {
 }
 
 android {
-    compileSdkVersion getExt('compileSdkVersion', 30)
-    buildToolsVersion getExt('buildToolsVersion', '30.0.2')
+    compileSdkVersion getExt('compileSdkVersion', 29)
+    buildToolsVersion getExt('buildToolsVersion', '29.0.3')
 
     defaultConfig {
-        minSdkVersion getExt('minSdkVersion', 21)
-        targetSdkVersion getExt('targetSdkVersion', 30)
-    }
-
-    compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_8
-        targetCompatibility JavaVersion.VERSION_1_8
-    }
-
-    kotlinOptions {
-        jvmTarget = '1.8'
+        minSdkVersion getExt('minSdkVersion', 16)
+        targetSdkVersion getExt('targetSdkVersion', 29)
     }
 }
 
 dependencies {
-    api 'com.facebook.react:react-native:+'
+    implementation 'com.facebook.react:react-native:+'
+    implementation 'com.amap.api:3dmap:7.9.1'
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
-    implementation 'com.amap.api:3dmap:8.0.1'
-    implementation 'com.amap.api:location:5.6.0'
 }
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/AndroidManifest.xml b/node_modules/react-native-amap3d/lib/android/src/main/AndroidManifest.xml
index daa591d..8d75ffd 100644
--- a/node_modules/react-native-amap3d/lib/android/src/main/AndroidManifest.xml
+++ b/node_modules/react-native-amap3d/lib/android/src/main/AndroidManifest.xml
@@ -1,10 +1,14 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-  package="qiuxiang.amap3d">
+    package="cn.qiuxiang.react.amap3d">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
 
-  <uses-permission android:name="android.permission.INTERNET" />
-  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-  <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
-  <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
-  <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
-  <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
 </manifest>
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMap3DPackage.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMap3DPackage.kt
new file mode 100644
index 0000000..054f572
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMap3DPackage.kt
@@ -0,0 +1,28 @@
+package cn.qiuxiang.react.amap3d
+
+import cn.qiuxiang.react.amap3d.maps.*
+import com.facebook.react.ReactPackage
+import com.facebook.react.bridge.NativeModule
+import com.facebook.react.bridge.ReactApplicationContext
+import com.facebook.react.uimanager.ViewManager
+
+class AMap3DPackage : ReactPackage {
+    override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
+        return listOf(
+                AMapOfflineModule(reactContext)
+        )
+    }
+
+    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
+        return listOf(
+                AMapViewManager(),
+                AMapMarkerManager(),
+                AMapInfoWindowManager(),
+                AMapPolylineManager(),
+                AMapPolygonManager(),
+                AMapCircleManager(),
+                AMapHeatMapManager(),
+                AMapMultiPointManager()
+        )
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMapOfflineModule.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMapOfflineModule.kt
new file mode 100644
index 0000000..ddf2a3d
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMapOfflineModule.kt
@@ -0,0 +1,101 @@
+package cn.qiuxiang.react.amap3d
+
+import com.amap.api.maps.offlinemap.OfflineMapCity
+import com.amap.api.maps.offlinemap.OfflineMapManager
+import com.amap.api.maps.offlinemap.OfflineMapProvince
+import com.amap.api.maps.offlinemap.OfflineMapStatus
+import com.facebook.react.bridge.*
+import com.facebook.react.modules.core.DeviceEventManagerModule
+
+@Suppress("unused")
+class AMapOfflineModule(private val reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext), OfflineMapManager.OfflineMapDownloadListener {
+    private val manager = OfflineMapManager(reactContext, this)
+
+    override fun getName(): String {
+        return "AMapOffline"
+    }
+
+    @ReactMethod
+    fun getProvinces(promise: Promise) {
+        val provinces = Arguments.createArray()
+        manager.offlineMapProvinceList.forEach { provinces.pushMap(buildProvince(it)) }
+        promise.resolve(provinces)
+    }
+
+    @ReactMethod
+    fun getCities(promise: Promise) {
+        val cities = Arguments.createArray()
+        manager.offlineMapCityList.forEach { cities.pushMap(buildCity(it)) }
+        promise.resolve(cities)
+    }
+
+    @ReactMethod
+    fun download(name: String) {
+        manager.offlineMapProvinceList.forEach { province ->
+          if (province.provinceName == name) {
+                return manager.downloadByProvinceName(name)
+            }
+            province.cityList.forEach {
+                if (it.city == name) {
+                    return manager.downloadByCityName(name)
+                }
+            }
+        }
+    }
+
+    @ReactMethod
+    fun stop() {
+        manager.stop()
+    }
+
+    @ReactMethod
+    fun remove(name: String) {
+        manager.remove(name)
+    }
+
+    private fun buildCity(city: OfflineMapCity): WritableMap {
+        val map = Arguments.createMap()
+        map.putString("name", city.city)
+        map.putString("code", city.code)
+        map.putString("state", getState(city.state))
+        map.putInt("size", city.size.toInt())
+        return map
+    }
+
+    private fun buildProvince(province: OfflineMapProvince): WritableMap {
+        val map = Arguments.createMap()
+        map.putString("name", province.provinceName)
+        map.putString("state", getState(province.state))
+        map.putInt("size", province.size.toInt())
+
+        val cities = Arguments.createArray()
+        province.cityList.forEach { cities.pushMap(buildCity(it)) }
+        map.putArray("cities", cities)
+
+        return map
+    }
+
+    private fun getState(code: Int): String {
+        var state = ""
+        when (code) {
+            OfflineMapStatus.SUCCESS -> state = "downloaded"
+            OfflineMapStatus.LOADING -> state = "downloading"
+            OfflineMapStatus.NEW_VERSION -> state = "expired"
+            OfflineMapStatus.WAITING -> state = "waiting"
+            OfflineMapStatus.UNZIP -> state = "unzip"
+        }
+        return state
+    }
+
+    override fun onDownload(state: Int, progress: Int, name: String?) {
+        val data = Arguments.createMap()
+        data.putString("name", name)
+        data.putString("state", getState(state))
+        data.putInt("progress", progress)
+        reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java).emit("download", data)
+    }
+
+    override fun onCheckUpdate(p0: Boolean, p1: String?) {}
+
+    override fun onRemove(p0: Boolean, p1: String?, p2: String?) {}
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMapUtils.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMapUtils.kt
new file mode 100644
index 0000000..182d0ff
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/AMapUtils.kt
@@ -0,0 +1,49 @@
+package cn.qiuxiang.react.amap3d
+
+import android.content.res.Resources
+import com.amap.api.maps.model.LatLng
+import com.amap.api.maps.model.LatLngBounds
+import com.facebook.react.bridge.Arguments
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.bridge.ReadableMap
+import com.facebook.react.bridge.WritableMap
+import kotlin.math.abs
+
+fun Float.toPx(): Int {
+    return (this * Resources.getSystem().displayMetrics.density).toInt()
+}
+
+fun ReadableMap.toLatLng(): LatLng {
+    return LatLng(getDouble("latitude"), getDouble("longitude"))
+}
+
+fun ReadableArray.toLatLngList(): ArrayList<LatLng> {
+    return ArrayList((0 until size()).map { getMap(it)!!.toLatLng() })
+}
+
+fun LatLng.toWritableMap(): WritableMap {
+    val map = Arguments.createMap()
+    map.putDouble("latitude", latitude)
+    map.putDouble("longitude", longitude)
+    return map
+}
+
+fun LatLngBounds.toWritableMap(): WritableMap {
+    val map = Arguments.createMap()
+    map.putDouble("latitude", abs((southwest.latitude + northeast.latitude) / 2))
+    map.putDouble("longitude", abs((southwest.longitude + northeast.longitude) / 2))
+    map.putDouble("latitudeDelta", abs(southwest.latitude - northeast.latitude))
+    map.putDouble("longitudeDelta", abs(southwest.longitude - northeast.longitude))
+    return map
+}
+
+fun ReadableMap.toLatLngBounds(): LatLngBounds {
+    val latitude = getDouble("latitude")
+    val longitude = getDouble("longitude")
+    val latitudeDelta = getDouble("latitudeDelta")
+    val longitudeDelta = getDouble("longitudeDelta")
+    return LatLngBounds(
+            LatLng(latitude - latitudeDelta / 2, longitude - longitudeDelta / 2),
+            LatLng(latitude + latitudeDelta / 2, longitude + longitudeDelta / 2)
+    )
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapCircle.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapCircle.kt
new file mode 100644
index 0000000..6415f76
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapCircle.kt
@@ -0,0 +1,63 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import android.graphics.Color
+import com.amap.api.maps.AMap
+import com.amap.api.maps.model.Circle
+import com.amap.api.maps.model.CircleOptions
+import com.amap.api.maps.model.LatLng
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapCircle(context: Context) : ReactViewGroup(context), AMapOverlay {
+    private var circle: Circle? = null
+
+    var center: LatLng? = null
+        set(value) {
+            field = value
+            circle?.center = value
+        }
+
+    var radius: Double = 0.0
+        set(value) {
+            field = value
+            circle?.radius = value
+        }
+
+    var strokeWidth: Float = 1f
+        set(value) {
+            field = value
+            circle?.strokeWidth = value
+        }
+
+    var strokeColor: Int = Color.BLACK
+        set(value) {
+            field = value
+            circle?.strokeColor = value
+        }
+
+    var fillColor: Int = Color.BLACK
+        set(value) {
+            field = value
+            circle?.fillColor = value
+        }
+
+    var zIndex: Float = 0f
+        set(value) {
+            field = value
+            circle?.zIndex = value
+        }
+
+    override fun add(map: AMap) {
+        circle = map.addCircle(CircleOptions()
+                .center(center)
+                .radius(radius)
+                .strokeColor(strokeColor)
+                .strokeWidth(strokeWidth)
+                .fillColor(fillColor)
+                .zIndex(zIndex))
+    }
+
+    override fun remove() {
+        circle?.remove()
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapCircleManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapCircleManager.kt
new file mode 100644
index 0000000..f326654
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapCircleManager.kt
@@ -0,0 +1,49 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import cn.qiuxiang.react.amap3d.toLatLng
+import cn.qiuxiang.react.amap3d.toPx
+import com.facebook.react.bridge.ReadableMap
+import com.facebook.react.uimanager.SimpleViewManager
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapCircleManager : SimpleViewManager<AMapCircle>() {
+    override fun getName(): String {
+        return "AMapCircle"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapCircle {
+        return AMapCircle(reactContext)
+    }
+
+    @ReactProp(name = "coordinate")
+    fun setCoordinate(circle: AMapCircle, coordinate: ReadableMap) {
+        circle.center = coordinate.toLatLng()
+    }
+
+    @ReactProp(name = "radius")
+    fun setRadius(circle: AMapCircle, radius: Double) {
+        circle.radius = radius
+    }
+
+    @ReactProp(name = "fillColor", customType = "Color")
+    fun setFillColor(circle: AMapCircle, fillColor: Int) {
+        circle.fillColor = fillColor
+    }
+
+    @ReactProp(name = "strokeColor", customType = "Color")
+    fun setStrokeColor(circle: AMapCircle, strokeColor: Int) {
+        circle.strokeColor = strokeColor
+    }
+
+    @ReactProp(name = "strokeWidth")
+    fun setStrokeWidth(circle: AMapCircle, strokeWidth: Float) {
+        circle.strokeWidth = strokeWidth.toPx().toFloat()
+    }
+
+    @ReactProp(name = "zIndex")
+    fun setZIndez(circle: AMapCircle, zIndex: Float) {
+        circle.zIndex = zIndex
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapHeatMap.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapHeatMap.kt
new file mode 100644
index 0000000..5d854aa
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapHeatMap.kt
@@ -0,0 +1,36 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import cn.qiuxiang.react.amap3d.toLatLngList
+import com.amap.api.maps.AMap
+import com.amap.api.maps.model.HeatmapTileProvider
+import com.amap.api.maps.model.LatLng
+import com.amap.api.maps.model.TileOverlay
+import com.amap.api.maps.model.TileOverlayOptions
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapHeatMap(context: Context) : ReactViewGroup(context), AMapOverlay {
+    private var overlay: TileOverlay? = null
+    private var coordinates: ArrayList<LatLng> = ArrayList()
+
+    var opacity: Double = 0.6
+    var radius: Int = 12
+
+    fun setCoordinates(coordinates: ReadableArray) {
+        this.coordinates = coordinates.toLatLngList()
+    }
+
+    override fun add(map: AMap) {
+        overlay = map.addTileOverlay(TileOverlayOptions().tileProvider(
+                HeatmapTileProvider.Builder()
+                        .data(coordinates)
+                        .radius(radius)
+                        .transparency(opacity)
+                        .build()))
+    }
+
+    override fun remove() {
+        overlay?.remove()
+    }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapHeatMapManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapHeatMapManager.kt
new file mode 100644
index 0000000..03efbb6
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapHeatMapManager.kt
@@ -0,0 +1,32 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.uimanager.SimpleViewManager
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapHeatMapManager : SimpleViewManager<AMapHeatMap>() {
+    override fun getName(): String {
+        return "AMapHeatMap"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapHeatMap {
+        return AMapHeatMap(reactContext)
+    }
+
+    @ReactProp(name = "coordinates")
+    fun setCoordinate(heatMap: AMapHeatMap, coordinates: ReadableArray) {
+        heatMap.setCoordinates(coordinates)
+    }
+
+    @ReactProp(name = "radius")
+    fun setRadius(heatMap: AMapHeatMap, radius: Int) {
+        heatMap.radius = radius
+    }
+
+    @ReactProp(name = "opacity")
+    fun setOpacity(heatMap: AMapHeatMap, opacity: Double) {
+        heatMap.opacity = opacity
+    }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindow.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindow.kt
new file mode 100644
index 0000000..31e0abc
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindow.kt
@@ -0,0 +1,15 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapInfoWindow(context: Context) : ReactViewGroup(context) {
+    init {
+        addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ ->
+            val layoutParams = this.layoutParams
+            if (layoutParams == null || layoutParams.width != this.width || layoutParams.height != this.height) {
+                this.layoutParams = LayoutParams(this.width, this.height)
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindowAdapter.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindowAdapter.kt
new file mode 100644
index 0000000..842afcf
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindowAdapter.kt
@@ -0,0 +1,43 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import android.graphics.Color
+import android.view.View
+import android.widget.LinearLayout
+import android.widget.TextView
+import com.amap.api.maps.AMap.InfoWindowAdapter
+import com.amap.api.maps.model.Marker
+
+class AMapInfoWindowAdapter(
+        private val context: Context,
+        private val markers: HashMap<String, AMapMarker>
+) : InfoWindowAdapter {
+    private val paddingTop = context.resources.displayMetrics.density
+
+    override fun getInfoWindow(marker: Marker): View? {
+        return markers[marker.id]?.infoWindow
+    }
+
+    override fun getInfoContents(marker: Marker): View? {
+        val layout = LinearLayout(context)
+        layout.orientation = LinearLayout.VERTICAL
+
+        val titleView = TextView(context)
+        titleView.text = marker.title
+        titleView.setTextColor(Color.parseColor("#212121"))
+        layout.addView(titleView)
+
+        val snippet = marker.snippet
+        if (snippet.isNotEmpty()) {
+            val snippetView = TextView(context)
+            snippetView.text = snippet
+            snippetView.maxEms = 12
+            snippetView.setPadding(0, paddingTop.toInt(), 0, 0)
+            snippetView.setTextColor(Color.parseColor("#757575"))
+            layout.addView(snippetView)
+        }
+
+        return layout
+    }
+}
+
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindowManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindowManager.kt
new file mode 100644
index 0000000..f4655b6
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapInfoWindowManager.kt
@@ -0,0 +1,14 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.ViewGroupManager
+
+class AMapInfoWindowManager : ViewGroupManager<AMapInfoWindow>() {
+    override fun getName(): String {
+        return "AMapInfoWindow"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapInfoWindow {
+        return AMapInfoWindow(reactContext)
+    }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMarker.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMarker.kt
new file mode 100644
index 0000000..33202bc
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMarker.kt
@@ -0,0 +1,170 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import android.graphics.Bitmap
+import android.graphics.Canvas
+import android.os.Handler
+import android.view.View
+import cn.qiuxiang.react.amap3d.toPx
+import com.amap.api.maps.AMap
+import com.amap.api.maps.model.*
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapMarker(context: Context) : ReactViewGroup(context), AMapOverlay {
+    companion object {
+        private val COLORS = mapOf(
+                "AZURE" to BitmapDescriptorFactory.HUE_AZURE,
+                "BLUE" to BitmapDescriptorFactory.HUE_BLUE,
+                "CYAN" to BitmapDescriptorFactory.HUE_CYAN,
+                "GREEN" to BitmapDescriptorFactory.HUE_GREEN,
+                "MAGENTA" to BitmapDescriptorFactory.HUE_MAGENTA,
+                "ORANGE" to BitmapDescriptorFactory.HUE_ORANGE,
+                "RED" to BitmapDescriptorFactory.HUE_RED,
+                "ROSE" to BitmapDescriptorFactory.HUE_ROSE,
+                "VIOLET" to BitmapDescriptorFactory.HUE_VIOLET,
+                "YELLOW" to BitmapDescriptorFactory.HUE_YELLOW
+        )
+    }
+
+    private var icon: View? = null
+    private var bitmapDescriptor: BitmapDescriptor? = null
+    private var anchorU: Float = 0.5f
+    private var anchorV: Float = 1f
+    var infoWindow: AMapInfoWindow? = null
+
+    var marker: Marker? = null
+        private set
+
+    var position: LatLng? = null
+        set(value) {
+            field = value
+            marker?.position = value
+        }
+
+    var zIndex: Float = 0.0f
+        set(value) {
+            field = value
+            marker?.zIndex = value
+        }
+
+    var title = ""
+        set(value) {
+            field = value
+            marker?.title = value
+        }
+
+    var snippet = ""
+        set(value) {
+            field = value
+            marker?.snippet = value
+        }
+
+    var flat: Boolean = false
+        set(value) {
+            field = value
+            marker?.isFlat = value
+        }
+
+    var opacity: Float = 1f
+        set(value) {
+            field = value
+            marker?.alpha = value
+        }
+
+    var draggable: Boolean = false
+        set(value) {
+            field = value
+            marker?.isDraggable = value
+        }
+
+    var clickDisabled: Boolean = false
+        set(value) {
+            field = value
+            marker?.isClickable = !value
+        }
+
+    var infoWindowDisabled: Boolean = false
+        set(value) {
+            field = value
+            marker?.isInfoWindowEnable = !value
+        }
+
+    var active: Boolean = false
+        set(value) {
+            field = value
+            if (value) {
+                marker?.showInfoWindow()
+            } else {
+                marker?.hideInfoWindow()
+            }
+        }
+
+    override fun addView(child: View, index: Int) {
+        super.addView(child, index)
+        icon = child
+        icon?.addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ -> updateIcon() }
+    }
+
+    override fun add(map: AMap) {
+        marker = map.addMarker(MarkerOptions()
+                .setFlat(flat)
+                .icon(bitmapDescriptor)
+                .alpha(opacity)
+                .draggable(draggable)
+                .position(position)
+                .anchor(anchorU, anchorV)
+                .infoWindowEnable(!infoWindowDisabled)
+                .title(title)
+                .snippet(snippet)
+                .zIndex(zIndex))
+
+        this.clickDisabled = clickDisabled
+        this.active = active
+    }
+
+    override fun remove() {
+        marker?.destroy()
+    }
+
+    fun setIconColor(icon: String) {
+        bitmapDescriptor = COLORS[icon.toUpperCase()]?.let {
+            BitmapDescriptorFactory.defaultMarker(it)
+        }
+        marker?.setIcon(bitmapDescriptor)
+    }
+
+    fun updateIcon() {
+        icon?.let {
+            if (it.width != 0 && it.height != 0) {
+                val bitmap = Bitmap.createBitmap(
+                        it.width, it.height, Bitmap.Config.ARGB_8888)
+                it.draw(Canvas(bitmap))
+                bitmapDescriptor = BitmapDescriptorFactory.fromBitmap(bitmap)
+                marker?.setIcon(bitmapDescriptor)
+            }
+        }
+    }
+
+    fun setImage(name: String) {
+        Handler().postDelayed({
+            val drawable = context.resources.getIdentifier(name, "drawable", context.packageName)
+            bitmapDescriptor = BitmapDescriptorFactory.fromResource(drawable)
+            marker?.setIcon(bitmapDescriptor)
+        }, 0)
+    }
+
+    fun setAnchor(x: Double, y: Double) {
+        anchorU = x.toFloat()
+        anchorV = y.toFloat()
+        marker?.setAnchor(anchorU, anchorV)
+    }
+
+    fun lockToScreen(args: ReadableArray?) {
+        if (args != null) {
+            val x = args.getDouble(0).toFloat().toPx()
+            val y = args.getDouble(1).toFloat().toPx()
+            marker?.setPositionByPixels(x, y)
+        }
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMarkerManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMarkerManager.kt
new file mode 100644
index 0000000..7bced6f
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMarkerManager.kt
@@ -0,0 +1,125 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.view.View
+import cn.qiuxiang.react.amap3d.toLatLng
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.bridge.ReadableMap
+import com.facebook.react.common.MapBuilder
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.ViewGroupManager
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapMarkerManager : ViewGroupManager<AMapMarker>() {
+    override fun getName(): String {
+        return "AMapMarker"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapMarker {
+        return AMapMarker(reactContext)
+    }
+
+    override fun addView(marker: AMapMarker, view: View, index: Int) {
+        when (view) {
+            is AMapInfoWindow -> marker.infoWindow = view
+            else -> super.addView(marker, view, index)
+        }
+    }
+
+    override fun getExportedCustomDirectEventTypeConstants(): Map<String, Any>? {
+        return MapBuilder.of(
+                "onPress", MapBuilder.of("registrationName", "onAMapPress"),
+                "onDragStart", MapBuilder.of("registrationName", "onAMapDragStart"),
+                "onDrag", MapBuilder.of("registrationName", "onAMapDrag"),
+                "onDragEnd", MapBuilder.of("registrationName", "onAMapDragEnd"),
+                "onInfoWindowPress", MapBuilder.of("registrationName", "onAMapInfoWindowPress")
+        )
+    }
+
+    companion object {
+        const val UPDATE = 1
+        const val ACTIVE = 2
+        const val LOCK_TO_SCREEN = 3
+    }
+
+    override fun getCommandsMap(): Map<String, Int> {
+        return mapOf(
+                "update" to UPDATE,
+                "active" to ACTIVE,
+                "lockToScreen" to LOCK_TO_SCREEN
+        )
+    }
+
+    override fun receiveCommand(marker: AMapMarker, commandId: Int, args: ReadableArray?) {
+        when (commandId) {
+            UPDATE -> marker.updateIcon()
+            ACTIVE -> marker.active = true
+            LOCK_TO_SCREEN -> marker.lockToScreen(args)
+        }
+    }
+
+    @ReactProp(name = "title")
+    fun setTitle(marker: AMapMarker, title: String) {
+        marker.title = title
+    }
+
+    @ReactProp(name = "description")
+    fun setSnippet(marker: AMapMarker, description: String) {
+        marker.snippet = description
+    }
+
+    @ReactProp(name = "coordinate")
+    fun setCoordinate(view: AMapMarker, coordinate: ReadableMap) {
+        view.position = coordinate.toLatLng()
+    }
+
+    @ReactProp(name = "flat")
+    fun setFlat(marker: AMapMarker, flat: Boolean) {
+        marker.flat = flat
+    }
+
+    @ReactProp(name = "opacity")
+    override fun setOpacity(marker: AMapMarker, opacity: Float) {
+        marker.opacity = opacity
+    }
+
+    @ReactProp(name = "draggable")
+    fun setDraggable(marker: AMapMarker, draggable: Boolean) {
+        marker.draggable = draggable
+    }
+
+    @ReactProp(name = "clickDisabled")
+    fun setClickDisabled(marker: AMapMarker, disabled: Boolean) {
+        marker.clickDisabled = disabled
+    }
+
+    @ReactProp(name = "infoWindowDisabled")
+    fun setInfoWindowDisabled(marker: AMapMarker, disabled: Boolean) {
+        marker.infoWindowDisabled = disabled
+    }
+
+    @ReactProp(name = "active")
+    fun setSelected(marker: AMapMarker, active: Boolean) {
+        marker.active = active
+    }
+
+    @ReactProp(name = "color")
+    fun setIcon(marker: AMapMarker, icon: String) {
+        marker.setIconColor(icon)
+    }
+
+    @ReactProp(name = "image")
+    fun setImage(marker: AMapMarker, image: String) {
+        marker.setImage(image)
+    }
+
+    @ReactProp(name = "zIndex")
+    fun setZIndez(marker: AMapMarker, zIndex: Float) {
+        marker.zIndex = zIndex
+    }
+
+    @ReactProp(name = "anchor")
+    fun setAnchor(view: AMapMarker, coordinate: ReadableMap) {
+        view.setAnchor(coordinate.getDouble("x"), coordinate.getDouble("y"))
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMultiPoint.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMultiPoint.kt
new file mode 100644
index 0000000..39d4d96
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMultiPoint.kt
@@ -0,0 +1,46 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import cn.qiuxiang.react.amap3d.toLatLng
+import com.amap.api.maps.AMap
+import com.amap.api.maps.model.*
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapMultiPoint(context: Context) : ReactViewGroup(context), AMapOverlay {
+    private var overlay: MultiPointOverlay? = null
+    private var items: ArrayList<MultiPointItem> = ArrayList()
+    private var icon: BitmapDescriptor? = null
+
+    fun setPoints(points: ReadableArray) {
+        items = ArrayList((0 until points.size())
+                .map {
+                    val data = points.getMap(it)
+                    val item = MultiPointItem(data!!.toLatLng())
+                    if (data.hasKey("title")) {
+                        item.title = data.getString("title")
+                    }
+                    if (data.hasKey("subtitle")) {
+                        item.snippet = data.getString("subtitle")
+                    }
+                    item.customerId = id.toString() + "_" + it
+                    item
+                })
+        overlay?.setItems(items)
+    }
+
+    override fun add(map: AMap) {
+        overlay = map.addMultiPointOverlay(MultiPointOverlayOptions().icon(icon))
+        overlay?.setItems(items)
+        overlay?.setEnable(true)
+    }
+
+    override fun remove() {
+        overlay?.destroy()
+    }
+
+    fun setImage(image: String) {
+        val drawable = context.resources.getIdentifier(image, "drawable", context.packageName)
+        icon = BitmapDescriptorFactory.fromResource(drawable)
+    }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMultiPointManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMultiPointManager.kt
new file mode 100644
index 0000000..f309a1c
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapMultiPointManager.kt
@@ -0,0 +1,34 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.common.MapBuilder
+import com.facebook.react.uimanager.SimpleViewManager
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapMultiPointManager : SimpleViewManager<AMapMultiPoint>() {
+    override fun getName(): String {
+        return "AMapMultiPoint"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapMultiPoint {
+        return AMapMultiPoint(reactContext)
+    }
+
+    override fun getExportedCustomDirectEventTypeConstants(): Map<String, Any>? {
+        return MapBuilder.of(
+                "onItemPress", MapBuilder.of("registrationName", "onItemPress")
+        )
+    }
+
+    @ReactProp(name = "points")
+    fun setPoints(multiPoint: AMapMultiPoint, points: ReadableArray) {
+        multiPoint.setPoints(points)
+    }
+
+    @ReactProp(name = "image")
+    fun setImage(multiPoint: AMapMultiPoint, image: String) {
+        multiPoint.setImage(image)
+    }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapOverlay.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapOverlay.kt
new file mode 100644
index 0000000..2c6469b
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapOverlay.kt
@@ -0,0 +1,8 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import com.amap.api.maps.AMap
+
+interface AMapOverlay {
+    fun add(map: AMap)
+    fun remove()
+}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolygon.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolygon.kt
new file mode 100644
index 0000000..aca5d48
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolygon.kt
@@ -0,0 +1,58 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import android.graphics.Color
+import cn.qiuxiang.react.amap3d.toLatLngList
+import com.amap.api.maps.AMap
+import com.amap.api.maps.model.LatLng
+import com.amap.api.maps.model.Polygon
+import com.amap.api.maps.model.PolygonOptions
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapPolygon(context: Context) : ReactViewGroup(context), AMapOverlay {
+    private var polygon: Polygon? = null
+    private var coordinates: ArrayList<LatLng> = ArrayList()
+
+    var strokeWidth: Float = 1f
+        set(value) {
+            field = value
+            polygon?.strokeWidth = value
+        }
+
+    var strokeColor: Int = Color.BLACK
+        set(value) {
+            field = value
+            polygon?.strokeColor = value
+        }
+
+    var fillColor: Int = Color.BLACK
+        set(value) {
+            field = value
+            polygon?.fillColor = value
+        }
+
+    var zIndex: Float = 0f
+        set(value) {
+            field = value
+            polygon?.zIndex = value
+        }
+
+    fun setCoordinates(coordinates: ReadableArray) {
+        this.coordinates = coordinates.toLatLngList()
+        polygon?.points = this.coordinates
+    }
+
+    override fun add(map: AMap) {
+        polygon = map.addPolygon(PolygonOptions()
+                .addAll(coordinates)
+                .strokeColor(strokeColor)
+                .strokeWidth(strokeWidth)
+                .fillColor(fillColor)
+                .zIndex(zIndex))
+    }
+
+    override fun remove() {
+        polygon?.remove()
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolygonManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolygonManager.kt
new file mode 100644
index 0000000..101a775
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolygonManager.kt
@@ -0,0 +1,43 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import cn.qiuxiang.react.amap3d.toPx
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.uimanager.SimpleViewManager
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapPolygonManager : SimpleViewManager<AMapPolygon>() {
+    override fun getName(): String {
+        return "AMapPolygon"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapPolygon {
+        return AMapPolygon(reactContext)
+    }
+
+    @ReactProp(name = "coordinates")
+    fun setCoordinate(polygon: AMapPolygon, coordinates: ReadableArray) {
+        polygon.setCoordinates(coordinates)
+    }
+
+    @ReactProp(name = "fillColor", customType = "Color")
+    fun setFillColor(polygon: AMapPolygon, fillColor: Int) {
+        polygon.fillColor = fillColor
+    }
+
+    @ReactProp(name = "strokeColor", customType = "Color")
+    fun setStrokeColor(polygon: AMapPolygon, strokeColor: Int) {
+        polygon.strokeColor = strokeColor
+    }
+
+    @ReactProp(name = "strokeWidth")
+    fun setStrokeWidth(polygon: AMapPolygon, strokeWidth: Float) {
+        polygon.strokeWidth = strokeWidth.toPx().toFloat()
+    }
+
+    @ReactProp(name = "zIndex")
+    fun setZindex(polygon: AMapPolygon, zIndex: Float) {
+        polygon.zIndex = zIndex
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolyline.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolyline.kt
new file mode 100644
index 0000000..3400d18
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolyline.kt
@@ -0,0 +1,76 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import android.graphics.Color
+import cn.qiuxiang.react.amap3d.toLatLngList
+import com.amap.api.maps.AMap
+import com.amap.api.maps.model.LatLng
+import com.amap.api.maps.model.Polyline
+import com.amap.api.maps.model.PolylineOptions
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.views.view.ReactViewGroup
+
+class AMapPolyline(context: Context) : ReactViewGroup(context), AMapOverlay {
+    var polyline: Polyline? = null
+        private set
+
+    private var coordinates: ArrayList<LatLng> = ArrayList()
+    private var colors: ArrayList<Int> = ArrayList()
+
+    var width: Float = 1f
+        set(value) {
+            field = value
+            polyline?.width = value
+        }
+
+    var color: Int = Color.BLACK
+        set(value) {
+            field = value
+            polyline?.color = value
+        }
+
+    var zIndex: Float = 0f
+        set(value) {
+            field = value
+            polyline?.zIndex = value
+        }
+
+    var geodesic: Boolean = false
+        set(value) {
+            field = value
+            polyline?.isGeodesic = value
+        }
+
+    var dashed: Boolean = false
+        set(value) {
+            field = value
+            polyline?.isDottedLine = value
+        }
+
+    var gradient: Boolean = false
+
+    fun setCoordinates(coordinates: ReadableArray) {
+        this.coordinates = coordinates.toLatLngList()
+        polyline?.points = this.coordinates
+    }
+
+    fun setColors(colors: ReadableArray) {
+        this.colors = ArrayList((0 until colors.size()).map { colors.getInt(it) })
+    }
+
+    override fun add(map: AMap) {
+        polyline = map.addPolyline(PolylineOptions()
+                .addAll(coordinates)
+                .color(color)
+                .colorValues(colors)
+                .width(width)
+                .useGradient(gradient)
+                .geodesic(geodesic)
+                .setDottedLine(dashed)
+                .zIndex(zIndex))
+    }
+
+    override fun remove() {
+        polyline?.remove()
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolylineManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolylineManager.kt
new file mode 100644
index 0000000..f5faa42
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapPolylineManager.kt
@@ -0,0 +1,62 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import cn.qiuxiang.react.amap3d.toPx
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.uimanager.SimpleViewManager
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapPolylineManager : SimpleViewManager<AMapPolyline>() {
+    override fun getName(): String {
+        return "AMapPolyline"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapPolyline {
+        return AMapPolyline(reactContext)
+    }
+
+    override fun getExportedCustomDirectEventTypeConstants(): Map<String, Any> {
+        return mapOf("onPress" to mapOf("registrationName" to "onPress"))
+    }
+
+    @ReactProp(name = "coordinates")
+    fun setCoordinate(polyline: AMapPolyline, coordinates: ReadableArray) {
+        polyline.setCoordinates(coordinates)
+    }
+
+    @ReactProp(name = "colors")
+    fun setColors(polyline: AMapPolyline, colors: ReadableArray) {
+        polyline.setColors(colors)
+    }
+
+    @ReactProp(name = "color", customType = "Color")
+    fun setColor(polyline: AMapPolyline, color: Int) {
+        polyline.color = color
+    }
+
+    @ReactProp(name = "width")
+    fun setWidth(polyline: AMapPolyline, width: Float) {
+        polyline.width = width.toPx().toFloat()
+    }
+
+    @ReactProp(name = "zIndex")
+    fun setZIndez(polyline: AMapPolyline, zIndex: Float) {
+        polyline.zIndex = zIndex
+    }
+
+    @ReactProp(name = "geodesic")
+    fun setGeodesic(polyline: AMapPolyline, geodesic: Boolean) {
+        polyline.geodesic = geodesic
+    }
+
+    @ReactProp(name = "dashed")
+    fun setDashed(polyline: AMapPolyline, dashed: Boolean) {
+        polyline.dashed = dashed
+    }
+
+    @ReactProp(name = "gradient")
+    fun setGradient(polyline: AMapPolyline, gradient: Boolean) {
+        polyline.gradient = gradient
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapView.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapView.kt
new file mode 100644
index 0000000..a3a7255
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapView.kt
@@ -0,0 +1,253 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.content.Context
+import android.view.View
+import cn.qiuxiang.react.amap3d.toLatLng
+import cn.qiuxiang.react.amap3d.toLatLngBounds
+import cn.qiuxiang.react.amap3d.toWritableMap
+import com.amap.api.maps.AMap
+import com.amap.api.maps.CameraUpdateFactory
+import com.amap.api.maps.TextureMapView
+import com.amap.api.maps.model.BitmapDescriptorFactory
+import com.amap.api.maps.model.CameraPosition
+import com.amap.api.maps.model.Marker
+import com.amap.api.maps.model.MyLocationStyle
+import com.facebook.react.bridge.Arguments
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.bridge.ReadableMap
+import com.facebook.react.bridge.WritableMap
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.events.RCTEventEmitter
+
+class AMapView(context: Context) : TextureMapView(context) {
+    private val eventEmitter: RCTEventEmitter = (context as ThemedReactContext).getJSModule(RCTEventEmitter::class.java)
+    private val markers = HashMap<String, AMapMarker>()
+    private val lines = HashMap<String, AMapPolyline>()
+    private val locationStyle by lazy {
+        val locationStyle = MyLocationStyle()
+        locationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE_NO_CENTER)
+        locationStyle
+    }
+
+    init {
+        super.onCreate(null)
+
+        map.setOnMapClickListener { latLng ->
+            for (marker in markers.values) {
+                marker.active = false
+            }
+
+            emit(id, "onClick", latLng.toWritableMap())
+        }
+
+        map.setOnMapLongClickListener { latLng ->
+            emit(id, "onLongClick", latLng.toWritableMap())
+        }
+
+        map.setOnMyLocationChangeListener { location ->
+            val event = Arguments.createMap()
+            event.putDouble("latitude", location.latitude)
+            event.putDouble("longitude", location.longitude)
+            event.putDouble("accuracy", location.accuracy.toDouble())
+            event.putDouble("altitude", location.altitude)
+            event.putDouble("heading", location.bearing.toDouble())
+            event.putDouble("speed", location.speed.toDouble())
+            event.putDouble("timestamp", location.time.toDouble())
+            emit(id, "onLocation", event)
+        }
+
+        map.setOnMarkerClickListener { marker ->
+            markers[marker.id]?.let {
+                it.active = true
+                emit(it.id, "onPress")
+            }
+            true
+        }
+
+        map.setOnPOIClickListener { poi ->
+            val data = poi.coordinate.toWritableMap()
+            data.putString("id", poi.poiId)
+            data.putString("name", poi.name)
+            emit(id, "onClick", data)
+        }
+
+        map.setOnMarkerDragListener(object : AMap.OnMarkerDragListener {
+            override fun onMarkerDragStart(marker: Marker) {
+                emit(markers[marker.id]?.id, "onDragStart")
+            }
+
+            override fun onMarkerDrag(marker: Marker) {
+                emit(markers[marker.id]?.id, "onDrag")
+            }
+
+            override fun onMarkerDragEnd(marker: Marker) {
+                emit(markers[marker.id]?.id, "onDragEnd", marker.position.toWritableMap())
+            }
+        })
+
+        map.setOnCameraChangeListener(object : AMap.OnCameraChangeListener {
+            override fun onCameraChangeFinish(position: CameraPosition?) {
+                emitCameraChangeEvent("onStatusChangeComplete", position)
+            }
+
+            override fun onCameraChange(position: CameraPosition?) {
+                emitCameraChangeEvent("onStatusChange", position)
+            }
+        })
+
+        map.setOnInfoWindowClickListener { marker ->
+            emit(markers[marker.id]?.id, "onInfoWindowPress")
+        }
+
+        map.setOnPolylineClickListener { polyline ->
+            emit(lines[polyline.id]?.id, "onPress")
+        }
+
+        map.setOnMultiPointClickListener { item ->
+            val slice = item.customerId.split("_")
+            val data = Arguments.createMap()
+            data.putInt("index", slice[1].toInt())
+            emit(slice[0].toInt(), "onItemPress", data)
+            false
+        }
+
+        map.setInfoWindowAdapter(AMapInfoWindowAdapter(context, markers))
+    }
+
+    fun emitCameraChangeEvent(event: String, position: CameraPosition?) {
+        position?.let {
+            val data = Arguments.createMap()
+            data.putMap("center", it.target.toWritableMap())
+            data.putDouble("zoomLevel", it.zoom.toDouble())
+            data.putDouble("tilt", it.tilt.toDouble())
+            data.putDouble("rotation", it.bearing.toDouble())
+            if (event == "onStatusChangeComplete") {
+                data.putMap("region", map.projection.visibleRegion.latLngBounds.toWritableMap())
+            }
+            emit(id, event, data)
+        }
+    }
+
+    fun emit(id: Int?, event: String, data: WritableMap = Arguments.createMap()) {
+        id?.let { eventEmitter.receiveEvent(it, event, data) }
+    }
+
+    fun add(child: View) {
+        if (child is AMapOverlay) {
+            child.add(map)
+            if (child is AMapMarker) {
+                markers[child.marker?.id!!] = child
+            }
+            if (child is AMapPolyline) {
+                lines[child.polyline?.id!!] = child
+            }
+        }
+    }
+
+    fun remove(child: View) {
+        if (child is AMapOverlay) {
+            child.remove()
+            if (child is AMapMarker) {
+                markers.remove(child.marker?.id)
+            }
+            if (child is AMapPolyline) {
+                lines.remove(child.polyline?.id)
+            }
+        }
+    }
+
+    private val animateCallback = object : AMap.CancelableCallback {
+        override fun onCancel() {
+            emit(id, "onAnimateCancel")
+        }
+
+        override fun onFinish() {
+            emit(id, "onAnimateFinish")
+        }
+    }
+
+    fun animateTo(args: ReadableArray?) {
+        val currentCameraPosition = map.cameraPosition
+        val status = args?.getMap(0)!!
+        val duration = args.getInt(1)
+
+        var center = currentCameraPosition.target
+        var zoomLevel = currentCameraPosition.zoom
+        var tilt = currentCameraPosition.tilt
+        var rotation = currentCameraPosition.bearing
+
+        if (status.hasKey("center")) {
+            center = status.getMap("center")!!.toLatLng()
+        }
+
+        if (status.hasKey("zoomLevel")) {
+            zoomLevel = status.getDouble("zoomLevel").toFloat()
+        }
+
+        if (status.hasKey("tilt")) {
+            tilt = status.getDouble("tilt").toFloat()
+        }
+
+        if (status.hasKey("rotation")) {
+            rotation = status.getDouble("rotation").toFloat()
+        }
+
+        val cameraUpdate = CameraUpdateFactory.newCameraPosition(
+                CameraPosition(center, zoomLevel, tilt, rotation))
+        map.animateCamera(cameraUpdate, duration.toLong(), animateCallback)
+    }
+
+    fun setRegion(region: ReadableMap) {
+        map.moveCamera(CameraUpdateFactory.newLatLngBounds(region.toLatLngBounds(), 0))
+    }
+
+    fun setLimitRegion(region: ReadableMap) {
+        map.setMapStatusLimits(region.toLatLngBounds())
+    }
+
+    fun setLocationEnabled(enabled: Boolean) {
+        map.isMyLocationEnabled = enabled
+        map.myLocationStyle = locationStyle
+    }
+
+    fun setLocationInterval(interval: Long) {
+        locationStyle.interval(interval)
+        map.myLocationStyle = locationStyle
+    }
+
+    fun setLocationStyle(style: ReadableMap) {
+        if (style.hasKey("fillColor")) {
+            locationStyle.radiusFillColor(style.getInt("fillColor"))
+        }
+
+        if (style.hasKey("strokeColor")) {
+            locationStyle.strokeColor(style.getInt("strokeColor"))
+        }
+
+        if (style.hasKey("strokeWidth")) {
+            locationStyle.strokeWidth(style.getDouble("strokeWidth").toFloat())
+        }
+
+        if (style.hasKey("image")) {
+            val drawable = context.resources.getIdentifier(
+                    style.getString("image"), "drawable", context.packageName)
+            locationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(drawable))
+        }
+
+        if (style.hasKey("showLocation")) {
+            locationStyle.showMyLocation(style.getBoolean("showLocation"))
+        }
+
+        if (style.hasKey("anchor")) {
+            val anchor = style.getArray("anchor");
+            locationStyle.anchor(anchor!!.getDouble(0).toFloat(), anchor.getDouble(1).toFloat())
+        }
+
+        map.myLocationStyle = locationStyle
+    }
+
+    fun setLocationType(type: Int) {
+        locationStyle.myLocationType(type)
+        map.myLocationStyle = locationStyle
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapViewManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapViewManager.kt
new file mode 100644
index 0000000..2e43f6b
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/android/src/main/java/cn/qiuxiang/react/amap3d/maps/AMapViewManager.kt
@@ -0,0 +1,208 @@
+package cn.qiuxiang.react.amap3d.maps
+
+import android.view.View
+import cn.qiuxiang.react.amap3d.toLatLng
+import com.amap.api.maps.CameraUpdateFactory
+import com.amap.api.maps.model.MyLocationStyle
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.bridge.ReadableMap
+import com.facebook.react.common.MapBuilder
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.ViewGroupManager
+import com.facebook.react.uimanager.annotations.ReactProp
+
+@Suppress("unused")
+internal class AMapViewManager : ViewGroupManager<AMapView>() {
+    companion object {
+        const val SET_STATUS = 1
+    }
+
+    override fun getName(): String {
+        return "AMapView"
+    }
+
+    override fun createViewInstance(reactContext: ThemedReactContext): AMapView {
+        return AMapView(reactContext)
+    }
+
+    override fun onDropViewInstance(view: AMapView) {
+        super.onDropViewInstance(view)
+        view.onDestroy()
+    }
+
+    override fun getCommandsMap(): Map<String, Int> {
+        return mapOf("setStatus" to SET_STATUS)
+    }
+
+    override fun receiveCommand(overlay: AMapView, commandId: Int, args: ReadableArray?) {
+        when (commandId) {
+            SET_STATUS -> overlay.animateTo(args)
+        }
+    }
+
+    override fun addView(mapView: AMapView, child: View, index: Int) {
+        mapView.add(child)
+        super.addView(mapView, child, index)
+    }
+
+    override fun removeViewAt(parent: AMapView, index: Int) {
+        parent.remove(parent.getChildAt(index))
+        super.removeViewAt(parent, index)
+    }
+
+    override fun getExportedCustomDirectEventTypeConstants(): Map<String, Any> {
+        return MapBuilder.of(
+                "onClick", MapBuilder.of("registrationName", "onAMapClick"),
+                "onLongClick", MapBuilder.of("registrationName", "onAMapLongClick"),
+                "onLocation", MapBuilder.of("registrationName", "onAMapLocation"),
+                "onAnimateCancel", MapBuilder.of("registrationName", "onAMapAnimateCancel"),
+                "onAnimateFinish", MapBuilder.of("registrationName", "onAMapAnimateFinish"),
+                "onStatusChange", MapBuilder.of("registrationName", "onAMapStatusChange"),
+                "onStatusChangeComplete", MapBuilder.of("registrationName", "onAMapStatusChangeComplete")
+        )
+    }
+
+    @ReactProp(name = "locationEnabled")
+    fun setMyLocationEnabled(view: AMapView, enabled: Boolean) {
+        view.setLocationEnabled(enabled)
+    }
+
+    @ReactProp(name = "showsIndoorMap")
+    fun showIndoorMap(view: AMapView, show: Boolean) {
+        view.map.showIndoorMap(show)
+    }
+
+    @ReactProp(name = "showsIndoorSwitch")
+    fun setIndoorSwitchEnabled(view: AMapView, show: Boolean) {
+        view.map.uiSettings.isIndoorSwitchEnabled = show
+    }
+
+    @ReactProp(name = "showsBuildings")
+    fun showBuildings(view: AMapView, show: Boolean) {
+        view.map.showBuildings(show)
+    }
+
+    @ReactProp(name = "showsLabels")
+    fun showMapText(view: AMapView, show: Boolean) {
+        view.map.showMapText(show)
+    }
+
+    @ReactProp(name = "showsCompass")
+    fun setCompassEnabled(view: AMapView, show: Boolean) {
+        view.map.uiSettings.isCompassEnabled = show
+    }
+
+    @ReactProp(name = "showsZoomControls")
+    fun setZoomControlsEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isZoomControlsEnabled = enabled
+    }
+
+    @ReactProp(name = "showsScale")
+    fun setScaleControlsEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isScaleControlsEnabled = enabled
+    }
+
+    @ReactProp(name = "mapLanguage")
+    fun setLanguage(view: AMapView, mapLanguage:Int) {
+        view.map.setMapLanguage(if(mapLanguage == 1) {"en"} else {"zh_cn"})
+    }
+
+    @ReactProp(name = "showsLocationButton")
+    fun setMyLocationButtonEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isMyLocationButtonEnabled = enabled
+    }
+
+    @ReactProp(name = "showsTraffic")
+    fun setTrafficEnabled(view: AMapView, enabled: Boolean) {
+        view.map.isTrafficEnabled = enabled
+    }
+
+    @ReactProp(name = "maxZoomLevel")
+    fun setMaxZoomLevel(view: AMapView, zoomLevel: Float) {
+        view.map.maxZoomLevel = zoomLevel
+    }
+
+    @ReactProp(name = "minZoomLevel")
+    fun setMinZoomLevel(view: AMapView, zoomLevel: Float) {
+        view.map.minZoomLevel = zoomLevel
+    }
+
+    @ReactProp(name = "zoomLevel")
+    fun setZoomLevel(view: AMapView, zoomLevel: Float) {
+        view.map.moveCamera(CameraUpdateFactory.zoomTo(zoomLevel))
+    }
+
+    @ReactProp(name = "mapType")
+    fun setMapType(view: AMapView, mapType: Int) {
+        view.map.mapType = mapType + 1
+    }
+
+    @ReactProp(name = "zoomEnabled")
+    fun setZoomGesturesEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isZoomGesturesEnabled = enabled
+    }
+
+    @ReactProp(name = "scrollEnabled")
+    fun setScrollGesturesEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isScrollGesturesEnabled = enabled
+    }
+
+    @ReactProp(name = "rotateEnabled")
+    fun setRotateGesturesEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isRotateGesturesEnabled = enabled
+    }
+
+    @ReactProp(name = "tiltEnabled")
+    fun setTiltGesturesEnabled(view: AMapView, enabled: Boolean) {
+        view.map.uiSettings.isTiltGesturesEnabled = enabled
+    }
+
+    @ReactProp(name = "center")
+    fun setCenter(view: AMapView, center: ReadableMap) {
+        view.map.moveCamera(CameraUpdateFactory.changeLatLng(center.toLatLng()))
+    }
+
+    @ReactProp(name = "region")
+    fun setRegion(view: AMapView, region: ReadableMap) {
+        view.setRegion(region)
+    }
+
+    @ReactProp(name = "limitRegion")
+    fun setLimitRegion(view: AMapView, limitRegion: ReadableMap) {
+        view.setLimitRegion(limitRegion)
+    }
+
+    @ReactProp(name = "tilt")
+    fun changeTilt(view: AMapView, tilt: Float) {
+        view.map.moveCamera(CameraUpdateFactory.changeTilt(tilt))
+    }
+
+    @ReactProp(name = "rotation")
+    fun changeRotation(view: AMapView, rotation: Float) {
+        view.map.moveCamera(CameraUpdateFactory.changeBearing(rotation))
+    }
+
+    @ReactProp(name = "locationInterval")
+    fun setLocationInterval(view: AMapView, interval: Int) {
+        view.setLocationInterval(interval.toLong())
+    }
+
+    @ReactProp(name = "locationStyle")
+    fun setLocationStyle(view: AMapView, style: ReadableMap) {
+        view.setLocationStyle(style)
+    }
+
+    @ReactProp(name = "locationType")
+    fun setLocationStyle(view: AMapView, type: String) {
+        when (type) {
+            "show" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_SHOW)
+            "locate" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_LOCATE)
+            "follow" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_FOLLOW)
+            "map_rotate" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_MAP_ROTATE)
+            "location_rotate" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE)
+            "location_rotate_no_center" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE_NO_CENTER)
+            "follow_no_center" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_FOLLOW_NO_CENTER)
+            "map_rotate_no_center" -> view.setLocationType(MyLocationStyle.LOCATION_TYPE_MAP_ROTATE_NO_CENTER)
+        }
+    }
+}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/AMap3DPackage.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/AMap3DPackage.kt
deleted file mode 100644
index 859520f..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/AMap3DPackage.kt
+++ /dev/null
@@ -1,30 +0,0 @@
-package qiuxiang.amap3d
-
-import com.facebook.react.ReactPackage
-import com.facebook.react.bridge.NativeModule
-import com.facebook.react.bridge.ReactApplicationContext
-import com.facebook.react.uimanager.ViewManager
-import qiuxiang.amap3d.map_view.*
-import qiuxiang.amap3d.modules.OfflineModule
-import qiuxiang.amap3d.modules.SdkModule
-
-class AMap3DPackage : ReactPackage {
-  override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
-    return listOf(
-      SdkModule(),
-      OfflineModule(reactContext),
-    )
-  }
-
-  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
-    return listOf(
-      MapViewManager(),
-      MarkerManager(),
-      PolylineManager(),
-      PolygonManager(),
-      CircleManager(),
-      HeatMapManager(),
-      MultiPointManager()
-    )
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/Utils.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/Utils.kt
deleted file mode 100644
index 52ac003..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/Utils.kt
+++ /dev/null
@@ -1,114 +0,0 @@
-package qiuxiang.amap3d
-
-import android.content.res.Resources
-import android.graphics.Bitmap
-import android.graphics.Point
-import android.location.Location
-import android.view.View
-import com.amap.api.maps.model.*
-import com.facebook.drawee.backends.pipeline.Fresco
-import com.facebook.imagepipeline.common.ResizeOptions
-import com.facebook.imagepipeline.request.BasePostprocessor
-import com.facebook.imagepipeline.request.ImageRequestBuilder
-import com.facebook.react.bridge.Arguments
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.bridge.WritableMap
-import com.facebook.react.views.imagehelper.ImageSource
-
-fun Float.toPx(): Int {
-  return (this * Resources.getSystem().displayMetrics.density).toInt()
-}
-
-fun Int.toPx(): Int {
-  return (this * Resources.getSystem().displayMetrics.density).toInt()
-}
-
-fun ReadableMap.toPoint(): Point {
-  return Point(getDouble("x").toFloat().toPx(), getDouble("y").toFloat().toPx())
-}
-
-fun ReadableMap.toLatLng(): LatLng {
-  return LatLng(getDouble("latitude"), getDouble("longitude"))
-}
-
-fun ReadableArray.toLatLngList(): List<LatLng> {
-  return (0 until size()).map { getMap(it).toLatLng() }
-}
-
-fun LatLng.toJson(): WritableMap {
-  return Arguments.createMap().apply {
-    putDouble("latitude", latitude)
-    putDouble("longitude", longitude)
-  }
-}
-
-fun Poi.toJson(): WritableMap {
-  return Arguments.createMap().apply {
-    putMap("position", coordinate.toJson())
-    putString("id", poiId)
-    putString("name", name)
-  }
-}
-
-fun CameraPosition.toJson(): WritableMap {
-  return Arguments.createMap().apply {
-    putMap("target", target.toJson())
-    putDouble("zoom", zoom.toDouble())
-    putDouble("tilt", tilt.toDouble())
-    putDouble("bearing", bearing.toDouble())
-  }
-}
-
-fun Location.toJson(): WritableMap {
-  return Arguments.createMap().apply {
-    putDouble("timestamp", time.toDouble())
-    putMap("coords", Arguments.createMap().apply {
-      putDouble("latitude", latitude)
-      putDouble("longitude", longitude)
-      putDouble("latitude", latitude)
-      putDouble("accuracy", accuracy.toDouble())
-      putDouble("heading", bearing.toDouble())
-      putDouble("speed", speed.toDouble())
-    })
-  }
-}
-
-fun LatLngBounds.toJson(): WritableMap {
-  return Arguments.createMap().apply {
-    putMap("southwest", southwest.toJson())
-    putMap("northeast", northeast.toJson())
-  }
-}
-
-fun ReadableMap.toLatLngBounds(): LatLngBounds {
-  return LatLngBounds(getMap("southwest")?.toLatLng(), getMap("northeast")?.toLatLng())
-}
-
-fun ReadableMap.getFloat(key: String): Float? {
-  if (hasKey(key)) return getDouble(key).toFloat()
-  return null
-}
-
-fun getEventTypeConstants(vararg list: String): Map<String, Any> {
-  return list.map { it to mapOf("phasedRegistrationNames" to mapOf("bubbled" to it)) }.toMap()
-}
-
-fun View.fetchImage(source: ReadableMap, callback: (BitmapDescriptor) -> Unit) {
-  val uri = ImageSource(context, source.getString("uri")).uri
-  val request = ImageRequestBuilder.newBuilderWithSource(uri).let {
-    it.postprocessor = object : BasePostprocessor() {
-      override fun process(bitmap: Bitmap) {
-        callback(BitmapDescriptorFactory.fromBitmap(bitmap))
-      }
-    }
-    if (source.hasKey("width") && source.hasKey("height")) {
-      it.resizeOptions = ResizeOptions.forDimensions(
-        source.getInt("width").toPx(),
-        source.getInt("height").toPx()
-      )
-    }
-    it.build()
-  }
-  Fresco.getImagePipeline().fetchDecodedImage(request, this)
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Circle.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Circle.kt
deleted file mode 100644
index 4e51ea2..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Circle.kt
+++ /dev/null
@@ -1,65 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.content.Context
-import android.graphics.Color
-import com.amap.api.maps.AMap
-import com.amap.api.maps.model.Circle
-import com.amap.api.maps.model.CircleOptions
-import com.amap.api.maps.model.LatLng
-import com.facebook.react.views.view.ReactViewGroup
-
-class Circle(context: Context) : ReactViewGroup(context), Overlay {
-  private var circle: Circle? = null
-
-  var center: LatLng? = null
-    set(value) {
-      field = value
-      circle?.center = value
-    }
-
-  var radius: Double = 0.0
-    set(value) {
-      field = value
-      circle?.radius = value
-    }
-
-  var strokeWidth: Float = 1f
-    set(value) {
-      field = value
-      circle?.strokeWidth = value
-    }
-
-  var strokeColor: Int = Color.BLACK
-    set(value) {
-      field = value
-      circle?.strokeColor = value
-    }
-
-  var fillColor: Int = Color.BLACK
-    set(value) {
-      field = value
-      circle?.fillColor = value
-    }
-
-  var zIndex: Float = 0f
-    set(value) {
-      field = value
-      circle?.zIndex = value
-    }
-
-  override fun add(map: AMap) {
-    circle = map.addCircle(
-      CircleOptions()
-        .center(center)
-        .radius(radius)
-        .strokeColor(strokeColor)
-        .strokeWidth(strokeWidth)
-        .fillColor(fillColor)
-        .zIndex(zIndex)
-    )
-  }
-
-  override fun remove() {
-    circle?.remove()
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/CircleManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/CircleManager.kt
deleted file mode 100644
index dbbc340..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/CircleManager.kt
+++ /dev/null
@@ -1,49 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.uimanager.SimpleViewManager
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.toLatLng
-import qiuxiang.amap3d.toPx
-
-@Suppress("unused")
-internal class CircleManager : SimpleViewManager<Circle>() {
-  override fun getName(): String {
-    return "AMapCircle"
-  }
-
-  override fun createViewInstance(reactContext: ThemedReactContext): Circle {
-    return Circle(reactContext)
-  }
-
-  @ReactProp(name = "center")
-  fun setCenter(circle: Circle, center: ReadableMap) {
-    circle.center = center.toLatLng()
-  }
-
-  @ReactProp(name = "radius")
-  fun setRadius(circle: Circle, radius: Double) {
-    circle.radius = radius
-  }
-
-  @ReactProp(name = "fillColor", customType = "Color")
-  fun setFillColor(circle: Circle, fillColor: Int) {
-    circle.fillColor = fillColor
-  }
-
-  @ReactProp(name = "strokeColor", customType = "Color")
-  fun setStrokeColor(circle: Circle, strokeColor: Int) {
-    circle.strokeColor = strokeColor
-  }
-
-  @ReactProp(name = "strokeWidth")
-  fun setStrokeWidth(circle: Circle, strokeWidth: Float) {
-    circle.strokeWidth = strokeWidth.toPx().toFloat()
-  }
-
-  @ReactProp(name = "zIndex")
-  fun setIndex(circle: Circle, zIndex: Float) {
-    circle.zIndex = zIndex
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/HeatMap.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/HeatMap.kt
deleted file mode 100644
index 2285562..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/HeatMap.kt
+++ /dev/null
@@ -1,32 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.content.Context
-import com.amap.api.maps.AMap
-import com.amap.api.maps.model.HeatmapTileProvider
-import com.amap.api.maps.model.LatLng
-import com.amap.api.maps.model.TileOverlay
-import com.amap.api.maps.model.TileOverlayOptions
-import com.facebook.react.views.view.ReactViewGroup
-
-class HeatMap(context: Context) : ReactViewGroup(context), Overlay {
-  private var overlay: TileOverlay? = null
-  var data: List<LatLng> = emptyList()
-  var opacity: Double = 0.6
-  var radius: Int = 12
-
-  override fun add(map: AMap) {
-    overlay = map.addTileOverlay(
-      TileOverlayOptions().tileProvider(
-        HeatmapTileProvider.Builder()
-          .data(data)
-          .radius(radius)
-          .transparency(opacity)
-          .build()
-      )
-    )
-  }
-
-  override fun remove() {
-    overlay?.remove()
-  }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/HeatMapManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/HeatMapManager.kt
deleted file mode 100644
index 679b08d..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/HeatMapManager.kt
+++ /dev/null
@@ -1,33 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.uimanager.SimpleViewManager
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.toLatLngList
-
-@Suppress("unused")
-internal class HeatMapManager : SimpleViewManager<HeatMap>() {
-  override fun getName(): String {
-    return "AMapHeatMap"
-  }
-
-  override fun createViewInstance(reactContext: ThemedReactContext): HeatMap {
-    return HeatMap(reactContext)
-  }
-
-  @ReactProp(name = "data")
-  fun setData(heatMap: HeatMap, data: ReadableArray) {
-    heatMap.data = data.toLatLngList()
-  }
-
-  @ReactProp(name = "radius")
-  fun setRadius(heatMap: HeatMap, radius: Int) {
-    heatMap.radius = radius
-  }
-
-  @ReactProp(name = "opacity")
-  fun setOpacity(heatMap: HeatMap, opacity: Double) {
-    heatMap.opacity = opacity
-  }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MapView.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MapView.kt
deleted file mode 100644
index 7d15c01..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MapView.kt
+++ /dev/null
@@ -1,170 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.annotation.SuppressLint
-import android.view.View
-import com.amap.api.maps.AMap
-import com.amap.api.maps.CameraUpdateFactory
-import com.amap.api.maps.TextureMapView
-import com.amap.api.maps.model.CameraPosition
-import com.amap.api.maps.model.Marker
-import com.amap.api.maps.model.MyLocationStyle
-import com.facebook.react.bridge.Arguments
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.bridge.WritableMap
-import com.facebook.react.uimanager.ThemedReactContext
-import qiuxiang.amap3d.getFloat
-import qiuxiang.amap3d.toJson
-import qiuxiang.amap3d.toLatLng
-import qiuxiang.amap3d.toPoint
-
-@SuppressLint("ViewConstructor")
-class MapView(context: ThemedReactContext) : TextureMapView(context) {
-  @Suppress("Deprecation")
-  private val eventEmitter =
-    context.getJSModule(com.facebook.react.uimanager.events.RCTEventEmitter::class.java)
-  private val markerMap = HashMap<String, qiuxiang.amap3d.map_view.Marker>()
-  private val polylineMap = HashMap<String, Polyline>()
-  private var initialCameraPosition: ReadableMap? = null
-  private var locationStyle: MyLocationStyle
-
-  init {
-    super.onCreate(null)
-
-    locationStyle = MyLocationStyle()
-    locationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE_NO_CENTER)
-    map.myLocationStyle = locationStyle
-
-    map.setOnMapLoadedListener { emit(id, "onLoad") }
-    map.setOnMapClickListener { latLng -> emit(id, "onPress", latLng.toJson()) }
-    map.setOnPOIClickListener { poi -> emit(id, "onPressPoi", poi.toJson()) }
-    map.setOnMapLongClickListener { latLng -> emit(id, "onLongPress", latLng.toJson()) }
-    map.setOnPolylineClickListener { polyline -> emit(polylineMap[polyline.id]?.id, "onPress") }
-
-    map.setOnMarkerClickListener { marker ->
-      markerMap[marker.id]?.let { emit(it.id, "onPress") }
-      true
-    }
-
-    map.setOnMarkerDragListener(object : AMap.OnMarkerDragListener {
-      override fun onMarkerDragStart(marker: Marker) {
-        emit(markerMap[marker.id]?.id, "onDragStart")
-      }
-
-      override fun onMarkerDrag(marker: Marker) {
-        emit(markerMap[marker.id]?.id, "onDrag")
-      }
-
-      override fun onMarkerDragEnd(marker: Marker) {
-        emit(markerMap[marker.id]?.id, "onDragEnd", marker.position.toJson())
-      }
-    })
-
-    map.setOnCameraChangeListener(object : AMap.OnCameraChangeListener {
-      override fun onCameraChangeFinish(position: CameraPosition) {
-        emit(id, "onCameraIdle", Arguments.createMap().apply {
-          putMap("cameraPosition", position.toJson())
-          putMap("latLngBounds", map.projection.visibleRegion.latLngBounds.toJson())
-        })
-      }
-
-      override fun onCameraChange(position: CameraPosition) {
-        emit(id, "onCameraMove", Arguments.createMap().apply {
-          putMap("cameraPosition", position.toJson())
-          putMap("latLngBounds", map.projection.visibleRegion.latLngBounds.toJson())
-        })
-      }
-    })
-
-    map.setOnMultiPointClickListener { item ->
-      item.customerId.split("_").let {
-        emit(
-          it[0].toInt(),
-          "onPress",
-          Arguments.createMap().apply { putInt("index", it[1].toInt()) },
-        )
-      }
-      false
-    }
-
-    map.setOnMyLocationChangeListener {
-      emit(id, "onLocation", it.toJson())
-    }
-  }
-
-  fun emit(id: Int?, event: String, data: WritableMap = Arguments.createMap()) {
-    @Suppress("Deprecation")
-    id?.let { eventEmitter.receiveEvent(it, event, data) }
-  }
-
-  fun add(child: View) {
-    if (child is Overlay) {
-      child.add(map)
-      if (child is qiuxiang.amap3d.map_view.Marker) {
-        markerMap[child.marker?.id!!] = child
-      }
-      if (child is Polyline) {
-        polylineMap[child.polyline?.id!!] = child
-      }
-    }
-  }
-
-  fun remove(child: View) {
-    if (child is Overlay) {
-      child.remove()
-      if (child is qiuxiang.amap3d.map_view.Marker) {
-        markerMap.remove(child.marker?.id)
-      }
-      if (child is Polyline) {
-        polylineMap.remove(child.polyline?.id)
-      }
-    }
-  }
-
-  private val animateCallback = object : AMap.CancelableCallback {
-    override fun onCancel() {}
-    override fun onFinish() {}
-  }
-
-  fun moveCamera(args: ReadableArray?) {
-    val current = map.cameraPosition
-    val position = args?.getMap(0)!!
-    val target = position.getMap("target")?.toLatLng() ?: current.target
-    val zoom = position.getFloat("zoom") ?: current.zoom
-    val tilt = position.getFloat("tilt") ?: current.tilt
-    val bearing = position.getFloat("bearing") ?: current.bearing
-    val cameraUpdate = CameraUpdateFactory.newCameraPosition(
-      CameraPosition(target, zoom, tilt, bearing)
-    )
-    map.animateCamera(cameraUpdate, args.getInt(1).toLong(), animateCallback)
-  }
-
-  fun setInitialCameraPosition(position: ReadableMap) {
-    if (initialCameraPosition == null) {
-      initialCameraPosition = position
-      moveCamera(Arguments.createArray().apply {
-        pushMap(Arguments.createMap().apply { merge(position) })
-        pushInt(0)
-      })
-    }
-  }
-
-  fun call(args: ReadableArray?) {
-    val id = args?.getDouble(0)!!
-    when (args.getString(1)) {
-      "getLatLng" -> callback(
-        id,
-        map.projection.fromScreenLocation(args.getMap(2).toPoint()).toJson()
-      )
-    }
-  }
-
-  private fun callback(id: Double, data: Any) {
-    emit(this.id, "onCallback", Arguments.createMap().apply {
-      putDouble("id", id)
-      when (data) {
-        is WritableMap -> putMap("data", data)
-      }
-    })
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MapViewManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MapViewManager.kt
deleted file mode 100644
index 3e8ce69..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MapViewManager.kt
+++ /dev/null
@@ -1,153 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.view.View
-import com.amap.api.maps.CameraUpdateFactory
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.ViewGroupManager
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.getEventTypeConstants
-import qiuxiang.amap3d.toLatLng
-
-@Suppress("unused")
-internal class MapViewManager : ViewGroupManager<MapView>() {
-  private val commands = mapOf(
-    "moveCamera" to { view: MapView, args: ReadableArray? -> view.moveCamera(args) },
-    "call" to { view: MapView, args: ReadableArray? -> view.call(args) },
-  )
-
-  override fun getName(): String {
-    return "AMapView"
-  }
-
-  override fun createViewInstance(reactContext: ThemedReactContext): MapView {
-    return MapView(reactContext)
-  }
-
-  override fun onDropViewInstance(view: MapView) {
-    super.onDropViewInstance(view)
-    view.onDestroy()
-  }
-
-  override fun getCommandsMap(): Map<String, Int> {
-    return commands.keys.mapIndexed { index, key -> key to index }.toMap()
-  }
-
-  override fun receiveCommand(view: MapView, command: Int, args: ReadableArray?) {
-    commands.values.toList()[command](view, args)
-  }
-
-  override fun addView(mapView: MapView, child: View, index: Int) {
-    mapView.add(child)
-    super.addView(mapView, child, index)
-  }
-
-  override fun removeViewAt(parent: MapView, index: Int) {
-    parent.remove(parent.getChildAt(index))
-    super.removeViewAt(parent, index)
-  }
-
-  override fun getExportedCustomBubblingEventTypeConstants(): Map<String, Any> {
-    return getEventTypeConstants(
-      "onLoad",
-      "onPress",
-      "onPressPoi",
-      "onLongPress",
-      "onCameraMove",
-      "onCameraIdle",
-      "onLocation",
-      "onCallback",
-    )
-  }
-
-  @ReactProp(name = "initialCameraPosition")
-  fun setInitialCameraPosition(view: MapView, position: ReadableMap) {
-    view.setInitialCameraPosition(position)
-  }
-
-  @ReactProp(name = "myLocationEnabled")
-  fun setMyLocationEnabled(view: MapView, enabled: Boolean) {
-    view.map.isMyLocationEnabled = enabled
-  }
-
-  @ReactProp(name = "indoorViewEnabled")
-  fun setIndoorViewEnabled(view: MapView, enabled: Boolean) {
-    view.map.showIndoorMap(enabled)
-  }
-
-  @ReactProp(name = "buildingsEnabled")
-  fun setBuildingsEnabled(view: MapView, enabled: Boolean) {
-    view.map.showBuildings(enabled)
-  }
-
-  @ReactProp(name = "compassEnabled")
-  fun setCompassEnabled(view: MapView, show: Boolean) {
-    view.map.uiSettings.isCompassEnabled = show
-  }
-
-  @ReactProp(name = "zoomControlsEnabled")
-  fun setZoomControlsEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isZoomControlsEnabled = enabled
-  }
-
-  @ReactProp(name = "scaleControlsEnabled")
-  fun setScaleControlsEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isScaleControlsEnabled = enabled
-  }
-
-  @ReactProp(name = "language")
-  fun setLanguage(view: MapView, language: String) {
-    view.map.setMapLanguage(language)
-  }
-
-  @ReactProp(name = "myLocationButtonEnabled")
-  fun setMyLocationButtonEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isMyLocationButtonEnabled = enabled
-  }
-
-  @ReactProp(name = "trafficEnabled")
-  fun setTrafficEnabled(view: MapView, enabled: Boolean) {
-    view.map.isTrafficEnabled = enabled
-  }
-
-  @ReactProp(name = "maxZoom")
-  fun setMaxZoom(view: MapView, zoomLevel: Float) {
-    view.map.maxZoomLevel = zoomLevel
-  }
-
-  @ReactProp(name = "minZoom")
-  fun setMinZoom(view: MapView, zoomLevel: Float) {
-    view.map.minZoomLevel = zoomLevel
-  }
-
-  @ReactProp(name = "mapType")
-  fun setMapType(view: MapView, mapType: Int) {
-    view.map.mapType = mapType + 1
-  }
-
-  @ReactProp(name = "zoomGesturesEnabled")
-  fun setZoomGesturesEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isZoomGesturesEnabled = enabled
-  }
-
-  @ReactProp(name = "scrollGesturesEnabled")
-  fun setScrollGesturesEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isScrollGesturesEnabled = enabled
-  }
-
-  @ReactProp(name = "rotateGesturesEnabled")
-  fun setRotateGesturesEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isRotateGesturesEnabled = enabled
-  }
-
-  @ReactProp(name = "tiltGesturesEnabled")
-  fun setTiltGesturesEnabled(view: MapView, enabled: Boolean) {
-    view.map.uiSettings.isTiltGesturesEnabled = enabled
-  }
-
-  @ReactProp(name = "cameraPosition")
-  fun setCameraPosition(view: MapView, center: ReadableMap) {
-    view.map.moveCamera(CameraUpdateFactory.changeLatLng(center.toLatLng()))
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Marker.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Marker.kt
deleted file mode 100644
index 59d8eac..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Marker.kt
+++ /dev/null
@@ -1,98 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.content.Context
-import android.graphics.Bitmap
-import android.graphics.Canvas
-import android.view.View
-import com.amap.api.maps.AMap
-import com.amap.api.maps.model.*
-import com.amap.api.maps.model.Marker
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.views.view.ReactViewGroup
-import qiuxiang.amap3d.fetchImage
-
-class Marker(context: Context) : ReactViewGroup(context), Overlay {
-  private var view: View? = null
-  private var icon: BitmapDescriptor? = null
-  private var anchorX: Float = 0.5f
-  private var anchorY: Float = 1f
-  var marker: Marker? = null
-
-  var position: LatLng? = null
-    set(value) {
-      field = value
-      marker?.position = value
-    }
-
-  var zIndex: Float = 0.0f
-    set(value) {
-      field = value
-      marker?.zIndex = value
-    }
-
-  var flat: Boolean = false
-    set(value) {
-      field = value
-      marker?.isFlat = value
-    }
-
-  var opacity: Float = 1f
-    set(value) {
-      field = value
-      marker?.alpha = value
-    }
-
-  var draggable: Boolean = false
-    set(value) {
-      field = value
-      marker?.isDraggable = value
-    }
-
-  fun updateIcon() {
-    view?.let {
-      if (it.width != 0 && it.height != 0) {
-        val bitmap = Bitmap.createBitmap(it.width, it.height, Bitmap.Config.ARGB_8888)
-        it.draw(Canvas(bitmap))
-        icon = BitmapDescriptorFactory.fromBitmap(bitmap)
-        marker?.setIcon(icon)
-      }
-    }
-  }
-
-  fun setAnchor(x: Double, y: Double) {
-    anchorX = x.toFloat()
-    anchorY = y.toFloat()
-    marker?.setAnchor(anchorX, anchorY)
-  }
-
-  override fun addView(child: View, index: Int) {
-    super.addView(child, index)
-    view = child
-    view?.addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ -> updateIcon() }
-  }
-
-  fun setIcon(source: ReadableMap) {
-    fetchImage(source) {
-      icon = it
-      marker?.setIcon(it)
-    }
-  }
-
-  override fun add(map: AMap) {
-    marker = map.addMarker(
-      MarkerOptions()
-        .setFlat(flat)
-        .icon(icon)
-        .alpha(opacity)
-        .draggable(draggable)
-        .position(position)
-        .anchor(anchorX, anchorY)
-        .zIndex(zIndex)
-        .infoWindowEnable(false)
-    )
-  }
-
-  override fun remove() {
-    marker?.destroy()
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MarkerManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MarkerManager.kt
deleted file mode 100644
index 7da181b..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MarkerManager.kt
+++ /dev/null
@@ -1,78 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.view.View
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.ViewGroupManager
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.getEventTypeConstants
-import qiuxiang.amap3d.toLatLng
-
-@Suppress("unused")
-internal class MarkerManager : ViewGroupManager<Marker>() {
-  override fun getName(): String {
-    return "AMapMarker"
-  }
-
-  override fun createViewInstance(reactContext: ThemedReactContext): Marker {
-    return Marker(reactContext)
-  }
-
-  override fun addView(marker: Marker, view: View, index: Int) {
-    super.addView(marker, view, index)
-  }
-
-  override fun getExportedCustomBubblingEventTypeConstants(): Map<String, Any> {
-    return getEventTypeConstants("onPress", "onDrag", "onDragStart", "onDragEnd")
-  }
-
-  companion object {
-    const val update = 1
-  }
-
-  override fun getCommandsMap(): Map<String, Int> {
-    return mapOf("update" to update)
-  }
-
-  override fun receiveCommand(marker: Marker, commandId: Int, args: ReadableArray?) {
-    when (commandId) {
-      update -> marker.updateIcon()
-    }
-  }
-
-  @ReactProp(name = "latLng")
-  fun setLatLng(view: Marker, position: ReadableMap) {
-    view.position = position.toLatLng()
-  }
-
-  @ReactProp(name = "flat")
-  fun setFlat(marker: Marker, flat: Boolean) {
-    marker.flat = flat
-  }
-
-  @ReactProp(name = "opacity")
-  override fun setOpacity(marker: Marker, opacity: Float) {
-    marker.opacity = opacity
-  }
-
-  @ReactProp(name = "draggable")
-  fun setDraggable(marker: Marker, draggable: Boolean) {
-    marker.draggable = draggable
-  }
-
-  @ReactProp(name = "zIndex")
-  fun setIndex(marker: Marker, zIndex: Float) {
-    marker.zIndex = zIndex
-  }
-
-  @ReactProp(name = "anchor")
-  fun setAnchor(view: Marker, anchor: ReadableMap) {
-    view.setAnchor(anchor.getDouble("x"), anchor.getDouble("y"))
-  }
-
-  @ReactProp(name = "icon")
-  fun setIcon(view: Marker, icon: ReadableMap?) {
-    icon?.let { view.setIcon(it) }
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MultiPoint.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MultiPoint.kt
deleted file mode 100644
index 3badaea..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MultiPoint.kt
+++ /dev/null
@@ -1,52 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.content.Context
-import com.amap.api.maps.AMap
-import com.amap.api.maps.model.BitmapDescriptor
-import com.amap.api.maps.model.MultiPointItem
-import com.amap.api.maps.model.MultiPointOverlay
-import com.amap.api.maps.model.MultiPointOverlayOptions
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.views.view.ReactViewGroup
-import qiuxiang.amap3d.fetchImage
-import qiuxiang.amap3d.toLatLng
-
-class MultiPoint(context: Context) : ReactViewGroup(context), Overlay {
-  private lateinit var map: AMap
-  private var overlay: MultiPointOverlay? = null
-  private var items: List<MultiPointItem> = emptyList()
-  private var icon: BitmapDescriptor? = null
-
-  override fun add(map: AMap) {
-    this.map = map
-    addToMap()
-  }
-
-  override fun remove() {
-    overlay?.destroy()
-  }
-
-  private fun addToMap() {
-    if (overlay != null) return
-    if (icon != null) {
-      overlay = map.addMultiPointOverlay(MultiPointOverlayOptions().icon(icon))
-      overlay?.items = items
-    }
-  }
-
-  fun setItems(points: ReadableArray) {
-    items = (0 until points.size())
-      .map { item ->
-        MultiPointItem(points.getMap(item).toLatLng()).apply { customerId = "${id}_$item" }
-      }
-    overlay?.items = items
-  }
-
-  fun setIcon(source: ReadableMap) {
-    fetchImage(source) {
-      icon = it
-      addToMap()
-    }
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MultiPointManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MultiPointManager.kt
deleted file mode 100644
index 5991c9e..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/MultiPointManager.kt
+++ /dev/null
@@ -1,33 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.bridge.ReadableMap
-import com.facebook.react.uimanager.SimpleViewManager
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.getEventTypeConstants
-
-@Suppress("unused")
-internal class MultiPointManager : SimpleViewManager<MultiPoint>() {
-  override fun getName(): String {
-    return "AMapMultiPoint"
-  }
-
-  override fun createViewInstance(reactContext: ThemedReactContext): MultiPoint {
-    return MultiPoint(reactContext)
-  }
-
-  override fun getExportedCustomBubblingEventTypeConstants(): Map<String, Any> {
-    return getEventTypeConstants("onPress")
-  }
-
-  @ReactProp(name = "items")
-  fun setPoints(multiPoint: MultiPoint, items: ReadableArray) {
-    multiPoint.setItems(items)
-  }
-
-  @ReactProp(name = "icon")
-  fun setIcon(multiPoint: MultiPoint, icon: ReadableMap?) {
-    icon?.let { multiPoint.setIcon(it) }
-  }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Overlay.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Overlay.kt
deleted file mode 100644
index c01c8a1..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Overlay.kt
+++ /dev/null
@@ -1,8 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import com.amap.api.maps.AMap
-
-interface Overlay {
-  fun add(map: AMap)
-  fun remove()
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Polygon.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Polygon.kt
deleted file mode 100644
index c4e7607..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Polygon.kt
+++ /dev/null
@@ -1,58 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.content.Context
-import android.graphics.Color
-import com.amap.api.maps.AMap
-import com.amap.api.maps.model.LatLng
-import com.amap.api.maps.model.Polygon
-import com.amap.api.maps.model.PolygonOptions
-import com.facebook.react.views.view.ReactViewGroup
-
-class Polygon(context: Context) : ReactViewGroup(context), Overlay {
-  private var polygon: Polygon? = null
-
-  var points: List<LatLng> = emptyList()
-    set(value) {
-      field = value
-      polygon?.points = value
-    }
-
-  var strokeWidth: Float = 1f
-    set(value) {
-      field = value
-      polygon?.strokeWidth = value
-    }
-
-  var strokeColor: Int = Color.BLACK
-    set(value) {
-      field = value
-      polygon?.strokeColor = value
-    }
-
-  var fillColor: Int = Color.BLACK
-    set(value) {
-      field = value
-      polygon?.fillColor = value
-    }
-
-  var zIndex: Float = 0f
-    set(value) {
-      field = value
-      polygon?.zIndex = value
-    }
-
-  override fun add(map: AMap) {
-    polygon = map.addPolygon(
-      PolygonOptions()
-        .addAll(points)
-        .strokeColor(strokeColor)
-        .strokeWidth(strokeWidth)
-        .fillColor(fillColor)
-        .zIndex(zIndex)
-    )
-  }
-
-  override fun remove() {
-    polygon?.remove()
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/PolygonManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/PolygonManager.kt
deleted file mode 100644
index aa29043..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/PolygonManager.kt
+++ /dev/null
@@ -1,44 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.uimanager.SimpleViewManager
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.toLatLngList
-import qiuxiang.amap3d.toPx
-
-@Suppress("unused")
-internal class PolygonManager : SimpleViewManager<Polygon>() {
-  override fun getName(): String {
-    return "AMapPolygon"
-  }
-
-  override fun createViewInstance(reactContext: ThemedReactContext): Polygon {
-    return Polygon(reactContext)
-  }
-
-  @ReactProp(name = "points")
-  fun setPoints(polygon: Polygon, points: ReadableArray) {
-    polygon.points = points.toLatLngList()
-  }
-
-  @ReactProp(name = "fillColor", customType = "Color")
-  fun setFillColor(polygon: Polygon, fillColor: Int) {
-    polygon.fillColor = fillColor
-  }
-
-  @ReactProp(name = "strokeColor", customType = "Color")
-  fun setStrokeColor(polygon: Polygon, strokeColor: Int) {
-    polygon.strokeColor = strokeColor
-  }
-
-  @ReactProp(name = "strokeWidth")
-  fun setStrokeWidth(polygon: Polygon, strokeWidth: Float) {
-    polygon.strokeWidth = strokeWidth.toPx().toFloat()
-  }
-
-  @ReactProp(name = "zIndex")
-  fun setIndex(polygon: Polygon, zIndex: Float) {
-    polygon.zIndex = zIndex
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Polyline.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Polyline.kt
deleted file mode 100644
index 2939860..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/Polyline.kt
+++ /dev/null
@@ -1,69 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import android.content.Context
-import android.graphics.Color
-import com.amap.api.maps.AMap
-import com.amap.api.maps.model.LatLng
-import com.amap.api.maps.model.Polyline
-import com.amap.api.maps.model.PolylineOptions
-import com.facebook.react.views.view.ReactViewGroup
-
-class Polyline(context: Context) : ReactViewGroup(context), Overlay {
-  var polyline: Polyline? = null
-  var gradient: Boolean = false
-  var colors: List<Int> = emptyList()
-
-  var points: List<LatLng> = emptyList()
-    set(value) {
-      field = value
-      polyline?.points = value
-    }
-
-  var width: Float = 1f
-    set(value) {
-      field = value
-      polyline?.width = value
-    }
-
-  var color: Int = Color.BLACK
-    set(value) {
-      field = value
-      polyline?.color = value
-    }
-
-  var zIndex: Float = 0f
-    set(value) {
-      field = value
-      polyline?.zIndex = value
-    }
-
-  var geodesic: Boolean = false
-    set(value) {
-      field = value
-      polyline?.isGeodesic = value
-    }
-
-  var dashed: Boolean = false
-    set(value) {
-      field = value
-      polyline?.isDottedLine = value
-    }
-
-  override fun add(map: AMap) {
-    polyline = map.addPolyline(
-      PolylineOptions()
-        .addAll(points)
-        .color(color)
-        .colorValues(colors)
-        .width(width)
-        .useGradient(gradient)
-        .geodesic(geodesic)
-        .setDottedLine(dashed)
-        .zIndex(zIndex)
-    )
-  }
-
-  override fun remove() {
-    polyline?.remove()
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/PolylineManager.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/PolylineManager.kt
deleted file mode 100644
index a9f8838..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/map_view/PolylineManager.kt
+++ /dev/null
@@ -1,64 +0,0 @@
-package qiuxiang.amap3d.map_view
-
-import com.facebook.react.bridge.ReadableArray
-import com.facebook.react.uimanager.SimpleViewManager
-import com.facebook.react.uimanager.ThemedReactContext
-import com.facebook.react.uimanager.annotations.ReactProp
-import qiuxiang.amap3d.getEventTypeConstants
-import qiuxiang.amap3d.toLatLngList
-import qiuxiang.amap3d.toPx
-
-@Suppress("unused")
-internal class PolylineManager : SimpleViewManager<Polyline>() {
-  override fun getName(): String {
-    return "AMapPolyline"
-  }
-
-  override fun createViewInstance(context: ThemedReactContext): Polyline {
-    return Polyline(context)
-  }
-
-  override fun getExportedCustomBubblingEventTypeConstants(): Map<String, Any> {
-    return getEventTypeConstants("onPress")
-  }
-
-  @ReactProp(name = "points")
-  fun setPoints(polyline: Polyline, points: ReadableArray) {
-    polyline.points = points.toLatLngList()
-  }
-
-  @ReactProp(name = "colors")
-  fun setColors(polyline: Polyline, colors: ReadableArray) {
-    polyline.colors = (0 until colors.size()).map { colors.getInt(it) }
-  }
-
-  @ReactProp(name = "color", customType = "Color")
-  fun setColor(polyline: Polyline, color: Int) {
-    polyline.color = color
-  }
-
-  @ReactProp(name = "width")
-  fun setWidth(polyline: Polyline, width: Float) {
-    polyline.width = width.toPx().toFloat()
-  }
-
-  @ReactProp(name = "zIndex")
-  fun setIndex(polyline: Polyline, zIndex: Float) {
-    polyline.zIndex = zIndex
-  }
-
-  @ReactProp(name = "geodesic")
-  fun setGeodesic(polyline: Polyline, geodesic: Boolean) {
-    polyline.geodesic = geodesic
-  }
-
-  @ReactProp(name = "dashed")
-  fun setDashed(polyline: Polyline, dashed: Boolean) {
-    polyline.dashed = dashed
-  }
-
-  @ReactProp(name = "gradient")
-  fun setGradient(polyline: Polyline, gradient: Boolean) {
-    polyline.gradient = gradient
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/modules/OfflineModule.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/modules/OfflineModule.kt
deleted file mode 100644
index 73dccfe..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/modules/OfflineModule.kt
+++ /dev/null
@@ -1,107 +0,0 @@
-package qiuxiang.amap3d.modules
-
-import com.amap.api.maps.offlinemap.OfflineMapCity
-import com.amap.api.maps.offlinemap.OfflineMapManager
-import com.amap.api.maps.offlinemap.OfflineMapProvince
-import com.amap.api.maps.offlinemap.OfflineMapStatus
-import com.facebook.react.bridge.*
-import com.facebook.react.modules.core.DeviceEventManagerModule
-
-@Suppress("unused")
-class OfflineModule(private val reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext), OfflineMapManager.OfflineMapDownloadListener {
-  private val manager = OfflineMapManager(reactContext, this)
-
-  override fun getName(): String {
-    return "AMapOffline"
-  }
-
-  @ReactMethod
-  fun getProvinces(promise: Promise) {
-    val provinces = Arguments.createArray()
-    manager.offlineMapProvinceList.forEach { provinces.pushMap(buildProvince(it)) }
-    promise.resolve(provinces)
-  }
-
-  @ReactMethod
-  fun getCities(promise: Promise) {
-    val cities = Arguments.createArray()
-    manager.offlineMapCityList.forEach { cities.pushMap(buildCity(it)) }
-    promise.resolve(cities)
-  }
-
-  @ReactMethod
-  fun download(name: String) {
-    manager.offlineMapProvinceList.forEach { province ->
-      if (province.provinceName == name) {
-        return manager.downloadByProvinceName(name)
-      }
-      province.cityList.forEach {
-        if (it.city == name) {
-          return manager.downloadByCityName(name)
-        }
-      }
-    }
-  }
-
-  @ReactMethod
-  fun stop() {
-    manager.stop()
-  }
-
-  @ReactMethod
-  fun remove(name: String) {
-    manager.remove(name)
-  }
-
-  private fun buildCity(city: OfflineMapCity): WritableMap {
-    val map = Arguments.createMap()
-    map.putString("name", city.city)
-    map.putString("code", city.code)
-    map.putString("state", getState(city.state))
-    map.putInt("size", city.size.toInt())
-    return map
-  }
-
-  private fun buildProvince(province: OfflineMapProvince): WritableMap {
-    val map = Arguments.createMap()
-    map.putString("name", province.provinceName)
-    map.putString("state", getState(province.state))
-    map.putInt("size", province.size.toInt())
-
-    val cities = Arguments.createArray()
-    province.cityList.forEach { cities.pushMap(buildCity(it)) }
-    map.putArray("cities", cities)
-
-    return map
-  }
-
-  private fun getState(code: Int): String {
-    var state = ""
-    when (code) {
-      OfflineMapStatus.SUCCESS -> state = "downloaded"
-      OfflineMapStatus.LOADING -> state = "downloading"
-      OfflineMapStatus.NEW_VERSION -> state = "expired"
-      OfflineMapStatus.WAITING -> state = "waiting"
-      OfflineMapStatus.UNZIP -> state = "unzip"
-    }
-    return state
-  }
-
-  override fun onDownload(state: Int, progress: Int, name: String?) {
-    val data = Arguments.createMap()
-    data.putString("name", name)
-    data.putString("state", getState(state))
-    data.putInt("progress", progress)
-    reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java).emit("download", data)
-  }
-
-  override fun onCheckUpdate(p0: Boolean, p1: String?) {}
-
-  override fun onRemove(p0: Boolean, p1: String?, p2: String?) {}
-
-  @ReactMethod
-  fun addListener() {}
-
-  @ReactMethod
-  fun removeListeners() {}
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/modules/SdkModule.kt b/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/modules/SdkModule.kt
deleted file mode 100644
index c6b9faf..0000000
--- a/node_modules/react-native-amap3d/lib/android/src/main/java/qiuxiang/amap3d/modules/SdkModule.kt
+++ /dev/null
@@ -1,23 +0,0 @@
-package qiuxiang.amap3d.modules
-
-import com.amap.api.maps.MapsInitializer
-import com.facebook.react.bridge.Promise
-import com.facebook.react.bridge.ReactContextBaseJavaModule
-import com.facebook.react.bridge.ReactMethod
-
-@Suppress("unused")
-class SdkModule : ReactContextBaseJavaModule() {
-  override fun getName(): String {
-    return "AMapSdk"
-  }
-
-  @ReactMethod
-  fun setApiKey(apiKey: String?) {
-    apiKey?.let { MapsInitializer.setApiKey(it) }
-  }
-
-  @ReactMethod
-  fun getVersion(promise: Promise) {
-    promise.resolve(MapsInitializer.getVersion())
-  }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/ios/.swiftformat b/node_modules/react-native-amap3d/lib/ios/.swiftformat
deleted file mode 100644
index f3d6b7f..0000000
--- a/node_modules/react-native-amap3d/lib/ios/.swiftformat
+++ /dev/null
@@ -1,2 +0,0 @@
---swiftversion 5.2
---indent 2
diff --git a/node_modules/react-native-amap3d/lib/ios/AMapOffline.m b/node_modules/react-native-amap3d/lib/ios/AMapOffline.m
new file mode 100644
index 0000000..26e75be
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/AMapOffline.m
@@ -0,0 +1,133 @@
+#import <React/RCTBridgeModule.h>
+#import <React/RCTEventEmitter.h>
+#import <MAMapKit/MAOfflineMap.h>
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapOffline : RCTEventEmitter <RCTBridgeModule>
+@end
+
+@implementation AMapOffline
+
+RCT_EXPORT_MODULE()
+
+RCT_REMAP_METHOD(getProvinces,
+            resolveProvinces: (RCTPromiseResolveBlock) resolve
+            reject: (RCTPromiseRejectBlock) reject) {
+    NSMutableArray *provinces = [NSMutableArray new];
+    for (id item in MAOfflineMap.sharedOfflineMap.provinces) {
+        MAOfflineProvince *province = (MAOfflineProvince *) item;
+
+        NSMutableArray *cities = [NSMutableArray new];
+        for (id city in province.cities) {
+            [cities addObject:[self itemData:(MAOfflineCity *) city]];
+        }
+
+        [provinces addObject:@{
+                @"name": province.name,
+                @"size": @(province.size),
+                @"state": [self stateString:province.itemStatus],
+                @"cities": cities,
+        }];
+    }
+    for (id item in MAOfflineMap.sharedOfflineMap.municipalities) {
+        [provinces addObject:[self itemData:item]];
+    }
+    resolve(provinces);
+}
+
+RCT_REMAP_METHOD(getCities,
+            resolveCities: (RCTPromiseResolveBlock) resolve
+            reject: (RCTPromiseRejectBlock) reject) {
+    NSMutableArray *cities = [NSMutableArray new];
+    for (id city in MAOfflineMap.sharedOfflineMap.cities) {
+        [cities addObject:[self itemData:(MAOfflineCity *) city]];
+    }
+    resolve(cities);
+}
+
+RCT_EXPORT_METHOD(download:(NSString *)name) {
+    MAOfflineItem *item = [self getItem:name];
+    void (^downloadBlock)(MAOfflineItem *, MAOfflineMapDownloadStatus, id)=^(MAOfflineItem *downloadItem, MAOfflineMapDownloadStatus state, id info) {
+        NSDictionary *data = (NSDictionary *) info;
+        double progress = 0;
+        if (state == MAOfflineMapDownloadStatusProgress) {
+            progress = [data[MAOfflineMapDownloadReceivedSizeKey] doubleValue] / [data[MAOfflineMapDownloadExpectedSizeKey] doubleValue] * 100;
+        }
+        [self sendEventWithName:@"download" body:@{
+                @"name": name,
+                @"state": [self downloadStateString:state],
+                @"progress": @(progress),
+        }];
+    };
+    if (item != nil) {
+        [MAOfflineMap.sharedOfflineMap downloadItem:item
+              shouldContinueWhenAppEntersBackground:YES
+                                      downloadBlock:downloadBlock];
+    }
+}
+
+RCT_EXPORT_METHOD(remove:(NSString *)name) {
+    MAOfflineItem *item = [self getItem:name];
+    if (item != nil) {
+        [MAOfflineMap.sharedOfflineMap deleteItem:item];
+    }
+}
+
+- (MAOfflineItem *)getItem:(NSString *)name {
+    BOOL (^predicate)(MAOfflineItem *, NSUInteger, BOOL *)=^BOOL (MAOfflineItem * item, NSUInteger _, BOOL *stop) {
+        return [name isEqual:item.name];
+    };
+
+    NSUInteger i = [MAOfflineMap.sharedOfflineMap.provinces indexOfObjectPassingTest:predicate];
+    if (i != NSNotFound) {
+        return MAOfflineMap.sharedOfflineMap.provinces[i];
+    }
+
+    i = [MAOfflineMap.sharedOfflineMap.municipalities indexOfObjectPassingTest:predicate];
+    if (i != NSNotFound) {
+        return MAOfflineMap.sharedOfflineMap.municipalities[i];
+    }
+
+    i = [MAOfflineMap.sharedOfflineMap.cities indexOfObjectPassingTest:predicate];
+    if (i != NSNotFound) {
+        return MAOfflineMap.sharedOfflineMap.cities[i];
+    }
+
+    return nil;
+}
+
+- (NSString *)downloadStateString:(MAOfflineMapDownloadStatus)code {
+    switch (code) {
+        case MAOfflineMapDownloadStatusWaiting: return @"waiting";
+        case MAOfflineMapDownloadStatusStart: return @"downloading";
+        case MAOfflineMapDownloadStatusProgress: return @"downloading";
+        case MAOfflineMapDownloadStatusCompleted: return @"unzip";
+        case MAOfflineMapDownloadStatusUnzip: return @"unzip";
+        case MAOfflineMapDownloadStatusFinished: return @"downloaded";
+        default: return @"";
+    }
+}
+
+- (NSString *)stateString:(MAOfflineItemStatus)code {
+    switch (code) {
+        case MAOfflineItemStatusCached: return @"downloading";
+        case MAOfflineItemStatusExpired: return @"expired";
+        case MAOfflineItemStatusInstalled: return @"downloaded";
+        default: return @"";
+    }
+}
+
+- (NSDictionary *)itemData:(MAOfflineCity *)city {
+    return @{
+            @"name": city.name,
+            @"size": @(city.size),
+            @"state": [self stateString:city.itemStatus],
+    };
+}
+
+- (NSArray<NSString *> *)supportedEvents {
+    return @[@"download"];
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/Bridging-Header.h b/node_modules/react-native-amap3d/lib/ios/Bridging-Header.h
deleted file mode 100644
index b748d0e..0000000
--- a/node_modules/react-native-amap3d/lib/ios/Bridging-Header.h
+++ /dev/null
@@ -1,4 +0,0 @@
-#import <React/RCTUIManager.h>
-#import <React/RCTImageLoader.h>
-#import <React/RCTResizeMode.h>
-#import <MAMapKit/MAMapKit.h>
diff --git a/node_modules/react-native-amap3d/lib/ios/Coordinate.h b/node_modules/react-native-amap3d/lib/ios/Coordinate.h
new file mode 100644
index 0000000..28ee944
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/Coordinate.h
@@ -0,0 +1,6 @@
+#import <MAMapKit/MAMapKit.h>
+
+@interface Coordinate : NSObject
+@property(nonatomic, assign) CLLocationCoordinate2D coordinate;
+- (instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate;
+@end
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/ios/Coordinate.m b/node_modules/react-native-amap3d/lib/ios/Coordinate.m
new file mode 100644
index 0000000..d6af42a
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/Coordinate.m
@@ -0,0 +1,12 @@
+#import "Coordinate.h"
+
+@implementation Coordinate {
+}
+
+- (instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate {
+    self = [super init];
+    self.coordinate = coordinate;
+    return self;
+}
+
+@end
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/ios/LocationStyle.h b/node_modules/react-native-amap3d/lib/ios/LocationStyle.h
new file mode 100644
index 0000000..5d12719
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/LocationStyle.h
@@ -0,0 +1,8 @@
+#import <MAMapKit/MAMapKit.h>
+
+@interface LocationStyle : NSObject
+@property(nonatomic, strong) UIImage *image;
+@property(nonatomic, strong) UIColor *fillColor;
+@property(nonatomic, strong) UIColor *strokeColor;
+@property(nonatomic, assign) CGFloat strokeWidth;
+@end
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/ios/LocationStyle.m b/node_modules/react-native-amap3d/lib/ios/LocationStyle.m
new file mode 100644
index 0000000..ea1681b
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/LocationStyle.m
@@ -0,0 +1,4 @@
+#import "LocationStyle.h"
+
+@implementation LocationStyle
+@end
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/CircleManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/CircleManager.m
deleted file mode 100644
index 0daa42b..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/CircleManager.m
+++ /dev/null
@@ -1,11 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapCircleManager, RCTViewManager)
-
-RCT_REMAP_VIEW_PROPERTY(center, circleCenter, CLLocationCoordinate2D)
-RCT_EXPORT_VIEW_PROPERTY(radius, double)
-RCT_EXPORT_VIEW_PROPERTY(strokeWidth, double)
-RCT_EXPORT_VIEW_PROPERTY(strokeColor, UIColor)
-RCT_EXPORT_VIEW_PROPERTY(fillColor, UIColor)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/CircleManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/CircleManager.swift
deleted file mode 100644
index 2d4214f..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/CircleManager.swift
+++ /dev/null
@@ -1,30 +0,0 @@
-@objc(AMapCircleManager)
-class AMapCircleManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-  override func view() -> UIView { Circle() }
-}
-
-class Circle: UIView, Overlay {
-  var overlay = MACircle()
-  var renderer: MACircleRenderer?
-
-  @objc var radius = 0.0 { didSet { overlay.radius = radius } }
-  @objc var strokeWidth = 1.0 { didSet { renderer?.lineWidth = strokeWidth } }
-  @objc var strokeColor = UIColor.black { didSet { renderer?.strokeColor = strokeColor } }
-  @objc var fillColor = UIColor.white { didSet { renderer?.fillColor = fillColor } }
-
-  @objc func setCircleCenter(_ center: CLLocationCoordinate2D) {
-    overlay.coordinate = center
-  }
-
-  func getOverlay() -> MABaseOverlay { overlay }
-  func getRenderer() -> MAOverlayRenderer {
-    if renderer == nil {
-      renderer = MACircleRenderer(circle: overlay)
-      renderer?.fillColor = fillColor
-      renderer?.strokeColor = strokeColor
-      renderer?.lineWidth = strokeWidth
-    }
-    return renderer!
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/HeatMapManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/HeatMapManager.m
deleted file mode 100644
index cd7dc0d..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/HeatMapManager.m
+++ /dev/null
@@ -1,9 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapHeatMapManager, RCTViewManager)
-
-RCT_EXPORT_VIEW_PROPERTY(data, NSArray)
-RCT_EXPORT_VIEW_PROPERTY(radius, int)
-RCT_EXPORT_VIEW_PROPERTY(opacity, double)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/HeatMapManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/HeatMapManager.swift
deleted file mode 100644
index 49ddb6d..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/HeatMapManager.swift
+++ /dev/null
@@ -1,29 +0,0 @@
-@objc(AMapHeatMapManager)
-class AMapHeatMapManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-  override func view() -> UIView { HeatMap() }
-}
-
-class HeatMap: UIView, Overlay {
-  var overlay = MAHeatMapTileOverlay()
-  var renderer: MATileOverlayRenderer?
-
-  func getOverlay() -> MABaseOverlay { overlay }
-  func getRenderer() -> MAOverlayRenderer {
-    if renderer == nil {
-      renderer = MATileOverlayRenderer(tileOverlay: overlay)
-    }
-    return renderer!
-  }
-
-  @objc func setRadius(_ radius: Int) { overlay.radius = radius }
-  @objc func setOpacity(_ opacity: Double) { overlay.opacity = opacity }
-  @objc func setData(_ data: NSArray) {
-    overlay.data = data.map { it -> MAHeatMapNode in
-      let item = MAHeatMapNode()
-      item.coordinate = (it as! NSDictionary).coordinate
-      item.intensity = 1
-      return item
-    }
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/MapViewManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/MapViewManager.m
deleted file mode 100644
index aecabb2..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/MapViewManager.m
+++ /dev/null
@@ -1,35 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapViewManager, RCTViewManager)
-
-RCT_EXPORT_VIEW_PROPERTY(mapType, MAMapType)
-RCT_EXPORT_VIEW_PROPERTY(initialCameraPosition, NSDictionary)
-RCT_EXPORT_VIEW_PROPERTY(distanceFilter, double)
-RCT_EXPORT_VIEW_PROPERTY(headingFilter, double)
-
-RCT_REMAP_VIEW_PROPERTY(myLocationEnabled, showsUserLocation, BOOL)
-RCT_REMAP_VIEW_PROPERTY(buildingsEnabled, showsBuildings, BOOL)
-RCT_REMAP_VIEW_PROPERTY(trafficEnabled, showTraffic, BOOL)
-RCT_REMAP_VIEW_PROPERTY(indoorViewEnabled, showsIndoorMap, BOOL)
-RCT_REMAP_VIEW_PROPERTY(compassEnabled, showsCompass, BOOL)
-RCT_REMAP_VIEW_PROPERTY(scaleControlsEnabled, showsScale, BOOL)
-RCT_REMAP_VIEW_PROPERTY(scrollGesturesEnabled, scrollEnabled, BOOL)
-RCT_REMAP_VIEW_PROPERTY(zoomGesturesEnabled, zoomEnabled, BOOL)
-RCT_REMAP_VIEW_PROPERTY(rotateGesturesEnabled, rotateEnabled, BOOL)
-RCT_REMAP_VIEW_PROPERTY(tiltGesturesEnabled, rotateCameraEnabled, BOOL)
-RCT_REMAP_VIEW_PROPERTY(minZoom, minZoomLevel, double)
-RCT_REMAP_VIEW_PROPERTY(maxZoom, maxZoomLevel, double)
-
-RCT_EXPORT_VIEW_PROPERTY(onPress, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onPressPoi, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onLongPress, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onCameraIdle, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onCameraMove, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onLoad, RCTDirectEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onLocation, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onCallback, RCTBubblingEventBlock)
-
-RCT_EXTERN_METHOD(moveCamera:(nonnull NSNumber *)reactTag position:(NSDictionary *)_ duration:(int)_)
-RCT_EXTERN_METHOD(call:(nonnull NSNumber *)reactTag callerId:(double)_ name:(NSString *)_ args:(NSDictionary *)_)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/MapViewManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/MapViewManager.swift
deleted file mode 100644
index c79d9d2..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/MapViewManager.swift
+++ /dev/null
@@ -1,159 +0,0 @@
-@objc(AMapViewManager)
-class AMapViewManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-
-  override func view() -> UIView {
-    let view = MapView()
-    view.delegate = view
-    return view
-  }
-
-  @objc func moveCamera(_ reactTag: NSNumber, position: NSDictionary, duration: Int) {
-    getView(reactTag: reactTag) { view in
-      view.moveCamera(position: position, duration: duration)
-    }
-  }
-
-  @objc func call(_ reactTag: NSNumber, callerId: Double, name: String, args: NSDictionary) {
-    getView(reactTag: reactTag) { view in
-      view.call(id: callerId, name: name, args: args)
-    }
-  }
-
-  func getView(reactTag: NSNumber, callback: @escaping (MapView) -> Void) {
-    bridge.uiManager.addUIBlock { _, viewRegistry in
-      callback(viewRegistry![reactTag] as! MapView)
-    }
-  }
-}
-
-class MapView: MAMapView, MAMapViewDelegate {
-  var initialized = false
-  var overlayMap: [MABaseOverlay: Overlay] = [:]
-  var markerMap: [MAPointAnnotation: Marker] = [:]
-
-  @objc var onLoad: RCTBubblingEventBlock = { _ in }
-  @objc var onCameraMove: RCTBubblingEventBlock = { _ in }
-  @objc var onCameraIdle: RCTBubblingEventBlock = { _ in }
-  @objc var onPress: RCTBubblingEventBlock = { _ in }
-  @objc var onPressPoi: RCTBubblingEventBlock = { _ in }
-  @objc var onLongPress: RCTBubblingEventBlock = { _ in }
-  @objc var onLocation: RCTBubblingEventBlock = { _ in }
-  @objc var onCallback: RCTBubblingEventBlock = { _ in }
-
-  @objc func setInitialCameraPosition(_ json: NSDictionary) {
-    if !initialized {
-      initialized = true
-      moveCamera(position: json)
-    }
-  }
-
-  func moveCamera(position: NSDictionary, duration: Int = 0) {
-    let status = MAMapStatus()
-    status.zoomLevel = (position["zoom"] as? Double)?.cgFloat ?? zoomLevel
-    status.cameraDegree = (position["tilt"] as? Double)?.cgFloat ?? cameraDegree
-    status.rotationDegree = (position["bearing"] as? Double)?.cgFloat ?? rotationDegree
-    status.centerCoordinate = (position["target"] as? NSDictionary)?.coordinate ?? centerCoordinate
-    setMapStatus(status, animated: true, duration: Double(duration) / 1000)
-  }
-
-  func call(id: Double, name: String, args: NSDictionary) {
-    switch name {
-    case "getLatLng":
-      callback(id: id, data: convert(args.point, toCoordinateFrom: self).json)
-    default:
-      break
-    }
-  }
-
-  func callback(id: Double, data: [String: Any]) {
-    onCallback(["id": id, "data": data])
-  }
-
-  override func didAddSubview(_ subview: UIView) {
-    if let overlay = (subview as? Overlay)?.getOverlay() {
-      overlayMap[overlay] = subview as? Overlay
-      add(overlay)
-    }
-    if let annotation = (subview as? Marker)?.annotation {
-      markerMap[annotation] = subview as? Marker
-      addAnnotation(annotation)
-    }
-  }
-
-  override func removeReactSubview(_ subview: UIView!) {
-    super.removeReactSubview(subview)
-    if let overlay = (subview as? Overlay)?.getOverlay() {
-      overlayMap.removeValue(forKey: overlay)
-      remove(overlay)
-    }
-    if let annotation = (subview as? Marker)?.annotation {
-      markerMap.removeValue(forKey: annotation)
-      removeAnnotation(annotation)
-    }
-  }
-
-  func mapView(_: MAMapView, rendererFor overlay: MAOverlay) -> MAOverlayRenderer? {
-    if let key = overlay as? MABaseOverlay {
-      return overlayMap[key]?.getRenderer()
-    }
-    return nil
-  }
-
-  func mapView(_: MAMapView!, viewFor annotation: MAAnnotation) -> MAAnnotationView? {
-    if let key = annotation as? MAPointAnnotation {
-      return markerMap[key]?.getView()
-    }
-    return nil
-  }
-
-  func mapView(_: MAMapView!, annotationView view: MAAnnotationView!, didChange newState: MAAnnotationViewDragState, fromOldState _: MAAnnotationViewDragState) {
-    if let key = view.annotation as? MAPointAnnotation {
-      let market = markerMap[key]!
-      if newState == MAAnnotationViewDragState.starting {
-        market.onDragStart(nil)
-      }
-      if newState == MAAnnotationViewDragState.dragging {
-        market.onDrag(nil)
-      }
-      if newState == MAAnnotationViewDragState.ending {
-        market.onDragEnd(view.annotation.coordinate.json)
-      }
-    }
-  }
-
-  func mapView(_: MAMapView!, didAnnotationViewTapped view: MAAnnotationView!) {
-    if let key = view.annotation as? MAPointAnnotation {
-      markerMap[key]?.onPress(nil)
-    }
-  }
-
-  func mapInitComplete(_: MAMapView!) {
-    onLoad(nil)
-  }
-
-  func mapView(_: MAMapView!, didSingleTappedAt coordinate: CLLocationCoordinate2D) {
-    onPress(coordinate.json)
-  }
-
-  func mapView(_: MAMapView!, didTouchPois pois: [Any]!) {
-    let poi = pois[0] as! MATouchPoi
-    onPressPoi(["name": poi.name!, "id": poi.uid!, "position": poi.coordinate.json])
-  }
-
-  func mapView(_: MAMapView!, didLongPressedAt coordinate: CLLocationCoordinate2D) {
-    onLongPress(coordinate.json)
-  }
-
-  func mapViewRegionChanged(_: MAMapView!) {
-    onCameraMove(cameraEvent)
-  }
-
-  func mapView(_: MAMapView!, regionDidChangeAnimated _: Bool) {
-    onCameraIdle(cameraEvent)
-  }
-
-  func mapView(_: MAMapView!, didUpdate userLocation: MAUserLocation!, updatingLocation _: Bool) {
-    onLocation(userLocation.json)
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/MarkerManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/MarkerManager.m
deleted file mode 100644
index 1063160..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/MarkerManager.m
+++ /dev/null
@@ -1,18 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapMarkerManager, RCTViewManager)
-
-RCT_EXPORT_VIEW_PROPERTY(latLng, CLLocationCoordinate2D)
-RCT_EXPORT_VIEW_PROPERTY(centerOffset, CGPoint)
-RCT_EXPORT_VIEW_PROPERTY(draggable, BOOL)
-RCT_EXPORT_VIEW_PROPERTY(zIndex, int)
-RCT_EXPORT_VIEW_PROPERTY(icon, NSDictionary)
-
-RCT_EXPORT_VIEW_PROPERTY(onPress, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onDragStart, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onDrag, RCTBubblingEventBlock)
-RCT_EXPORT_VIEW_PROPERTY(onDragEnd, RCTBubblingEventBlock)
-
-RCT_EXTERN_METHOD(update:(nonnull NSNumber *)reactTag)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/MarkerManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/MarkerManager.swift
deleted file mode 100644
index fd2a303..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/MarkerManager.swift
+++ /dev/null
@@ -1,100 +0,0 @@
-@objc(AMapMarkerManager)
-class AMapMarkerManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-
-  override func view() -> UIView {
-    let view = Marker()
-    view.imageLoader = bridge.module(forName: "ImageLoader") as? RCTImageLoader
-    return view
-  }
-
-  @objc func update(_ reactTag: NSNumber) {
-    getView(reactTag: reactTag) { view in view.update() }
-  }
-
-  func getView(reactTag: NSNumber, callback: @escaping (Marker) -> Void) {
-    bridge.uiManager.addUIBlock { _, viewRegistry in
-      callback(viewRegistry![reactTag] as! Marker)
-    }
-  }
-}
-
-class Marker: UIView {
-  var imageLoader: RCTImageLoader?
-  var view: MAAnnotationView?
-  var annotation = MAPointAnnotation()
-  var icon: UIImage?
-  var iconView: UIView?
-  var centerOffset: CGPoint?
-
-  @objc var draggable = false { didSet { view?.isDraggable = draggable } }
-  @objc var zIndex = 1 { didSet { view?.zIndex = zIndex } }
-
-  @objc var onPress: RCTDirectEventBlock = { _ in }
-  @objc var onDragStart: RCTDirectEventBlock = { _ in }
-  @objc var onDrag: RCTDirectEventBlock = { _ in }
-  @objc var onDragEnd: RCTDirectEventBlock = { _ in }
-
-  @objc func setIcon(_ icon: NSDictionary?) {
-    imageLoader?.loadImage(icon) { image in
-      self.icon = image
-      self.view?.image = image
-      self.updateCenterOffset()
-    }
-  }
-
-  @objc func setLatLng(_ coordinate: CLLocationCoordinate2D) {
-    annotation.coordinate = coordinate
-  }
-
-  @objc func setCenterOffset(_ centerOffset: CGPoint) {
-    self.centerOffset = centerOffset
-    view?.centerOffset = centerOffset
-  }
-
-  override func didAddSubview(_ subview: UIView) {
-    subview.layer.opacity = 0
-    iconView = subview
-  }
-
-  /**
-   * subview 不能直接用作 marker 的 icon，因为在实现点聚合的时候发现，subview 一定概率无法正常 layout，会堆在右上角。
-   * 于是索性把 subview 渲染成 image，原来用 subview 带来的 offset、点击问题也都不用处理了。
-   * 正常情况下就把 subview 的 opacity 设成 0，需要渲染的时候才设成 1，渲染然后马上设回 0。
-   */
-  func update() {
-    if centerOffset == nil, view != nil {
-      iconView?.layer.opacity = 1
-      let renderer = UIGraphicsImageRenderer(bounds: iconView!.bounds)
-      view?.image = renderer.image { context in layer.render(in: context.cgContext) }
-      iconView?.layer.opacity = 0
-      updateCenterOffset()
-    }
-  }
-
-  func updateCenterOffset() {
-    if centerOffset == nil, view != nil {
-      let size: CGSize = (view?.image.size)!
-      view?.centerOffset = CGPoint(x: 0, y: -size.height / 2)
-    }
-  }
-
-  func getView() -> MAAnnotationView {
-    if view == nil {
-      view = MAAnnotationView(annotation: annotation, reuseIdentifier: nil)
-      if icon == nil, iconView == nil {
-        view?.image = MAPinAnnotationView(annotation: annotation, reuseIdentifier: nil).image
-      }
-      view?.isDraggable = draggable
-      view?.zIndex = zIndex
-      if centerOffset != nil {
-        view?.centerOffset = centerOffset!
-      }
-      if icon != nil {
-        view?.image = icon
-        updateCenterOffset()
-      }
-    }
-    return view!
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/MultiPointManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/MultiPointManager.m
deleted file mode 100644
index 336bbf9..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/MultiPointManager.m
+++ /dev/null
@@ -1,9 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapMultiPointManager, RCTViewManager)
-
-RCT_EXPORT_VIEW_PROPERTY(items, NSArray)
-RCT_EXPORT_VIEW_PROPERTY(icon, NSDictionary)
-RCT_EXPORT_VIEW_PROPERTY(onPress, RCTBubblingEventBlock)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/MultiPointManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/MultiPointManager.swift
deleted file mode 100644
index 196cc35..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/MultiPointManager.swift
+++ /dev/null
@@ -1,47 +0,0 @@
-@objc(AMapMultiPointManager)
-class AMapMultiPointManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-
-  override func view() -> UIView {
-    let view = MultiPoint()
-    view.imageLoader = bridge.module(forName: "ImageLoader") as? RCTImageLoader
-    return view
-  }
-}
-
-class MultiPoint: UIView, Overlay, MAMultiPointOverlayRendererDelegate {
-  var imageLoader: RCTImageLoader?
-  var overlay: MAMultiPointOverlay?
-  var renderer: MAMultiPointOverlayRenderer?
-  var icon: UIImage?
-
-  @objc var onPress: RCTDirectEventBlock = { _ in }
-
-  @objc func setIcon(_ icon: NSDictionary) {
-    imageLoader?.loadImage(icon) { image in
-      self.renderer?.icon = image
-    }
-  }
-
-  @objc func setItems(_ items: NSArray) {
-    overlay = MAMultiPointOverlay(multiPointItems: items.map { it -> MAMultiPointItem in
-      let item = MAMultiPointItem()
-      item.coordinate = (it as! NSDictionary).coordinate
-      return item
-    })
-  }
-
-  func getOverlay() -> MABaseOverlay { overlay! }
-  func getRenderer() -> MAOverlayRenderer {
-    if renderer == nil {
-      renderer = MAMultiPointOverlayRenderer(multiPointOverlay: overlay)
-      renderer?.icon = icon
-      renderer?.delegate = self
-    }
-    return renderer!
-  }
-
-  func multiPointOverlayRenderer(_: MAMultiPointOverlayRenderer!, didItemTapped item: MAMultiPointItem!) {
-    onPress(["index": (overlay?.items.firstIndex(of: item))!])
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/Overlay.swift b/node_modules/react-native-amap3d/lib/ios/MapView/Overlay.swift
deleted file mode 100644
index 63a4871..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/Overlay.swift
+++ /dev/null
@@ -1,4 +0,0 @@
-protocol Overlay: UIView {
-  func getOverlay() -> MABaseOverlay
-  func getRenderer() -> MAOverlayRenderer
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/PolygonManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/PolygonManager.m
deleted file mode 100644
index 3243fa6..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/PolygonManager.m
+++ /dev/null
@@ -1,10 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapPolygonManager, RCTViewManager)
-
-RCT_EXPORT_VIEW_PROPERTY(points, NSArray)
-RCT_EXPORT_VIEW_PROPERTY(strokeWidth, double)
-RCT_EXPORT_VIEW_PROPERTY(strokeColor, UIColor)
-RCT_EXPORT_VIEW_PROPERTY(fillColor, UIColor)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/PolygonManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/PolygonManager.swift
deleted file mode 100644
index 4d87402..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/PolygonManager.swift
+++ /dev/null
@@ -1,30 +0,0 @@
-@objc(AMapPolygonManager)
-class AMapPolygonManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-  override func view() -> UIView { Polygon() }
-}
-
-class Polygon: UIView, Overlay {
-  var overlay = MAPolygon()
-  var renderer: MAPolygonRenderer?
-
-  @objc var strokeWidth = 1.0 { didSet { renderer?.lineWidth = strokeWidth } }
-  @objc var strokeColor = UIColor.black { didSet { renderer?.strokeColor = strokeColor } }
-  @objc var fillColor = UIColor.white { didSet { renderer?.fillColor = fillColor } }
-
-  @objc func setPoints(_ points: NSArray) {
-    var coordinates = points.map { it -> CLLocationCoordinate2D in (it as! NSDictionary).coordinate }
-    overlay.setPolygonWithCoordinates(&coordinates, count: points.count)
-  }
-
-  func getOverlay() -> MABaseOverlay { overlay }
-  func getRenderer() -> MAOverlayRenderer {
-    if renderer == nil {
-      renderer = MAPolygonRenderer(polygon: overlay)
-      renderer?.fillColor = fillColor
-      renderer?.strokeColor = strokeColor
-      renderer?.lineWidth = strokeWidth
-    }
-    return renderer!
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/PolylineManager.m b/node_modules/react-native-amap3d/lib/ios/MapView/PolylineManager.m
deleted file mode 100644
index 718bf91..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/PolylineManager.m
+++ /dev/null
@@ -1,12 +0,0 @@
-#import <React/RCTUIManager.h>
-
-@interface RCT_EXTERN_MODULE(AMapPolylineManager, RCTViewManager)
-
-RCT_EXPORT_VIEW_PROPERTY(points, NSArray)
-RCT_EXPORT_VIEW_PROPERTY(width, double)
-RCT_EXPORT_VIEW_PROPERTY(color, UIColor)
-RCT_EXPORT_VIEW_PROPERTY(dotted, BOOL)
-RCT_EXPORT_VIEW_PROPERTY(gradient, BOOL)
-RCT_EXPORT_VIEW_PROPERTY(colors, UIColorArray)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/MapView/PolylineManager.swift b/node_modules/react-native-amap3d/lib/ios/MapView/PolylineManager.swift
deleted file mode 100644
index 2788ed9..0000000
--- a/node_modules/react-native-amap3d/lib/ios/MapView/PolylineManager.swift
+++ /dev/null
@@ -1,41 +0,0 @@
-@objc(AMapPolylineManager)
-class AMapPolylineManager: RCTViewManager {
-  override class func requiresMainQueueSetup() -> Bool { false }
-  override func view() -> UIView { Polyline() }
-}
-
-class Polyline: UIView, Overlay {
-  var overlay = MAMultiPolyline()
-  var renderer: MAMultiColoredPolylineRenderer?
-
-  @objc var width = 1.0 { didSet { renderer?.lineWidth = width } }
-  @objc var color = UIColor.black { didSet { renderer?.strokeColor = color } }
-  @objc var gradient = false { didSet { renderer?.isGradient = gradient } }
-  @objc var dotted = false { didSet { setDotted() } }
-  @objc var colors: [UIColor] = [] { didSet {
-    renderer?.strokeColors = colors
-    overlay.drawStyleIndexes = (0 ..< colors.count).map { it in NSNumber(value: it) }
-  } }
-
-  @objc func setPoints(_ points: NSArray) {
-    var coordinates = points.map { it -> CLLocationCoordinate2D in (it as! NSDictionary).coordinate }
-    overlay.setPolylineWithCoordinates(&coordinates, count: points.count)
-  }
-
-  func setDotted() {
-    renderer?.lineDashType = dotted ? kMALineDashTypeDot : kMALineDashTypeNone
-  }
-
-  func getOverlay() -> MABaseOverlay { overlay }
-  func getRenderer() -> MAOverlayRenderer {
-    if renderer == nil {
-      renderer = MAMultiColoredPolylineRenderer(multiPolyline: overlay)
-      renderer?.strokeColor = color
-      renderer?.lineWidth = width
-      renderer?.isGradient = gradient
-      renderer?.strokeColors = colors
-      setDotted()
-    }
-    return renderer!
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/Modules/OfflineModule.m b/node_modules/react-native-amap3d/lib/ios/Modules/OfflineModule.m
deleted file mode 100644
index f057c8d..0000000
--- a/node_modules/react-native-amap3d/lib/ios/Modules/OfflineModule.m
+++ /dev/null
@@ -1,13 +0,0 @@
-#import <React/RCTBridgeModule.h>
-
-@interface RCT_EXTERN_MODULE(AMapOffline, NSObject)
-
-RCT_EXTERN_METHOD(download: (NSString)apiKey)
-RCT_EXTERN_METHOD(addListener: (NSString)eventType)
-RCT_EXTERN_METHOD(removeListeners: (int)count)
-
-- (NSArray<NSString *> *)supportedEvents {
-  return @[ @"download" ];
-}
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/Modules/OfflineModule.swift b/node_modules/react-native-amap3d/lib/ios/Modules/OfflineModule.swift
deleted file mode 100644
index 6a840bb..0000000
--- a/node_modules/react-native-amap3d/lib/ios/Modules/OfflineModule.swift
+++ /dev/null
@@ -1,10 +0,0 @@
-@objc(AMapOffline)
-class Offline: NSObject {
-  @objc static func requiresMainQueueSetup() -> Bool {
-    false
-  }
-
-  @objc func removeListeners(_: Int) {}
-  @objc func addListener(_: String) {}
-  @objc func download(_: String) {}
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/Modules/SdkModule.m b/node_modules/react-native-amap3d/lib/ios/Modules/SdkModule.m
deleted file mode 100644
index 7f4de35..0000000
--- a/node_modules/react-native-amap3d/lib/ios/Modules/SdkModule.m
+++ /dev/null
@@ -1,8 +0,0 @@
-#import <React/RCTBridgeModule.h>
-
-@interface RCT_EXTERN_MODULE(AMapSdk, NSObject)
-
-RCT_EXTERN_METHOD(setApiKey: (NSString)apiKey)
-RCT_EXTERN_METHOD(getVersion: (RCTPromiseResolveBlock)resolve reject: (RCTPromiseRejectBlock)_)
-
-@end
diff --git a/node_modules/react-native-amap3d/lib/ios/Modules/SdkModule.swift b/node_modules/react-native-amap3d/lib/ios/Modules/SdkModule.swift
deleted file mode 100644
index f00908f..0000000
--- a/node_modules/react-native-amap3d/lib/ios/Modules/SdkModule.swift
+++ /dev/null
@@ -1,14 +0,0 @@
-@objc(AMapSdk)
-class AMapSdk: NSObject {
-  @objc static func requiresMainQueueSetup() -> Bool {
-    false
-  }
-
-  @objc func setApiKey(_ apiKey: String) {
-    AMapServices.shared().apiKey = apiKey
-  }
-
-  @objc func getVersion(_ resolve: RCTPromiseResolveBlock, reject _: RCTPromiseRejectBlock) {
-    resolve("8.0.1")
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/RCTConvert+AMap3D.m b/node_modules/react-native-amap3d/lib/ios/RCTConvert+AMap3D.m
new file mode 100644
index 0000000..17a3aad
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/RCTConvert+AMap3D.m
@@ -0,0 +1,57 @@
+#import <MAMapKit/MAMapView.h>
+#import <React/RCTConvert.h>
+#import <React/RCTConvert+CoreLocation.h>
+#import "Coordinate.h"
+#import "LocationStyle.h"
+
+@implementation RCTConvert (AMapView)
+
+RCT_ENUM_CONVERTER(MAPinAnnotationColor, (@{
+        @"red": @(MAPinAnnotationColorRed),
+        @"green": @(MAPinAnnotationColorGreen),
+        @"purple": @(MAPinAnnotationColorPurple),
+}), MAPinAnnotationColorRed, integerValue)
+
++ (MAMapType)MAMapType:(id)type {
+    return [type integerValue];
+}
+
++ (Coordinate *)Coordinate:(id)json {
+    return [[Coordinate alloc] initWithCoordinate:[self CLLocationCoordinate2D:json]];
+}
+
++ (LocationStyle *)LocationStyle:(id)json {
+    LocationStyle *locationStyle = [LocationStyle new];
+    locationStyle.fillColor = [self UIColor:json[@"fillColor"]];
+    locationStyle.strokeColor = [self UIColor:json[@"strokeColor"]];
+    locationStyle.strokeWidth = [self CGFloat:json[@"strokeWidth"]];
+    locationStyle.image = [UIImage imageNamed:[self NSString:json[@"image"]]];
+    return locationStyle;
+}
+
++ (MAHeatMapNode *)MAHeatMapNode:(id)json {
+    MAHeatMapNode *node = [MAHeatMapNode new];
+    node.coordinate = [self CLLocationCoordinate2D:json];
+    node.intensity = 1;
+    return node;
+}
+
++ (MAMultiPointItem *)MAMultiPointItem:(id)json {
+    MAMultiPointItem *item = [MAMultiPointItem new];
+    item.coordinate = [self CLLocationCoordinate2D:json];
+    return item;
+}
+
++ (MACoordinateRegion)MACoordinateRegion:(id)json {
+    return MACoordinateRegionMake(
+            [self CLLocationCoordinate2D:json],
+            MACoordinateSpanMake(
+                    [self CLLocationDegrees:json[@"latitudeDelta"]],
+                    [self CLLocationDegrees:json[@"longitudeDelta"]]));
+}
+
+RCT_ARRAY_CONVERTER(Coordinate)
+RCT_ARRAY_CONVERTER(MAHeatMapNode)
+RCT_ARRAY_CONVERTER(MAMultiPointItem)
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/Utils.swift b/node_modules/react-native-amap3d/lib/ios/Utils.swift
deleted file mode 100644
index 13ac72c..0000000
--- a/node_modules/react-native-amap3d/lib/ios/Utils.swift
+++ /dev/null
@@ -1,104 +0,0 @@
-extension NSDictionary {
-  var coordinate: CLLocationCoordinate2D {
-    CLLocationCoordinate2DMake(self["latitude"] as! Double, self["longitude"] as! Double)
-  }
-
-  var point: CGPoint {
-    CGPoint(x: self["x"] as! Double, y: self["y"] as! Double)
-  }
-}
-
-extension CLLocationCoordinate2D {
-  var json: [String: Double] {
-    ["latitude": latitude, "longitude": longitude]
-  }
-}
-
-extension MAUserLocation {
-  var json: [String: Any] {
-    [
-      "coords": [
-        "latitude": coordinate.latitude,
-        "longitude": coordinate.longitude,
-        "altitude": location?.altitude ?? 0,
-        "heading": heading?.trueHeading,
-        "accuracy": location?.horizontalAccuracy ?? 0,
-        "speed": location?.speed ?? 0,
-      ],
-      "timestamp": NSDate().timeIntervalSince1970 * 1000,
-    ]
-  }
-}
-
-extension MACoordinateRegion {
-  var json: [String: Any] {
-    [
-      "southwest": [
-        "latitude": center.latitude - span.latitudeDelta / 2,
-        "longitude": center.longitude - span.longitudeDelta / 2,
-      ],
-      "northeast": [
-        "latitude": center.latitude + span.latitudeDelta / 2,
-        "longitude": center.longitude + span.longitudeDelta / 2,
-      ],
-    ]
-  }
-}
-
-extension MAMapStatus {
-  var json: [String: Any] {
-    [
-      "target": centerCoordinate.json,
-      "zoom": zoomLevel,
-      "bearing": rotationDegree,
-      "tilt": cameraDegree,
-    ]
-  }
-}
-
-extension MAMapView {
-  var cameraEvent: [String: Any] {
-    [
-      "cameraPosition": getMapStatus().json,
-      "latLngBounds": region.json,
-    ]
-  }
-}
-
-extension Double {
-  var cgFloat: CGFloat {
-    CGFloat(self)
-  }
-}
-
-extension RCTConvert {
-  @objc static func MAMapType(_ json: Any) -> MAMapType {
-    MAMapKit.MAMapType(rawValue: json as! NSInteger)!
-  }
-}
-
-extension RCTImageLoader {
-  func loadImage(_ icon: NSDictionary?, callback: @escaping (UIImage) -> Void) {
-    if icon == nil {
-      return
-    }
-    let width = icon?["width"] as? Double ?? 0
-    let height = icon?["height"] as? Double ?? 0
-    loadImage(
-      with: RCTConvert.nsurlRequest(icon),
-      size: CGSize(width: width, height: height),
-      scale: RCTScreenScale(),
-      clipped: false,
-      resizeMode: RCTResizeMode.cover,
-      progressBlock: { _, _ in },
-      partialLoad: { _ in },
-      completionBlock: { _, image in
-        if image != nil {
-          DispatchQueue.main.async {
-            callback(image!)
-          }
-        }
-      }
-    )
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapCallout.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapCallout.h
new file mode 100644
index 0000000..05a0132
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapCallout.h
@@ -0,0 +1,4 @@
+#import <React/RCTView.h>
+
+@interface AMapCallout : RCTView
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapCallout.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapCallout.m
new file mode 100644
index 0000000..b4cd0d5
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapCallout.m
@@ -0,0 +1,4 @@
+#import "AMapCallout.h"
+
+@implementation AMapCallout
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapCalloutManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapCalloutManager.m
new file mode 100644
index 0000000..c6aab6a
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapCalloutManager.m
@@ -0,0 +1,18 @@
+#import <React/RCTUIManager.h>
+#import "AMapCallout.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapCalloutManager : RCTViewManager
+@end
+
+@implementation AMapCalloutManager {
+}
+
+RCT_EXPORT_MODULE(AMapInfoWindow)
+
+- (UIView *)view {
+    return [AMapCallout new];
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapCircle.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapCircle.h
new file mode 100644
index 0000000..d9c7143
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapCircle.h
@@ -0,0 +1,11 @@
+#import <MAMapKit/MAMapKit.h>
+#import "AMapOverlay.h"
+
+#pragma ide diagnostic ignored "OCUnusedPropertyInspection"
+
+@interface AMapCircle : AMapOverlay
+
+@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;
+@property(nonatomic, readonly) MAMapRect boundingMapRect;
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapCircle.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapCircle.m
new file mode 100644
index 0000000..58274db
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapCircle.m
@@ -0,0 +1,62 @@
+#import "AMapCircle.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+
+@implementation AMapCircle {
+    MACircle *_circle;
+    MACircleRenderer *_renderer;
+    CGFloat _strokeWidth;
+    UIColor *_strokeColor;
+    UIColor *_fillColor;
+    CLLocationCoordinate2D _coordinate;
+    CLLocationDistance _radius;
+}
+
+- (void)setCoordinate:(CLLocationCoordinate2D)coordinate {
+    _coordinate = coordinate;
+    _circle.coordinate = coordinate;
+}
+
+- (void)setRadius:(CLLocationDistance)radius {
+    _radius = radius;
+    _circle.radius = radius;
+}
+
+- (void)setStrokeWidth:(CGFloat)strokeWidth {
+    _strokeWidth = strokeWidth;
+    _renderer.lineWidth = strokeWidth;
+}
+
+- (void)setStrokeColor:(UIColor *)strokeColor {
+    _strokeColor = strokeColor;
+    _renderer.strokeColor = strokeColor;
+}
+
+- (void)setFillColor:(UIColor *)fillColor {
+    _fillColor = fillColor;
+    _renderer.fillColor = fillColor;
+}
+
+- (CLLocationCoordinate2D)coordinate {
+    return _circle.coordinate;
+}
+
+- (MAMapRect)boundingMapRect {
+    return _circle.boundingMapRect;
+}
+
+- (MAOverlayRenderer *)renderer {
+    if (_strokeColor == nil) {
+        _strokeColor = UIColor.blackColor;
+    }
+    if (_renderer == nil) {
+        _circle = [MACircle circleWithCenterCoordinate:_coordinate radius:_radius];
+        _renderer = [[MACircleRenderer alloc] initWithCircle:_circle];
+        _renderer.lineWidth = _strokeWidth;
+        _renderer.strokeColor = _strokeColor;
+        _renderer.fillColor = _fillColor;
+    }
+    return _renderer;
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapCircleManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapCircleManager.m
new file mode 100644
index 0000000..27638c9
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapCircleManager.m
@@ -0,0 +1,25 @@
+#import <MAMapKit/MAMapView.h>
+#import <React/RCTViewManager.h>
+#import "AMapCircle.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapCircleManager : RCTViewManager
+@end
+
+@implementation AMapCircleManager {
+}
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    return [AMapCircle new];
+}
+
+RCT_EXPORT_VIEW_PROPERTY(coordinate, CLLocationCoordinate2D)
+RCT_EXPORT_VIEW_PROPERTY(radius, CLLocationDistance)
+RCT_EXPORT_VIEW_PROPERTY(strokeWidth, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(strokeColor, UIColor)
+RCT_EXPORT_VIEW_PROPERTY(fillColor, UIColor)
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMap.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMap.h
new file mode 100644
index 0000000..6dde146
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMap.h
@@ -0,0 +1,5 @@
+#import <MAMapKit/MAMapKit.h>
+#import "AMapOverlay.h"
+
+@interface AMapHeatMap : AMapOverlay
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMap.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMap.m
new file mode 100644
index 0000000..fe2bc39
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMap.m
@@ -0,0 +1,42 @@
+#import "AMapHeatMap.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+
+@implementation AMapHeatMap {
+    NSArray<MAHeatMapNode *> *_data;
+    MATileOverlayRenderer *_renderer;
+    MAHeatMapTileOverlay *_heatMap;
+    NSInteger _radius;
+    CGFloat _opacity;
+}
+
+- (void)setCoordinates:(NSArray<MAHeatMapNode *> *)coordinates {
+    _data = coordinates;
+}
+
+- (void)setRadius:(NSInteger)radius {
+    _radius = radius;
+}
+
+- (void)setOpacity:(CGFloat)opacity {
+    _opacity = opacity;
+}
+
+- (MAOverlayRenderer *)renderer {
+    if (_renderer == nil) {
+        if (_opacity == 0) {
+            _opacity = 0.6;
+        }
+        if (_radius == 0) {
+            _radius = 12;
+        }
+        _heatMap = [MAHeatMapTileOverlay new];
+        _heatMap.data = _data;
+        _heatMap.opacity = _opacity;
+        _heatMap.radius = _radius;
+        _renderer = [[MATileOverlayRenderer alloc] initWithTileOverlay:_heatMap];
+    }
+    return _renderer;
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMapManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMapManager.m
new file mode 100644
index 0000000..64a3841
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapHeatMapManager.m
@@ -0,0 +1,23 @@
+#import <MAMapKit/MAMapView.h>
+#import <React/RCTViewManager.h>
+#import "AMapHeatMap.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapHeatMapManager : RCTViewManager
+@end
+
+@implementation AMapHeatMapManager {
+}
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    return [AMapHeatMap new];
+}
+
+RCT_EXPORT_VIEW_PROPERTY(coordinates, MAHeatMapNodeArray)
+RCT_EXPORT_VIEW_PROPERTY(radius, NSInteger)
+RCT_EXPORT_VIEW_PROPERTY(opacity, CGFloat)
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapMarker.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapMarker.h
new file mode 100644
index 0000000..190db1f
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapMarker.h
@@ -0,0 +1,18 @@
+#import "AMapView.h"
+#import "AMapCallout.h"
+
+@interface AMapMarker : UIView
+
+@property(nonatomic, copy) RCTBubblingEventBlock onPress;
+@property(nonatomic, copy) RCTBubblingEventBlock onInfoWindowPress;
+@property(nonatomic, copy) RCTBubblingEventBlock onDragStart;
+@property(nonatomic, copy) RCTBubblingEventBlock onDrag;
+@property(nonatomic, copy) RCTBubblingEventBlock onDragEnd;
+
+- (MAAnnotationView *)annotationView;
+- (MAPointAnnotation *)annotation;
+- (void)setActive:(BOOL)active;
+- (void)setMapView:(AMapView *)mapView;
+- (void)lockToScreen:(int)x y:(int)y;
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapMarker.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapMarker.m
new file mode 100644
index 0000000..3b472d4
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapMarker.m
@@ -0,0 +1,163 @@
+#import <React/UIView+React.h>
+#import "AMapMarker.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+#pragma clang diagnostic ignored "-Woverriding-method-mismatch"
+
+@implementation AMapMarker {
+    MAPointAnnotation *_annotation;
+    MAAnnotationView *_annotationView;
+    MACustomCalloutView *_calloutView;
+    UIView *_customView;
+    __weak AMapView *_mapView;
+    MAPinAnnotationColor _pinColor;
+    UIImage *_image;
+    CGPoint _centerOffset;
+    BOOL _draggable;
+    BOOL _active;
+    BOOL _canShowCallout;
+    BOOL _enabled;
+    NSInteger _zIndex;
+}
+
+- (instancetype)init {
+    _annotation = [MAPointAnnotation new];
+    _enabled = YES;
+    _canShowCallout = YES;
+    self = [super init];
+    return self;
+}
+
+- (NSString *)title {
+    return _annotation.title;
+}
+
+- (NSString *)subtitle {
+    return _annotation.subtitle;
+}
+
+- (CLLocationCoordinate2D)coordinate {
+    return _annotation.coordinate;
+}
+
+- (void)setTitle:(NSString *)title {
+    _annotation.title = title;
+}
+
+- (void)setColor:(MAPinAnnotationColor)color {
+    _pinColor = color;
+    ((MAPinAnnotationView *) _annotationView).pinColor = color;
+}
+
+- (void)setDraggable:(BOOL)draggable {
+    _draggable = draggable;
+    _annotationView.draggable = draggable;
+}
+
+- (void)setCenterOffset:(CGPoint)centerOffset {
+    _centerOffset = centerOffset;
+    _annotationView.centerOffset = centerOffset;
+}
+
+- (void)setImage:(NSString *)name {
+    _image = [UIImage imageNamed:name];
+    if (_image != nil) {
+        _annotationView.image = _image;
+    }
+}
+
+- (void)setDescription:(NSString *)description {
+    _annotation.subtitle = description;
+}
+
+- (void)setCoordinate:(CLLocationCoordinate2D)coordinate {
+    _annotation.coordinate = coordinate;
+}
+
+- (void)setActive:(BOOL)active {
+    _active = active;
+    dispatch_async(dispatch_get_main_queue(), ^{
+        if (active) {
+            [_mapView selectAnnotation:_annotation animated:YES];
+        } else {
+            [_mapView deselectAnnotation:_annotation animated:YES];
+        }
+    });
+}
+
+- (void)setInfoWindowDisabled:(BOOL)disabled {
+    _canShowCallout = !disabled;
+    _annotationView.canShowCallout = !disabled;
+}
+
+- (void)setClickDisabled:(BOOL)disabled {
+    _enabled = !disabled;
+    _annotationView.enabled = !disabled;
+}
+
+- (void)setZIndex:(NSInteger)zIndex {
+    _zIndex = zIndex;
+    _annotationView.zIndex = zIndex;
+}
+
+- (MAPointAnnotation *)annotation {
+    return _annotation;
+}
+
+- (void)setMapView:(AMapView *)mapView {
+    _mapView = mapView;
+}
+
+- (void)_handleTap:(UITapGestureRecognizer *)recognizer {
+    [_mapView selectAnnotation:_annotation animated:YES];
+}
+
+- (MAAnnotationView *)annotationView {
+    if (_annotationView == nil) {
+        if (_customView) {
+            _customView.hidden = NO;
+            _annotationView = [[MAAnnotationView alloc] initWithAnnotation:_annotation reuseIdentifier:nil];
+            _annotationView.bounds = _customView.bounds;
+            [_annotationView addSubview:_customView];
+            [_annotationView addGestureRecognizer:[
+                    [UITapGestureRecognizer alloc] initWithTarget:self action:@selector(_handleTap:)]];
+        } else {
+            _annotationView = [[MAPinAnnotationView alloc] initWithAnnotation:_annotation reuseIdentifier:nil];
+            ((MAPinAnnotationView *) _annotationView).pinColor = _pinColor;
+        }
+
+        _annotationView.enabled = _enabled;
+        _annotationView.canShowCallout = _canShowCallout;
+        _annotationView.draggable = _draggable;
+        _annotationView.customCalloutView = _calloutView;
+        _annotationView.centerOffset = _centerOffset;
+
+        if (_zIndex) {
+            _annotationView.zIndex = _zIndex;
+        }
+
+        if (_image != nil) {
+            _annotationView.image = _image;
+        }
+
+        [self setActive:_active];
+    }
+    return _annotationView;
+}
+
+- (void)didAddSubview:(UIView *)subview {
+    if ([subview isKindOfClass:[AMapCallout class]]) {
+        _calloutView = [[MACustomCalloutView alloc] initWithCustomView:subview];
+        _annotationView.customCalloutView = _calloutView;
+    } else {
+        _customView = subview;
+        _customView.hidden = YES;
+    }
+}
+
+- (void)lockToScreen:(int)x y:(int)y {
+    _annotation.lockedToScreen = YES;
+    _annotation.lockedScreenPoint = CGPointMake(x, y);
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapMarkerManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapMarkerManager.m
new file mode 100644
index 0000000..78d28d3
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapMarkerManager.m
@@ -0,0 +1,50 @@
+#import <React/RCTUIManager.h>
+#import "AMapMarker.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapMarkerManager : RCTViewManager
+@end
+
+@implementation AMapMarkerManager {
+}
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    return [AMapMarker new];
+}
+
+RCT_EXPORT_VIEW_PROPERTY(coordinate, CLLocationCoordinate2D)
+RCT_EXPORT_VIEW_PROPERTY(centerOffset, CGPoint)
+RCT_EXPORT_VIEW_PROPERTY(title, NSString)
+RCT_EXPORT_VIEW_PROPERTY(description, NSString)
+RCT_EXPORT_VIEW_PROPERTY(active, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(draggable, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(clickDisabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(infoWindowDisabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(zIndex, NSInteger)
+RCT_EXPORT_VIEW_PROPERTY(color, MAPinAnnotationColor)
+RCT_EXPORT_VIEW_PROPERTY(image, NSString)
+
+RCT_EXPORT_VIEW_PROPERTY(onPress, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onInfoWindowPress, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onDragStart, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onDrag, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onDragEnd, RCTBubblingEventBlock)
+
+RCT_EXPORT_METHOD(lockToScreen:(nonnull NSNumber *)reactTag x:(int)x y:(int)y) {
+    [self.bridge.uiManager addUIBlock:^(__unused RCTUIManager *uiManager, NSDictionary<NSNumber *, UIView *> *viewRegistry) {
+        AMapMarker *marker = (AMapMarker *) viewRegistry[reactTag];
+        [marker lockToScreen:x y:y];
+    }];
+}
+
+RCT_EXPORT_METHOD(active:(nonnull NSNumber *)reactTag) {
+    [self.bridge.uiManager addUIBlock:^(__unused RCTUIManager *uiManager, NSDictionary<NSNumber *, UIView *> *viewRegistry) {
+        AMapMarker *marker = (AMapMarker *) viewRegistry[reactTag];
+        marker.active = YES;
+    }];
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPoint.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPoint.h
new file mode 100644
index 0000000..0bc8028
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPoint.h
@@ -0,0 +1,7 @@
+#import <React/RCTComponent.h>
+#import <MAMapKit/MAMapKit.h>
+#import "AMapOverlay.h"
+
+@interface AMapMultiPoint : AMapOverlay <MAMultiPointOverlayRendererDelegate>
+@property(nonatomic, copy) RCTBubblingEventBlock onItemPress;
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPoint.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPoint.m
new file mode 100644
index 0000000..2581f36
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPoint.m
@@ -0,0 +1,38 @@
+#import "AMapMultiPoint.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+
+@implementation AMapMultiPoint {
+    NSArray<MAMultiPointItem *> *_items;
+    MAMultiPointOverlayRenderer *_renderer;
+    MAMultiPointOverlay *_overlay;
+    UIImage *_image;
+}
+
+- (void)setPoints:(NSArray<MAMultiPointItem *> *)points {
+    _items = points;
+}
+
+- (void)setImage:(NSString *)name {
+    _image = [UIImage imageNamed:name];
+}
+
+- (MAOverlayRenderer *)renderer {
+    if (_renderer == nil) {
+        _overlay = [[MAMultiPointOverlay alloc] initWithMultiPointItems:_items];
+        _renderer = [[MAMultiPointOverlayRenderer alloc] initWithMultiPointOverlay:_overlay];
+        _renderer.delegate = self;
+        if (_image != nil) {
+            _renderer.icon = _image;
+        }
+    }
+    return _renderer;
+}
+
+- (void)multiPointOverlayRenderer:(MAMultiPointOverlayRenderer *)renderer didItemTapped:(MAMultiPointItem *)item {
+    self.onItemPress(@{
+            @"index": @([_items indexOfObject:item]),
+    });
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPointManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPointManager.m
new file mode 100644
index 0000000..aae6974
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapMultiPointManager.m
@@ -0,0 +1,23 @@
+#import <MAMapKit/MAMapView.h>
+#import <React/RCTViewManager.h>
+#import "AMapMultiPoint.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapMultiPointManager : RCTViewManager
+@end
+
+@implementation AMapMultiPointManager {
+}
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    return [AMapMultiPoint new];
+}
+
+RCT_EXPORT_VIEW_PROPERTY(points, MAMultiPointItemArray)
+RCT_EXPORT_VIEW_PROPERTY(image, NSString)
+RCT_EXPORT_VIEW_PROPERTY(onItemPress, RCTBubblingEventBlock)
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapOverlay.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapOverlay.h
new file mode 100644
index 0000000..b4934de
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapOverlay.h
@@ -0,0 +1,5 @@
+#import <MAMapKit/MAOverlayRenderer.h>
+
+@interface AMapOverlay : UIView <MAOverlay>
+- (MAOverlayRenderer *)renderer;
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapOverlay.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapOverlay.m
new file mode 100644
index 0000000..6dd5f76
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapOverlay.m
@@ -0,0 +1,10 @@
+#import "AMapOverlay.h"
+
+@implementation AMapOverlay {
+}
+
+- (MAOverlayRenderer *)renderer {
+    return nil;
+}
+
+@end
\ No newline at end of file
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygon.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygon.h
new file mode 100644
index 0000000..09a13aa
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygon.h
@@ -0,0 +1,10 @@
+#import "AMapOverlay.h"
+
+#pragma ide diagnostic ignored "OCUnusedPropertyInspection"
+
+@interface AMapPolygon : AMapOverlay
+
+@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;
+@property(nonatomic, readonly) MAMapRect boundingMapRect;
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygon.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygon.m
new file mode 100644
index 0000000..06b1445
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygon.m
@@ -0,0 +1,58 @@
+#import "AMapPolygon.h"
+#import "Coordinate.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+
+@implementation AMapPolygon {
+    MAPolygon *_polygon;
+    MAPolygonRenderer *_renderer;
+    CGFloat _strokeWidth;
+    UIColor *_strokeColor;
+    UIColor *_fillColor;
+}
+
+- (void)setCoordinates:(NSArray<Coordinate *> *)coordinates {
+    CLLocationCoordinate2D coords[coordinates.count];
+    for (NSUInteger i = 0; i < coordinates.count; i++) {
+        coords[i] = coordinates[i].coordinate;
+    }
+    _polygon = [MAPolygon polygonWithCoordinates:coords count:coordinates.count];
+}
+
+- (void)setStrokeWidth:(CGFloat)strokeWidth {
+    _strokeWidth = strokeWidth;
+    _renderer.lineWidth = strokeWidth;
+}
+
+- (void)setStrokeColor:(UIColor *)strokeColor {
+    _strokeColor = strokeColor;
+    _renderer.strokeColor = strokeColor;
+}
+
+- (void)setFillColor:(UIColor *)fillColor {
+    _fillColor = fillColor;
+    _renderer.fillColor = fillColor;
+}
+
+- (CLLocationCoordinate2D)coordinate {
+    return _polygon.coordinate;
+}
+
+- (MAMapRect)boundingMapRect {
+    return _polygon.boundingMapRect;
+}
+
+- (MAOverlayRenderer *)renderer {
+    if (_strokeColor == nil) {
+        _strokeColor = UIColor.blackColor;
+    }
+    if (_renderer == nil) {
+        _renderer = [[MAPolygonRenderer alloc] initWithPolygon:_polygon];
+        _renderer.lineWidth = _strokeWidth;
+        _renderer.strokeColor = _strokeColor;
+        _renderer.fillColor = _fillColor;
+    }
+    return _renderer;
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygonManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygonManager.m
new file mode 100644
index 0000000..dd36294
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolygonManager.m
@@ -0,0 +1,24 @@
+#import <MAMapKit/MAMapView.h>
+#import <React/RCTViewManager.h>
+#import "AMapPolygon.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapPolygonManager : RCTViewManager
+@end
+
+@implementation AMapPolygonManager {
+}
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    return [AMapPolygon new];
+}
+
+RCT_EXPORT_VIEW_PROPERTY(coordinates, CoordinateArray)
+RCT_EXPORT_VIEW_PROPERTY(strokeWidth, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(strokeColor, UIColor)
+RCT_EXPORT_VIEW_PROPERTY(fillColor, UIColor)
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapPolyline.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolyline.h
new file mode 100644
index 0000000..b72014c
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolyline.h
@@ -0,0 +1,11 @@
+#import <MAMapKit/MAMapKit.h>
+#import "AMapOverlay.h"
+
+#pragma ide diagnostic ignored "OCUnusedPropertyInspection"
+
+@interface AMapPolyline : AMapOverlay
+
+@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;
+@property(nonatomic, readonly) MAMapRect boundingMapRect;
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapPolyline.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolyline.m
new file mode 100644
index 0000000..de2d8bc
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolyline.m
@@ -0,0 +1,108 @@
+#import "AMapPolyline.h"
+#import "Coordinate.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+
+@implementation AMapPolyline {
+    MAMultiPolyline *_polyline;
+    MAMultiColoredPolylineRenderer *_renderer;
+
+    CGFloat _width;
+    UIColor *_color;
+    NSArray *_colors;
+    BOOL _dashed;
+    BOOL _gradient;
+}
+
+- (instancetype)init {
+    if (self = [super init]) {
+        _polyline = [MAMultiPolyline polylineWithCoordinates:nil count:0 drawStyleIndexes:nil];
+    }
+
+    return self;
+}
+
+- (void)setCoordinates:(NSArray<Coordinate *> *)coordinates {
+    CLLocationCoordinate2D coords[coordinates.count];
+    for (NSUInteger i = 0; i < coordinates.count; i++) {
+        coords[i] = coordinates[i].coordinate;
+    }
+
+    [_polyline setPolylineWithCoordinates:coords count:coordinates.count];
+}
+
+- (void)setWidth:(CGFloat)width {
+    _width = width;
+    _renderer.lineWidth = width;
+}
+
+- (void)setColor:(UIColor *)color {
+    _color = color;
+    _renderer.strokeColor = color;
+}
+
+- (void)setColors:(NSArray *)colors {
+    // colors -> strokeColors
+    // egg: [black, black, black, white, white, black] => [black, white, black] + [3, 5]
+    NSMutableArray *strokeColors = [[NSMutableArray alloc] init];
+    NSMutableArray *indexs = [[NSMutableArray alloc] init];
+
+    if (colors.count > 0) {
+        UIColor *lastColor = [colors firstObject];
+        [strokeColors addObject:lastColor];
+
+        for (NSUInteger index = 1; index < colors.count; index++) {
+            UIColor *color = colors[index];
+            if (![color isEqual:lastColor]) {
+                [strokeColors addObject:color];
+                [indexs addObject:@(index)]; // index is the NEXT color
+                lastColor = color;
+            }
+        }
+
+        if (strokeColors.count == 1) {
+            [indexs addObject:@(colors.count)];
+        }
+    }
+
+    _colors = strokeColors;
+    _renderer.strokeColors = strokeColors;
+
+    // change polyline
+    [_polyline setDrawStyleIndexes:@[@(1), @(2)]];
+}
+
+- (void)setDashed:(BOOL)dashed {
+    _dashed = dashed;
+    _renderer.lineDash = dashed;
+}
+
+- (void)setGradient:(BOOL)gradient {
+    _gradient = gradient;
+    _renderer.gradient = gradient;
+}
+
+- (CLLocationCoordinate2D)coordinate {
+    return _polyline.coordinate;
+}
+
+- (MAMapRect)boundingMapRect {
+    return _polyline.boundingMapRect;
+}
+
+- (MAOverlayRenderer *)renderer {
+    if (_color == nil) {
+        _color = UIColor.blackColor;
+    }
+    if (_renderer == nil) {
+        _renderer = [[MAMultiColoredPolylineRenderer alloc] initWithMultiPolyline:_polyline];
+        _renderer.lineWidth = _width;
+        _renderer.strokeColor = _color;
+        _renderer.strokeColors = _colors;
+        _renderer.lineDash = _dashed;
+        _renderer.gradient = _gradient;
+    }
+    return _renderer;
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapPolylineManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolylineManager.m
new file mode 100644
index 0000000..7099c1c
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapPolylineManager.m
@@ -0,0 +1,26 @@
+#import <MAMapKit/MAMapView.h>
+#import <React/RCTViewManager.h>
+#import "AMapPolyline.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+
+@interface AMapPolylineManager : RCTViewManager
+@end
+
+@implementation AMapPolylineManager {
+}
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    return [AMapPolyline new];
+}
+
+RCT_EXPORT_VIEW_PROPERTY(coordinates, CoordinateArray)
+RCT_EXPORT_VIEW_PROPERTY(width, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(color, UIColor)
+RCT_EXPORT_VIEW_PROPERTY(dashed, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(gradient, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(colors, UIColorArray)
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapView.h b/node_modules/react-native-amap3d/lib/ios/maps/AMapView.h
new file mode 100644
index 0000000..0d73e2e
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapView.h
@@ -0,0 +1,18 @@
+#import <MAMapKit/MAMapKit.h>
+
+@class AMapMarker;
+
+@interface AMapView : MAMapView
+
+@property(nonatomic, copy) RCTBubblingEventBlock onLocation;
+@property(nonatomic, copy) RCTBubblingEventBlock onClick;
+@property(nonatomic, copy) RCTBubblingEventBlock onLongClick;
+@property(nonatomic, copy) RCTBubblingEventBlock onStatusChange;
+@property(nonatomic, copy) RCTBubblingEventBlock onStatusChangeComplete;
+
+@property(nonatomic) BOOL loaded;
+@property(nonatomic) MACoordinateRegion initialRegion;
+
+- (AMapMarker *)getMarker:(id <MAAnnotation>)annotation;
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapView.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapView.m
new file mode 100644
index 0000000..66e4108
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapView.m
@@ -0,0 +1,116 @@
+#import <React/UIView+React.h>
+#import "AMapView.h"
+#import "AMapMarker.h"
+#import "AMapPolyline.h"
+#import "LocationStyle.h"
+
+#pragma ide diagnostic ignored "OCUnusedMethodInspection"
+
+@implementation AMapView {
+    NSMutableDictionary *_markers;
+    MAUserLocationRepresentation *_locationStyle;
+    BOOL _isBoundsInit;
+}
+
+- (instancetype)init {
+    _isBoundsInit = NO;
+    _markers = [NSMutableDictionary new];
+    self = [super init];
+    return self;
+}
+
+- (void)setFrame:(CGRect)frame {
+    if (!_isBoundsInit) {
+        [super setFrame:frame];
+    }
+}
+
+- (void)setBounds:(CGRect)bounds {
+    _isBoundsInit = YES;
+    [super setBounds:bounds];
+}
+
+- (void)setShowsTraffic:(BOOL)shows {
+    self.showTraffic = shows;
+}
+
+- (void)setTiltEnabled:(BOOL)enabled {
+    self.rotateCameraEnabled = enabled;
+}
+
+- (void)setLocationEnabled:(BOOL)enabled {
+    self.showsUserLocation = enabled;
+}
+
+- (void)setShowCompass:(BOOL)enabled {
+    self.showsCompass = enabled;
+}
+
+- (void)setCoordinate:(CLLocationCoordinate2D)coordinate {
+    self.centerCoordinate = coordinate;
+}
+
+- (void)setTilt:(CGFloat)degree {
+    self.cameraDegree = degree;
+}
+
+- (void)setRotation:(CGFloat)degree {
+    self.rotationDegree = degree;
+}
+
+- (void)setLocationStyle:(LocationStyle *)locationStyle {
+    if (!_locationStyle) {
+        _locationStyle = [MAUserLocationRepresentation new];
+    }
+    _locationStyle.fillColor = locationStyle.fillColor;
+    _locationStyle.strokeColor = locationStyle.strokeColor;
+    _locationStyle.lineWidth = locationStyle.strokeWidth;
+    _locationStyle.image = locationStyle.image;
+    _locationStyle.locationDotBgColor = locationStyle.locationDotBgColor;
+    _locationStyle.locationDotFillColor = locationStyle.locationDotFillColor;
+    _locationStyle.enablePulseAnnimation = locationStyle.enablePulseAnnimation;
+    _locationStyle.showsHeadingIndicator = locationStyle.showsHeadingIndicator;
+    _locationStyle.showsAccuracyRing = locationStyle.showsAccuracyRing;
+
+    [self updateUserLocationRepresentation:_locationStyle];
+}
+
+// 如果在地图未加载的时候调用改方法，需要先将 region 存起来，等地图加载完成再设置
+- (void)setRegion:(MACoordinateRegion)region {
+    if (self.loaded) {
+        super.region = region;
+    } else {
+        self.initialRegion = region;
+    }
+}
+
+- (void)didAddSubview:(UIView *)subview {
+    if ([subview isKindOfClass:[AMapMarker class]]) {
+        AMapMarker *marker = (AMapMarker *) subview;
+        marker.mapView = self;
+        _markers[[@(marker.annotation.hash) stringValue]] = marker;
+        dispatch_async(dispatch_get_main_queue(), ^{
+            [self addAnnotation:marker.annotation];
+        });
+    }
+    if ([subview isKindOfClass:[AMapOverlay class]]) {
+        [self addOverlay:(id <MAOverlay>) subview];
+    }
+}
+
+- (void)removeReactSubview:(id <RCTComponent>)subview {
+    [super removeReactSubview:subview];
+    if ([subview isKindOfClass:[AMapMarker class]]) {
+        AMapMarker *marker = (AMapMarker *) subview;
+        [self removeAnnotation:marker.annotation];
+    }
+    if ([subview isKindOfClass:[AMapOverlay class]]) {
+        [self removeOverlay:(id <MAOverlay>) subview];
+    }
+}
+
+- (AMapMarker *)getMarker:(id <MAAnnotation>)annotation {
+    return _markers[[@(annotation.hash) stringValue]];
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/maps/AMapViewManager.m b/node_modules/react-native-amap3d/lib/ios/maps/AMapViewManager.m
new file mode 100644
index 0000000..dd73672
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/ios/maps/AMapViewManager.m
@@ -0,0 +1,202 @@
+#import <React/RCTUIManager.h>
+#import "AMapView.h"
+#import "AMapMarker.h"
+#import "AMapOverlay.h"
+
+#pragma ide diagnostic ignored "OCUnusedClassInspection"
+#pragma ide diagnostic ignored "-Woverriding-method-mismatch"
+
+@interface AMapViewManager : RCTViewManager <MAMapViewDelegate>
+@end
+
+@implementation AMapViewManager
+
+RCT_EXPORT_MODULE()
+
+- (UIView *)view {
+    AMapView *mapView = [AMapView new];
+    mapView.centerCoordinate = CLLocationCoordinate2DMake(39.9242, 116.3979);
+    mapView.zoomLevel = 10;
+    mapView.delegate = self;
+    return mapView;
+}
+
+RCT_EXPORT_VIEW_PROPERTY(locationEnabled, BOOL)
+RCT_REMAP_VIEW_PROPERTY(showsCompass, showCompass, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(showsScale, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(showsIndoorMap, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(showsLabels, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(showsTraffic, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(showsBuildings, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(zoomLevel, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(maxZoomLevel, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(minZoomLevel, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(zoomEnabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(scrollEnabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(rotateEnabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(tiltEnabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(mapType, MAMapType)
+RCT_REMAP_VIEW_PROPERTY(center, coordinate, CLLocationCoordinate2D)
+RCT_EXPORT_VIEW_PROPERTY(limitRegion, MACoordinateRegion)
+RCT_EXPORT_VIEW_PROPERTY(region, MACoordinateRegion)
+RCT_EXPORT_VIEW_PROPERTY(tilt, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(rotation, CGFloat)
+RCT_EXPORT_VIEW_PROPERTY(distanceFilter, CLLocationDistance)
+RCT_EXPORT_VIEW_PROPERTY(locationStyle, LocationStyle)
+RCT_EXPORT_VIEW_PROPERTY(mapLanguage, NSNumber)
+
+RCT_EXPORT_VIEW_PROPERTY(onClick, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onLongClick, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onLocation, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onStatusChange, RCTBubblingEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onStatusChangeComplete, RCTBubblingEventBlock)
+
+RCT_EXPORT_METHOD(setStatus:(nonnull NSNumber *)reactTag params:(NSDictionary *)params duration:(NSInteger)duration) {
+    [self.bridge.uiManager addUIBlock:^(__unused RCTUIManager *uiManager, NSDictionary<NSNumber *, UIView *> *viewRegistry) {
+        AMapView *mapView = (AMapView *) viewRegistry[reactTag];
+        MAMapStatus *mapStatus = mapView.getMapStatus;
+        if (params[@"zoomLevel"]) {
+            mapStatus.zoomLevel = [params[@"zoomLevel"] floatValue];
+        }
+        if (params[@"center"]) {
+            NSDictionary *coordinate = params[@"center"];
+            mapStatus.centerCoordinate = CLLocationCoordinate2DMake(
+                    [coordinate[@"latitude"] doubleValue],
+                    [coordinate[@"longitude"] doubleValue]);
+        }
+        if (params[@"tilt"]) {
+            mapStatus.cameraDegree = [params[@"tilt"] floatValue];
+        }
+        if (params[@"rotation"]) {
+            mapStatus.rotationDegree = [params[@"rotation"] floatValue];
+        }
+        [mapView setMapStatus:mapStatus animated:YES duration:duration / 1000.0];
+    }];
+}
+
+- (void)mapView:(AMapView *)mapView didSingleTappedAtCoordinate:(CLLocationCoordinate2D)coordinate {
+    if (mapView.onClick) {
+        mapView.onClick(@{
+                @"latitude": @(coordinate.latitude),
+                @"longitude": @(coordinate.longitude),
+        });
+    }
+}
+
+- (void)mapView:(AMapView *)mapView didLongPressedAtCoordinate:(CLLocationCoordinate2D)coordinate {
+    if (mapView.onLongClick) {
+        mapView.onLongClick(@{
+                @"latitude": @(coordinate.latitude),
+                @"longitude": @(coordinate.longitude),
+        });
+    }
+}
+
+- (void)mapView:(AMapView *)mapView didUpdateUserLocation:(MAUserLocation *)userLocation updatingLocation:(BOOL)updatingLocation {
+    if (mapView.onLocation) {
+        mapView.onLocation(@{
+                @"latitude": @(userLocation.coordinate.latitude),
+                @"longitude": @(userLocation.coordinate.longitude),
+                @"accuracy": @((userLocation.location.horizontalAccuracy + userLocation.location.verticalAccuracy) / 2),
+                @"altitude": @(userLocation.location.altitude),
+                @"speed": @(userLocation.location.speed),
+                @"timestamp": @(userLocation.location.timestamp.timeIntervalSince1970),
+        });
+    }
+}
+
+- (MAAnnotationView *)mapView:(AMapView *)mapView viewForAnnotation:(id <MAAnnotation>)annotation {
+    if ([annotation isKindOfClass:[MAPointAnnotation class]]) {
+        AMapMarker *marker = [mapView getMarker:annotation];
+        return marker.annotationView;
+    }
+    return nil;
+}
+
+- (MAOverlayRenderer *)mapView:(MAMapView *)mapView rendererForOverlay:(id <MAOverlay>)overlay {
+    if ([overlay isKindOfClass:[AMapOverlay class]]) {
+        return ((AMapOverlay *) overlay).renderer;
+    }
+    return nil;
+}
+
+- (void)mapView:(AMapView *)mapView didSelectAnnotationView:(MAAnnotationView *)view {
+    AMapMarker *marker = [mapView getMarker:view.annotation];
+    if (marker.onPress) {
+        marker.onPress(nil);
+    }
+}
+
+- (void)mapView:(AMapView *)mapView didAnnotationViewCalloutTapped:(MAAnnotationView *)view {
+    AMapMarker *marker = [mapView getMarker:view.annotation];
+    if (marker.onInfoWindowPress) {
+        marker.onInfoWindowPress(nil);
+    }
+}
+
+- (void)mapView:(AMapView *)mapView annotationView:(MAAnnotationView *)view didChangeDragState:(MAAnnotationViewDragState)newState
+   fromOldState:(MAAnnotationViewDragState)oldState {
+    AMapMarker *marker = [mapView getMarker:view.annotation];
+    if (newState == MAAnnotationViewDragStateStarting && marker.onDragStart) {
+        marker.onDragStart(nil);
+    }
+    if (newState == MAAnnotationViewDragStateDragging) {
+        if (marker.onDrag) {
+            marker.onDrag(nil);
+        }
+    }
+    if (newState == MAAnnotationViewDragStateEnding && marker.onDragEnd) {
+        marker.onDragEnd(@{
+                @"latitude": @(marker.annotation.coordinate.latitude),
+                @"longitude": @(marker.annotation.coordinate.longitude),
+        });
+    }
+}
+
+- (void)mapViewRegionChanged:(AMapView *)mapView {
+    if (mapView.onStatusChange) {
+        MAMapStatus *status = mapView.getMapStatus;
+        mapView.onStatusChange(@{
+                @"center": @{
+                    @"latitude": @(status.centerCoordinate.latitude),
+                    @"longitude": @(status.centerCoordinate.longitude),
+                },
+                @"zoomLevel": @(status.zoomLevel),
+                @"tilt": @(status.cameraDegree),
+                @"rotation": @(status.rotationDegree),
+        });
+    }
+}
+
+- (void)mapView:(AMapView *)mapView regionDidChangeAnimated:(BOOL)animated {
+    if (mapView.onStatusChangeComplete) {
+        MAMapStatus *status = mapView.getMapStatus;
+        mapView.onStatusChangeComplete(@{
+                @"center": @{
+                    @"latitude": @(status.centerCoordinate.latitude),
+                    @"longitude": @(status.centerCoordinate.longitude),
+                },
+                @"region": @{
+                    @"latitude": @(status.centerCoordinate.latitude),
+                    @"longitude": @(status.centerCoordinate.longitude),
+                    @"latitudeDelta": @(mapView.region.span.latitudeDelta),
+                    @"longitudeDelta": @(mapView.region.span.longitudeDelta),
+                },
+                @"zoomLevel": @(status.zoomLevel),
+                @"tilt": @(status.cameraDegree),
+                @"rotation": @(status.rotationDegree),
+        });
+    }
+}
+
+- (void)mapInitComplete:(AMapView *)mapView {
+    mapView.loaded = YES;
+
+    // struct 里的值会被初始化为 0，这里以此作为条件，判断 initialRegion 是否被设置过
+    // 但实际上经度为 0 是一个合法的坐标，只是考虑到高德地图只在中国使用，就这样吧
+    if (mapView.initialRegion.center.latitude != 0) {
+        mapView.region = mapView.initialRegion;
+    }
+}
+
+@end
diff --git a/node_modules/react-native-amap3d/lib/ios/react-native-amap3d.podspec b/node_modules/react-native-amap3d/lib/ios/react-native-amap3d.podspec
index 9ded580..4b8a5b5 100644
--- a/node_modules/react-native-amap3d/lib/ios/react-native-amap3d.podspec
+++ b/node_modules/react-native-amap3d/lib/ios/react-native-amap3d.podspec
@@ -1,20 +1,20 @@
-require "json"
+require 'json'
 
-package = JSON.parse(File.read(File.join(__dir__, "../../package.json")))
+package = JSON.parse(File.read(File.join(__dir__, '../../package.json')))
 
 Pod::Spec.new do |s|
-  s.name         = "react-native-amap3d"
-  s.version      = package["version"]
-  s.summary      = package["description"]
-  s.homepage     = package["homepage"]
-  s.license      = package["license"]
-  s.authors      = package["author"]
+  s.name         = package['name']
+  s.version      = package['version']
+  s.summary      = package['description']
 
-  s.platforms    = { :ios => "10.0" }
-  s.source       = { :git => "https://github.com/qiuxiang/react-native-amap3d.git", :tag => "#{s.version}" }
+  s.authors      = { "Qiu Xiang" => "i@7c00.cc" }
+  s.homepage     = package['repository']['url']
+  s.license      = package['license']
+  s.platform     = :ios, "9.0"
 
-  s.source_files = "**/*.{h,m,mm,swift}"
+  s.source       = { :git => package['repository']['url'] }
+  s.source_files = '**/*.{h,m}'
 
-  s.dependency "React-Core"
-  s.dependency 'AMap3DMap', "~> 8.0.1"
+  s.dependency 'React'
+  s.dependency 'AMap3DMap', "~> 7.9.0"
 end
diff --git a/node_modules/react-native-amap3d/lib/js/index.d.ts b/node_modules/react-native-amap3d/lib/js/index.d.ts
new file mode 100644
index 0000000..be31a78
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/index.d.ts
@@ -0,0 +1,3 @@
+export { default as MapView } from "./map-view";
+export { default as Offline } from "./offline";
+export * from "./types";
diff --git a/node_modules/react-native-amap3d/lib/js/index.js b/node_modules/react-native-amap3d/lib/js/index.js
new file mode 100644
index 0000000..ea56cb9
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/index.js
@@ -0,0 +1,10 @@
+"use strict";
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+exports.__esModule = true;
+var map_view_1 = require("./map-view");
+exports.MapView = map_view_1["default"];
+var offline_1 = require("./offline");
+exports.Offline = offline_1["default"];
+__export(require("./types"));
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/circle.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/circle.d.ts
new file mode 100644
index 0000000..cd0db79
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/circle.d.ts
@@ -0,0 +1,29 @@
+import { LatLng } from "../types";
+export interface CircleProps {
+    /**
+     * 圆点坐标
+     */
+    coordinate: LatLng;
+    /**
+     * 半径（米）
+     */
+    radius: number;
+    /**
+     * 边线宽度
+     */
+    strokeWidth?: number;
+    /**
+     * 边线颜色
+     */
+    strokeColor?: string;
+    /**
+     * 填充颜色
+     */
+    fillColor?: string;
+    /**
+     * 层级
+     */
+    zIndex?: number;
+}
+declare const _default: any;
+export default _default;
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/circle.js b/node_modules/react-native-amap3d/lib/js/map-view/circle.js
new file mode 100644
index 0000000..d093ea0
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/circle.js
@@ -0,0 +1,20 @@
+"use strict";
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var PropTypes = require("prop-types");
+var react_native_1 = require("react-native");
+var prop_types_1 = require("../prop-types");
+// @ts-ignore
+exports["default"] = react_native_1.requireNativeComponent("AMapCircle", {
+    propTypes: __assign({}, react_native_1.ViewPropTypes, { coordinate: prop_types_1.LatLngPropType.isRequired, radius: PropTypes.number.isRequired, strokeWidth: PropTypes.number, strokeColor: react_native_1.ColorPropType, fillColor: react_native_1.ColorPropType, zIndex: PropTypes.number })
+});
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/component.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/component.d.ts
new file mode 100644
index 0000000..963da8d
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/component.d.ts
@@ -0,0 +1,22 @@
+/**
+ * Base component, contains some utils
+ */
+import { PureComponent } from "react";
+/**
+ * @ignore
+ */
+export default class Component<P> extends PureComponent<P> {
+    props: P;
+    /**
+     * Must be defined in subclass if need to call native component method
+     */
+    nativeComponent: string;
+    /**
+     * Call native method
+     */
+    call(name: string, params?: any[]): void;
+    /**
+     * Generate event handlers
+     */
+    handlers: (events: string[]) => {};
+}
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/component.js b/node_modules/react-native-amap3d/lib/js/map-view/component.js
new file mode 100644
index 0000000..03cb261
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/component.js
@@ -0,0 +1,57 @@
+"use strict";
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    };
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+exports.__esModule = true;
+/**
+ * Base component, contains some utils
+ */
+var react_1 = require("react");
+var react_native_1 = require("react-native");
+/**
+ * @ignore
+ */
+var Component = /** @class */ (function (_super) {
+    __extends(Component, _super);
+    function Component() {
+        var _this = _super !== null && _super.apply(this, arguments) || this;
+        /**
+         * Generate event handlers
+         */
+        _this.handlers = function (events) {
+            return events.reduce(function (handlers, name) {
+                var handler = _this.props[name];
+                if (handler) {
+                    if (react_native_1.Platform.OS === "android") {
+                        name = name.replace(/^on/, "onAMap");
+                    }
+                    handlers[name] = function (event) { return handler(event.nativeEvent); };
+                }
+                return handlers;
+            }, {});
+        };
+        return _this;
+    }
+    /**
+     * Call native method
+     */
+    Component.prototype.call = function (name, params) {
+        var handle = react_native_1.findNodeHandle(this);
+        if (handle) {
+            var command = react_native_1.UIManager.getViewManagerConfig(this.nativeComponent).Commands[name];
+            react_native_1.UIManager.dispatchViewManagerCommand(handle, command, params);
+        }
+    };
+    return Component;
+}(react_1.PureComponent));
+exports["default"] = Component;
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/heat-map.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/heat-map.d.ts
new file mode 100644
index 0000000..b546168
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/heat-map.d.ts
@@ -0,0 +1,17 @@
+import { LatLng } from "../types";
+export interface HeatMapProps {
+    /**
+     * 节点坐标
+     */
+    coordinates: LatLng[];
+    /**
+     * 半径（米）
+     */
+    radius?: number;
+    /**
+     * 透明度
+     */
+    opacity?: number;
+}
+declare const _default: any;
+export default _default;
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/heat-map.js b/node_modules/react-native-amap3d/lib/js/map-view/heat-map.js
new file mode 100644
index 0000000..7ead82b
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/heat-map.js
@@ -0,0 +1,32 @@
+"use strict";
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var PropTypes = require("prop-types");
+var react_native_1 = require("react-native");
+var prop_types_1 = require("../prop-types");
+// @ts-ignore
+exports["default"] = react_native_1.requireNativeComponent("AMapHeatMap", {
+    propTypes: __assign({}, react_native_1.ViewPropTypes, { 
+        /**
+         * 节点坐标
+         */
+        coordinates: PropTypes.arrayOf(prop_types_1.LatLngPropType).isRequired, 
+        /**
+         * 半径（米）
+         */
+        radius: PropTypes.number, 
+        /**
+         * 透明度
+         */
+        opacity: PropTypes.number })
+});
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/index.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/index.d.ts
new file mode 100644
index 0000000..3f2e7a2
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/index.d.ts
@@ -0,0 +1,163 @@
+/// <reference types="react" />
+import { MapStatus, MapType, Region, LatLng, Location } from "../types";
+import Component from "./component";
+import Marker from "./marker";
+import Polyline from "./polyline";
+import MultiPoint from "./multi-point";
+export interface MapViewProps {
+    /**
+     * 地图类型
+     */
+    mapType?: MapType;
+    /**
+     * 地图中心
+     */
+    center?: LatLng;
+    /**
+     * 地图显示区域
+     */
+    region?: Region;
+    /**
+     * 缩放级别
+     */
+    zoomLevel?: number;
+    /**
+     * 倾斜角度，取值范围 [0, 60]
+     */
+    rotation?: number;
+    /**
+     * 倾斜角度
+     */
+    tilt?: number;
+    /**
+     * 是否启用定位
+     */
+    locationEnabled?: boolean;
+    /**
+     * 定位间隔(ms)，默认 2000
+     *
+     * @platform android
+     */
+    locationInterval?: number;
+    /**
+     * 定位的最小更新距离
+     *
+     * @platform ios
+     */
+    distanceFilter?: number;
+    /**
+     * 是否显示室内地图
+     */
+    showsIndoorMap?: boolean;
+    /**
+     * 是否显示室内地图楼层切换控件
+     *
+     * TODO: 似乎并不能正常显示
+     */
+    showsIndoorSwitch?: boolean;
+    /**
+     * 是否显示3D建筑
+     */
+    showsBuildings?: boolean;
+    /**
+     * 是否显示文本标签
+     */
+    showsLabels?: boolean;
+    /**
+     * 是否显示指南针
+     */
+    showsCompass?: boolean;
+    /**
+     * 是否显示放大缩小按钮
+     *
+     * @platform android
+     */
+    showsZoomControls?: boolean;
+    /**
+     * 是否显示比例尺
+     */
+    showsScale?: boolean;
+    /**
+     * 是否显示定位按钮
+     *
+     * @platform android
+     */
+    showsLocationButton?: boolean;
+    /**
+     * 是否显示路况
+     */
+    showsTraffic?: boolean;
+    /**
+     * 最大缩放级别
+     */
+    maxZoomLevel?: number;
+    /**
+     * 最小缩放级别
+     */
+    minZoomLevel?: number;
+    /**
+     * 限制地图只能显示某个矩形区域
+     */
+    limitRegion?: Region;
+    /**
+     * 是否启用缩放手势，用于放大缩小
+     */
+    zoomEnabled?: boolean;
+    /**
+     * 是否启用滑动手势，用于平移
+     */
+    scrollEnabled?: boolean;
+    /**
+     * 是否启用旋转手势，用于调整方向
+     */
+    rotateEnabled?: boolean;
+    /**
+     * 是否启用倾斜手势，用于改变视角
+     */
+    tiltEnabled?: boolean;
+    /**
+     * 点击事件
+     */
+    onClick?: (coordnate: LatLng) => void;
+    /**
+     * 长按事件
+     */
+    onLongClick?: (coordnate: LatLng) => void;
+    /**
+     * 地图状态改变事件，在动画结束后触发
+     */
+    onStatusChangeComplete?: (status: MapStatus) => void;
+    /**
+     * 定位事件
+     */
+    onLocation?: (location: Location) => void;
+    /**
+     * 动画取消事件
+     */
+    onAnimateCancel?: () => void;
+    /**
+     * 动画完成事件
+     */
+    onAnimateFinish?: () => void;
+}
+/**
+ * @ignore
+ */
+export default class MapView extends Component<MapViewProps> {
+    static propTypes: any;
+    nativeComponent: string;
+    /**
+     * 设置地图状态（坐标、缩放级别、倾斜度、旋转角度），支持动画过度
+     *
+     * @param status
+     * @param duration
+     */
+    setStatus(status: MapStatus, duration?: number): void;
+    render(): JSX.Element;
+    static Marker: typeof Marker;
+    static Polyline: typeof Polyline;
+    static Polygon: any;
+    static Circle: any;
+    static HeatMap: any;
+    static MultiPoint: typeof MultiPoint;
+}
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/index.js b/node_modules/react-native-amap3d/lib/js/map-view/index.js
new file mode 100644
index 0000000..6088978
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/index.js
@@ -0,0 +1,82 @@
+"use strict";
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    };
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var React = require("react");
+var prop_types_1 = require("prop-types");
+var react_native_1 = require("react-native");
+var prop_types_2 = require("../prop-types");
+var component_1 = require("./component");
+var marker_1 = require("./marker");
+var polyline_1 = require("./polyline");
+var polygon_1 = require("./polygon");
+var circle_1 = require("./circle");
+var heat_map_1 = require("./heat-map");
+var multi_point_1 = require("./multi-point");
+var events = [
+    "onClick",
+    "onLongClick",
+    "onStatusChange",
+    "onStatusChangeComplete",
+    "onLocation",
+    "onAnimateCancel",
+    "onAnimateFinish"
+];
+/**
+ * @ignore
+ */
+var MapView = /** @class */ (function (_super) {
+    __extends(MapView, _super);
+    function MapView() {
+        var _this = _super !== null && _super.apply(this, arguments) || this;
+        _this.nativeComponent = "AMapView";
+        return _this;
+    }
+    /**
+     * 设置地图状态（坐标、缩放级别、倾斜度、旋转角度），支持动画过度
+     *
+     * @param status
+     * @param duration
+     */
+    MapView.prototype.setStatus = function (status, duration) {
+        if (duration === void 0) { duration = 0; }
+        this.call("setStatus", [status, duration]);
+    };
+    MapView.prototype.render = function () {
+        var props = __assign({}, this.props, this.handlers(events));
+        return <AMapView {...props}/>;
+    };
+    MapView.propTypes = __assign({}, react_native_1.ViewPropTypes, prop_types_2.mapEventsPropType(events), { mapType: prop_types_1.number, locationEnabled: prop_types_1.bool, locationInterval: prop_types_1.number, locationStyle: prop_types_2.LocationStylePropType, distanceFilter: prop_types_1.number, showsIndoorMap: prop_types_1.bool, showsIndoorSwitch: prop_types_1.bool, showsBuildings: prop_types_1.bool, showsLabels: prop_types_1.bool, showsCompass: prop_types_1.bool, showsZoomControls: prop_types_1.bool, showsScale: prop_types_1.bool, showsLocationButton: prop_types_1.bool, showsTraffic: prop_types_1.bool, maxZoomLevel: prop_types_1.number, minZoomLevel: prop_types_1.number, zoomLevel: prop_types_1.number, center: prop_types_2.LatLngPropType, region: prop_types_2.RegionPropType, limitRegion: prop_types_2.RegionPropType, tilt: prop_types_1.number, rotation: prop_types_1.number, zoomEnabled: prop_types_1.bool, scrollEnabled: prop_types_1.bool, rotateEnabled: prop_types_1.bool, tiltEnabled: prop_types_1.bool });
+    MapView.Marker = marker_1["default"];
+    MapView.Polyline = polyline_1["default"];
+    MapView.Polygon = polygon_1["default"];
+    MapView.Circle = circle_1["default"];
+    MapView.HeatMap = heat_map_1["default"];
+    MapView.MultiPoint = multi_point_1["default"];
+    return MapView;
+}(component_1["default"]));
+exports["default"] = MapView;
+// @ts-ignore
+var AMapView = react_native_1.requireNativeComponent("AMapView", MapView);
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/marker.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/marker.d.ts
new file mode 100644
index 0000000..47f5852
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/marker.d.ts
@@ -0,0 +1,112 @@
+import * as React from "react";
+import { LatLng, Point } from "../types";
+import Component from "./component";
+export interface MarkerProps {
+    /**
+     * 坐标
+     */
+    coordinate: LatLng;
+    /**
+     * 标题，作为默认的选中弹出显示
+     */
+    title?: string;
+    /**
+     * 描述，显示在标题下方
+     */
+    description?: string;
+    /**
+     * 默认图标颜色
+     */
+    color?: string;
+    /**
+     * 自定义图标
+     */
+    icon?: () => React.ReactElement;
+    /**
+     * 自定义图片，对应原生图片名称
+     */
+    image?: string;
+    /**
+     * 透明度 [0, 1]
+     */
+    opacity?: number;
+    /**
+     * 是否可拖拽
+     */
+    draggable?: boolean;
+    /**
+     * 是否平贴地图
+     */
+    flat?: boolean;
+    /**
+     * 层级
+     */
+    zIndex?: number;
+    /**
+     * 覆盖物锚点比例
+     *
+     * @link http://a.amap.com/lbs/static/unzip/Android_Map_Doc/3D/com/amap/api/maps/model/Marker.html#setAnchor-float-float-
+     * @platform android
+     */
+    anchor?: Point;
+    /**
+     * 覆盖物偏移位置
+     *
+     * @link http://a.amap.com/lbs/static/unzip/iOS_Map_Doc/AMap_iOS_API_Doc_3D/interface_m_a_annotation_view.html#a78f23c1e6a6d92faf12a00877ac278a7
+     * @platform ios
+     */
+    centerOffset?: Point;
+    /**
+     * 是否选中，选中时将显示信息窗体，一个地图只能有一个正在选中的 marker
+     */
+    active?: boolean;
+    /**
+     * 是否禁用点击，默认不禁用
+     */
+    clickDisabled?: boolean;
+    /**
+     * 是否禁用弹出窗口，默认不禁用
+     */
+    infoWindowDisabled?: boolean;
+    /**
+     * 自定义 InfoWindow
+     */
+    children?: React.ReactChild;
+    /**
+     * 点击事件
+     */
+    onPress?: () => void;
+    /**
+     * 拖放开始事件
+     */
+    onDragStart?: () => void;
+    /**
+     * 拖放进行事件，类似于 mousemove，在结束之前会不断调用
+     */
+    onDrag?: () => void;
+    /**
+     * 拖放结束事件，最终坐标将传入参数
+     */
+    onDragEnd?: (coordinate: LatLng) => void;
+    /**
+     * 信息窗体点击事件
+     *
+     * 注意，对于自定义信息窗体，该事件是无效的
+     */
+    onInfoWindowPress?: () => void;
+}
+/**
+ * @ignore
+ */
+export default class Marker extends Component<MarkerProps> {
+    static propTypes: any;
+    nativeComponent: string;
+    icon: any;
+    componentDidUpdate(): void;
+    active(): void;
+    update(): void;
+    lockToScreen(x: number, y: number): void;
+    renderCustomMarker(icon: () => React.ReactElement): any;
+    renderInfoWindow(view: React.ReactChild): JSX.Element;
+    render(): JSX.Element;
+}
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/marker.js b/node_modules/react-native-amap3d/lib/js/map-view/marker.js
new file mode 100644
index 0000000..f63f2f3
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/marker.js
@@ -0,0 +1,107 @@
+"use strict";
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    };
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var React = require("react");
+var PropTypes = require("prop-types");
+var react_native_1 = require("react-native");
+var prop_types_1 = require("../prop-types");
+var component_1 = require("./component");
+var style = react_native_1.StyleSheet.create({
+    overlay: {
+        position: "absolute"
+    }
+});
+var events = ["onInfoWindowPress", "onPress", "onDrag", "onDragEnd", "onDragStart"];
+/**
+ * @ignore
+ */
+var Marker = /** @class */ (function (_super) {
+    __extends(Marker, _super);
+    function Marker() {
+        var _this = _super !== null && _super.apply(this, arguments) || this;
+        _this.nativeComponent = "AMapMarker";
+        _this.icon = null;
+        return _this;
+    }
+    Marker.prototype.componentDidUpdate = function () {
+        var _this = this;
+        if (this.icon && react_native_1.Platform.OS === "android") {
+            setTimeout(function () { return _this.call("update"); }, 0);
+        }
+    };
+    Marker.prototype.active = function () {
+        this.call("active");
+    };
+    Marker.prototype.update = function () {
+        this.call("update");
+    };
+    Marker.prototype.lockToScreen = function (x, y) {
+        this.call("lockToScreen", [x, y]);
+    };
+    Marker.prototype.renderCustomMarker = function (icon) {
+        if (icon) {
+            this.icon = <react_native_1.View style={style.overlay}>{icon()}</react_native_1.View>;
+            return this.icon;
+        }
+        return null;
+    };
+    /* eslint-disable class-methods-use-this */
+    Marker.prototype.renderInfoWindow = function (view) {
+        if (view) {
+            // @ts-ignore
+            return <InfoWindow style={style.overlay}>{view}</InfoWindow>;
+        }
+        return null;
+    };
+    Marker.prototype.render = function () {
+        var props = __assign({}, this.props, this.handlers(events));
+        return (<AMapMarker {...props}>
+        {this.renderCustomMarker(this.props.icon)}
+        {this.renderInfoWindow(this.props.children)}
+      </AMapMarker>);
+    };
+    Marker.propTypes = __assign({}, react_native_1.ViewPropTypes, prop_types_1.mapEventsPropType(events), { coordinate: prop_types_1.LatLngPropType.isRequired, title: PropTypes.string, description: PropTypes.string, color: react_native_1.Platform.select({
+            android: PropTypes.oneOf([
+                "azure",
+                "blue",
+                "cyan",
+                "green",
+                "magenta",
+                "orange",
+                "red",
+                "rose",
+                "violet",
+                "yellow",
+            ]),
+            ios: PropTypes.oneOf(["red", "green", "purple"])
+        }), icon: PropTypes.func, image: PropTypes.string, opacity: PropTypes.number, draggable: PropTypes.bool, flat: PropTypes.bool, zIndex: PropTypes.number, anchor: prop_types_1.PointPropType, centerOffset: prop_types_1.PointPropType, active: PropTypes.bool, clickDisabled: PropTypes.bool, infoWindowDisabled: PropTypes.bool });
+    return Marker;
+}(component_1["default"]));
+exports["default"] = Marker;
+// @ts-ignore
+var AMapMarker = react_native_1.requireNativeComponent("AMapMarker", Marker);
+// @ts-ignore
+var InfoWindow = react_native_1.requireNativeComponent("AMapInfoWindow", { propTypes: __assign({}, react_native_1.ViewPropTypes) });
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/multi-point.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/multi-point.d.ts
new file mode 100644
index 0000000..8f15b29
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/multi-point.d.ts
@@ -0,0 +1,96 @@
+/// <reference types="react-native" />
+import * as React from "react";
+import * as PropTypes from "prop-types";
+import { Point } from "../types";
+export interface MultiPointProps {
+    /**
+     * 节点
+     */
+    points?: Point[];
+    /**
+     * 图标，只接受原生图片名字
+     */
+    image?: string;
+    /**
+     * 点击事件
+     */
+    onItemPress?: (item: Point) => void;
+}
+/**
+ * @ignore
+ */
+export default class MultiPoint extends React.PureComponent<MultiPointProps> {
+    static propTypes: {
+        points: PropTypes.Validator<PropTypes.InferProps<{
+            latitude: PropTypes.Validator<number>;
+            longitude: PropTypes.Validator<number>;
+            title: PropTypes.Requireable<string>;
+            subtitle: PropTypes.Requireable<string>;
+        }>[]>;
+        image: PropTypes.Requireable<string>;
+        onItemPress: PropTypes.Requireable<(...args: any[]) => any>;
+        hitSlop?: PropTypes.Validator<import("react-native").Insets>;
+        onLayout?: PropTypes.Validator<(event: import("react-native").NativeSyntheticEvent<{
+            layout: import("react-native").LayoutRectangle;
+        }>) => void>;
+        pointerEvents?: PropTypes.Validator<"auto" | "none" | "box-none" | "box-only">;
+        removeClippedSubviews?: PropTypes.Validator<boolean>;
+        style?: PropTypes.Validator<import("react-native").StyleProp<import("react-native").ViewStyle>>;
+        testID?: PropTypes.Validator<string>;
+        nativeID?: PropTypes.Validator<string>;
+        collapsable?: PropTypes.Validator<boolean>;
+        needsOffscreenAlphaCompositing?: PropTypes.Validator<boolean>;
+        renderToHardwareTextureAndroid?: PropTypes.Validator<boolean>;
+        focusable?: PropTypes.Validator<boolean>;
+        shouldRasterizeIOS?: PropTypes.Validator<boolean>;
+        isTVSelectable?: PropTypes.Validator<boolean>;
+        hasTVPreferredFocus?: PropTypes.Validator<boolean>;
+        tvParallaxProperties?: PropTypes.Validator<import("react-native").TVParallaxProperties>;
+        tvParallaxShiftDistanceX?: PropTypes.Validator<number>;
+        tvParallaxShiftDistanceY?: PropTypes.Validator<number>;
+        tvParallaxTiltAngle?: PropTypes.Validator<number>;
+        tvParallaxMagnification?: PropTypes.Validator<number>;
+        onStartShouldSetResponder?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onMoveShouldSetResponder?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onResponderEnd?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderGrant?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderReject?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderMove?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderRelease?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderStart?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderTerminationRequest?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onResponderTerminate?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onStartShouldSetResponderCapture?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onMoveShouldSetResponderCapture?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onTouchStart?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchMove?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchEnd?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchCancel?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchEndCapture?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        accessible?: PropTypes.Validator<boolean>;
+        accessibilityActions?: PropTypes.Validator<ReadonlyArray<Readonly<{
+            name: string;
+            label?: string;
+        }>>>;
+        accessibilityLabel?: PropTypes.Validator<string>;
+        accessibilityRole?: PropTypes.Validator<import("react-native").AccessibilityRole>;
+        accessibilityState?: PropTypes.Validator<import("react-native").AccessibilityState>;
+        accessibilityHint?: PropTypes.Validator<string>;
+        accessibilityValue?: PropTypes.Validator<import("react-native").AccessibilityValue>;
+        onAccessibilityAction?: PropTypes.Validator<(event: import("react-native").NativeSyntheticEvent<Readonly<{
+            actionName: string;
+        }>>) => void>;
+        accessibilityLiveRegion?: PropTypes.Validator<"none" | "assertive" | "polite">;
+        importantForAccessibility?: PropTypes.Validator<"auto" | "yes" | "no" | "no-hide-descendants">;
+        accessibilityElementsHidden?: PropTypes.Validator<boolean>;
+        accessibilityViewIsModal?: PropTypes.Validator<boolean>;
+        onAccessibilityEscape?: PropTypes.Validator<() => void>;
+        onAccessibilityTap?: PropTypes.Validator<() => void>;
+        onMagicTap?: PropTypes.Validator<() => void>;
+        accessibilityIgnoresInvertColors?: PropTypes.Validator<boolean>;
+    };
+    onItemPress: ({ nativeEvent }: {
+        nativeEvent: any;
+    }) => void;
+    render(): JSX.Element;
+}
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/multi-point.js b/node_modules/react-native-amap3d/lib/js/map-view/multi-point.js
new file mode 100644
index 0000000..a4a9c58
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/multi-point.js
@@ -0,0 +1,60 @@
+"use strict";
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    };
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var React = require("react");
+var PropTypes = require("prop-types");
+var react_native_1 = require("react-native");
+var PointPropType = PropTypes.shape({
+    latitude: PropTypes.number.isRequired,
+    longitude: PropTypes.number.isRequired,
+    title: PropTypes.string,
+    subtitle: PropTypes.string
+});
+/**
+ * @ignore
+ */
+var MultiPoint = /** @class */ (function (_super) {
+    __extends(MultiPoint, _super);
+    function MultiPoint() {
+        var _this = _super !== null && _super.apply(this, arguments) || this;
+        _this.onItemPress = function (_a) {
+            var nativeEvent = _a.nativeEvent;
+            if (_this.props.onItemPress) {
+                _this.props.onItemPress(_this.props.points[nativeEvent.index]);
+            }
+        };
+        return _this;
+    }
+    MultiPoint.prototype.render = function () {
+        // @ts-ignore
+        return <AMapMultiPoint {...this.props} onItemPress={this.onItemPress}/>;
+    };
+    MultiPoint.propTypes = __assign({}, react_native_1.ViewPropTypes, { points: PropTypes.arrayOf(PointPropType).isRequired, image: PropTypes.string, onItemPress: PropTypes.func });
+    return MultiPoint;
+}(React.PureComponent));
+exports["default"] = MultiPoint;
+// @ts-ignore
+var AMapMultiPoint = react_native_1.requireNativeComponent("AMapMultiPoint", MultiPoint);
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/polygon.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/polygon.d.ts
new file mode 100644
index 0000000..49c87e1
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/polygon.d.ts
@@ -0,0 +1,25 @@
+import { LatLng } from "../types";
+export interface Polygon {
+    /**
+     * 节点坐标
+     */
+    coordinates: LatLng[];
+    /**
+     * 边线宽度
+     */
+    strokeWidth?: number;
+    /**
+     * 边线颜色
+     */
+    strokeColor?: string;
+    /**
+     * 填充颜色
+     */
+    fillColor?: string;
+    /**
+     * 层级
+     */
+    zIndex?: number;
+}
+declare const _default: any;
+export default _default;
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/polygon.js b/node_modules/react-native-amap3d/lib/js/map-view/polygon.js
new file mode 100644
index 0000000..f0421cb
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/polygon.js
@@ -0,0 +1,20 @@
+"use strict";
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var PropTypes = require("prop-types");
+var react_native_1 = require("react-native");
+var prop_types_1 = require("../prop-types");
+// @ts-ignore
+exports["default"] = react_native_1.requireNativeComponent("AMapPolygon", {
+    propTypes: __assign({}, react_native_1.ViewPropTypes, { coordinates: PropTypes.arrayOf(prop_types_1.LatLngPropType).isRequired, strokeWidth: PropTypes.number, strokeColor: react_native_1.ColorPropType, fillColor: react_native_1.ColorPropType, zIndex: PropTypes.number })
+});
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/polyline.d.ts b/node_modules/react-native-amap3d/lib/js/map-view/polyline.d.ts
new file mode 100644
index 0000000..bce2b51
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/polyline.d.ts
@@ -0,0 +1,124 @@
+/// <reference types="react-native" />
+import * as React from "react";
+import * as PropTypes from "prop-types";
+import { LatLng } from "../types";
+export interface PolylineProps {
+    /**
+     * 节点坐标
+     */
+    coordinates: LatLng[];
+    /**
+     * 线段宽度
+     */
+    width?: number;
+    /**
+     * 线段颜色
+     */
+    color?: string;
+    /**
+     * 层级
+     */
+    zIndex?: number;
+    /**
+     * 多段颜色
+     */
+    colors?: string[];
+    /**
+     * 是否使用颜色渐变
+     */
+    gradient?: boolean;
+    /**
+     * 是否绘制大地线
+     */
+    geodesic?: boolean;
+    /**
+     * 是否绘制虚线
+     */
+    dashed?: boolean;
+    /**
+     * 点击事件
+     */
+    onPress?: () => void;
+}
+/**
+ * @ignore
+ */
+export default class Polyline extends React.PureComponent<PolylineProps> {
+    static propTypes: {
+        coordinates: PropTypes.Validator<PropTypes.InferProps<{
+            latitude: PropTypes.Validator<number>;
+            longitude: PropTypes.Validator<number>;
+        }>[]>;
+        width: PropTypes.Requireable<number>;
+        color: PropTypes.Validator<string>;
+        zIndex: PropTypes.Requireable<number>;
+        colors: PropTypes.Requireable<string[]>;
+        gradient: PropTypes.Requireable<boolean>;
+        geodesic: PropTypes.Requireable<boolean>;
+        dashed: PropTypes.Requireable<boolean>;
+        onPress: PropTypes.Requireable<(...args: any[]) => any>;
+        hitSlop?: PropTypes.Validator<import("react-native").Insets>;
+        onLayout?: PropTypes.Validator<(event: import("react-native").NativeSyntheticEvent<{
+            layout: import("react-native").LayoutRectangle;
+        }>) => void>;
+        pointerEvents?: PropTypes.Validator<"auto" | "none" | "box-none" | "box-only">;
+        removeClippedSubviews?: PropTypes.Validator<boolean>;
+        style?: PropTypes.Validator<import("react-native").StyleProp<import("react-native").ViewStyle>>;
+        testID?: PropTypes.Validator<string>;
+        nativeID?: PropTypes.Validator<string>;
+        collapsable?: PropTypes.Validator<boolean>;
+        needsOffscreenAlphaCompositing?: PropTypes.Validator<boolean>;
+        renderToHardwareTextureAndroid?: PropTypes.Validator<boolean>;
+        focusable?: PropTypes.Validator<boolean>;
+        shouldRasterizeIOS?: PropTypes.Validator<boolean>;
+        isTVSelectable?: PropTypes.Validator<boolean>;
+        hasTVPreferredFocus?: PropTypes.Validator<boolean>;
+        tvParallaxProperties?: PropTypes.Validator<import("react-native").TVParallaxProperties>;
+        tvParallaxShiftDistanceX?: PropTypes.Validator<number>;
+        tvParallaxShiftDistanceY?: PropTypes.Validator<number>;
+        tvParallaxTiltAngle?: PropTypes.Validator<number>;
+        tvParallaxMagnification?: PropTypes.Validator<number>;
+        onStartShouldSetResponder?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onMoveShouldSetResponder?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onResponderEnd?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderGrant?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderReject?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderMove?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderRelease?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderStart?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onResponderTerminationRequest?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onResponderTerminate?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onStartShouldSetResponderCapture?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onMoveShouldSetResponderCapture?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => boolean>;
+        onTouchStart?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchMove?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchEnd?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchCancel?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        onTouchEndCapture?: PropTypes.Validator<(event: import("react-native").GestureResponderEvent) => void>;
+        accessible?: PropTypes.Validator<boolean>;
+        accessibilityActions?: PropTypes.Validator<ReadonlyArray<Readonly<{
+            name: string;
+            label?: string;
+        }>>>;
+        accessibilityLabel?: PropTypes.Validator<string>;
+        accessibilityRole?: PropTypes.Validator<import("react-native").AccessibilityRole>;
+        accessibilityState?: PropTypes.Validator<import("react-native").AccessibilityState>;
+        accessibilityHint?: PropTypes.Validator<string>;
+        accessibilityValue?: PropTypes.Validator<import("react-native").AccessibilityValue>;
+        onAccessibilityAction?: PropTypes.Validator<(event: import("react-native").NativeSyntheticEvent<Readonly<{
+            actionName: string;
+        }>>) => void>;
+        accessibilityLiveRegion?: PropTypes.Validator<"none" | "assertive" | "polite">;
+        importantForAccessibility?: PropTypes.Validator<"auto" | "yes" | "no" | "no-hide-descendants">;
+        accessibilityElementsHidden?: PropTypes.Validator<boolean>;
+        accessibilityViewIsModal?: PropTypes.Validator<boolean>;
+        onAccessibilityEscape?: PropTypes.Validator<() => void>;
+        onAccessibilityTap?: PropTypes.Validator<() => void>;
+        onMagicTap?: PropTypes.Validator<() => void>;
+        accessibilityIgnoresInvertColors?: PropTypes.Validator<boolean>;
+    };
+    static defaultProps: {
+        colors: any[];
+    };
+    render(): JSX.Element;
+}
diff --git a/node_modules/react-native-amap3d/lib/js/map-view/polyline.js b/node_modules/react-native-amap3d/lib/js/map-view/polyline.js
new file mode 100644
index 0000000..f596304
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/map-view/polyline.js
@@ -0,0 +1,55 @@
+"use strict";
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    };
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+exports.__esModule = true;
+var React = require("react");
+var PropTypes = require("prop-types");
+var react_native_1 = require("react-native");
+var prop_types_1 = require("../prop-types");
+/**
+ * @ignore
+ */
+var Polyline = /** @class */ (function (_super) {
+    __extends(Polyline, _super);
+    function Polyline() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Polyline.prototype.render = function () {
+        var props = __assign({}, this.props, react_native_1.Platform.select({
+            android: {
+                colors: this.props.colors.map(react_native_1.processColor)
+            }
+        }));
+        return <AMapPolyline {...props}/>;
+    };
+    Polyline.propTypes = __assign({}, react_native_1.ViewPropTypes, { coordinates: PropTypes.arrayOf(prop_types_1.LatLngPropType).isRequired, width: PropTypes.number, color: react_native_1.ColorPropType, zIndex: PropTypes.number, colors: PropTypes.arrayOf(react_native_1.ColorPropType), gradient: PropTypes.bool, geodesic: PropTypes.bool, dashed: PropTypes.bool, onPress: PropTypes.func });
+    Polyline.defaultProps = {
+        colors: []
+    };
+    return Polyline;
+}(React.PureComponent));
+exports["default"] = Polyline;
+// @ts-ignore
+var AMapPolyline = react_native_1.requireNativeComponent("AMapPolyline", Polyline);
diff --git a/node_modules/react-native-amap3d/lib/js/offline.d.ts b/node_modules/react-native-amap3d/lib/js/offline.d.ts
new file mode 100644
index 0000000..301a615
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/offline.d.ts
@@ -0,0 +1,49 @@
+export declare enum OfflineState {
+    Waiting = "waiting",
+    Downloading = "downloading",
+    Downloaded = "downloaded",
+    Expired = "expired",
+    Unzip = "unzip"
+}
+export interface City {
+    name: string;
+    size: number;
+    state: OfflineState;
+}
+export interface Province extends City {
+    cities: City[];
+}
+/**
+ * 下载监听器
+ */
+export declare type DownloadListener = (state: {
+    name: string;
+    progress: number;
+    state: OfflineState;
+}) => void;
+export default class Offline {
+    /**
+     * 获取所有省份
+     */
+    static getProvinces(): Promise<Province[]>;
+    /**
+     * 获取所有城市
+     */
+    static getCities(): Promise<City[]>;
+    /**
+     * 下载离线地图
+     *
+     * @param name 城市名或省份名
+     */
+    static download(name: string): void;
+    /**
+     * 移除离线地图
+     *
+     * @param name 城市名或省份名
+     */
+    static remove(name: string): void;
+    /**
+     * 添加下载监听器
+     */
+    static addDownloadListener(callback: DownloadListener): import("react-native").EmitterSubscription;
+}
diff --git a/node_modules/react-native-amap3d/lib/js/offline.js b/node_modules/react-native-amap3d/lib/js/offline.js
new file mode 100644
index 0000000..86fa131
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/offline.js
@@ -0,0 +1,53 @@
+"use strict";
+exports.__esModule = true;
+var react_native_1 = require("react-native");
+var AMapOffline = react_native_1.NativeModules.AMapOffline;
+var eventEmitter = new react_native_1.NativeEventEmitter(AMapOffline);
+var OfflineState;
+(function (OfflineState) {
+    OfflineState["Waiting"] = "waiting";
+    OfflineState["Downloading"] = "downloading";
+    OfflineState["Downloaded"] = "downloaded";
+    OfflineState["Expired"] = "expired";
+    OfflineState["Unzip"] = "unzip";
+})(OfflineState = exports.OfflineState || (exports.OfflineState = {}));
+var Offline = /** @class */ (function () {
+    function Offline() {
+    }
+    /**
+     * 获取所有省份
+     */
+    Offline.getProvinces = function () {
+        return AMapOffline.getProvinces();
+    };
+    /**
+     * 获取所有城市
+     */
+    Offline.getCities = function () {
+        return AMapOffline.getCities();
+    };
+    /**
+     * 下载离线地图
+     *
+     * @param name 城市名或省份名
+     */
+    Offline.download = function (name) {
+        AMapOffline.download(name);
+    };
+    /**
+     * 移除离线地图
+     *
+     * @param name 城市名或省份名
+     */
+    Offline.remove = function (name) {
+        AMapOffline.remove(name);
+    };
+    /**
+     * 添加下载监听器
+     */
+    Offline.addDownloadListener = function (callback) {
+        return eventEmitter.addListener("download", callback);
+    };
+    return Offline;
+}());
+exports["default"] = Offline;
diff --git a/node_modules/react-native-amap3d/lib/js/prop-types.d.ts b/node_modules/react-native-amap3d/lib/js/prop-types.d.ts
new file mode 100644
index 0000000..68d51a9
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/prop-types.d.ts
@@ -0,0 +1,28 @@
+export declare const LatLngPropType: import("prop-types").Requireable<import("prop-types").InferProps<{
+    latitude: import("prop-types").Validator<number>;
+    longitude: import("prop-types").Validator<number>;
+}>>;
+export declare const RegionPropType: import("prop-types").Requireable<import("prop-types").InferProps<{
+    latitude: import("prop-types").Validator<number>;
+    longitude: import("prop-types").Validator<number>;
+    latitudeDelta: import("prop-types").Validator<number>;
+    longitudeDelta: import("prop-types").Validator<number>;
+}>>;
+export declare const PointPropType: import("prop-types").Requireable<import("prop-types").InferProps<{
+    x: import("prop-types").Validator<number>;
+    y: import("prop-types").Validator<number>;
+}>>;
+export declare const LocationStylePropType: import("prop-types").Requireable<import("prop-types").InferProps<{
+    image: import("prop-types").Requireable<string>;
+    fillColor: import("prop-types").Requireable<string>;
+    strokeColor: import("prop-types").Requireable<string>;
+    strokeWidth: import("prop-types").Requireable<number>;
+    showLocation: import("prop-types").Requireable<boolean>;
+    anchor: import("prop-types").Requireable<number[]>;
+    locationDotBgColor: import("prop-types").Requireable<string>;
+    locationDotFillColor: import("prop-types").Requireable<string>;
+    enablePulseAnnimation: import("prop-types").Requireable<boolean>;
+    showsHeadingIndicator: import("prop-types").Requireable<boolean>;
+    showsAccuracyRing: import("prop-types").Requireable<boolean>;
+}>>;
+export declare const mapEventsPropType: (events: any) => any;
diff --git a/node_modules/react-native-amap3d/lib/js/prop-types.js b/node_modules/react-native-amap3d/lib/js/prop-types.js
new file mode 100644
index 0000000..a821991
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/prop-types.js
@@ -0,0 +1,36 @@
+"use strict";
+exports.__esModule = true;
+var prop_types_1 = require("prop-types");
+exports.LatLngPropType = prop_types_1.shape({
+    latitude: prop_types_1.number.isRequired,
+    longitude: prop_types_1.number.isRequired
+});
+exports.RegionPropType = prop_types_1.shape({
+    latitude: prop_types_1.number.isRequired,
+    longitude: prop_types_1.number.isRequired,
+    latitudeDelta: prop_types_1.number.isRequired,
+    longitudeDelta: prop_types_1.number.isRequired
+});
+exports.PointPropType = prop_types_1.shape({
+    x: prop_types_1.number.isRequired,
+    y: prop_types_1.number.isRequired
+});
+exports.LocationStylePropType = prop_types_1.shape({
+    image: prop_types_1.string,
+    fillColor: prop_types_1.string,
+    strokeColor: prop_types_1.string,
+    strokeWidth: prop_types_1.number,
+    showLocation: prop_types_1.bool,
+    anchor: prop_types_1.arrayOf(prop_types_1.number),
+    locationDotBgColor: prop_types_1.string,
+    locationDotFillColor: prop_types_1.string,
+    enablePulseAnnimation: prop_types_1.bool,
+    showsHeadingIndicator: prop_types_1.bool,
+    showsAccuracyRing: prop_types_1.bool
+});
+exports.mapEventsPropType = function (events) {
+    return events.reduce(function (props, event) {
+        props[event.replace(/^on/, "onAMap")] = prop_types_1.func;
+        return props;
+    }, {});
+};
diff --git a/node_modules/react-native-amap3d/lib/js/types.d.ts b/node_modules/react-native-amap3d/lib/js/types.d.ts
new file mode 100644
index 0000000..5006146
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/types.d.ts
@@ -0,0 +1,104 @@
+/**
+ * 点座标
+ */
+export interface Point {
+    x: number;
+    y: number;
+}
+/**
+ * 地理座标
+ */
+export interface LatLng {
+    /**
+     * 纬度
+     */
+    latitude: number;
+    /**
+     * 经度
+     */
+    longitude: number;
+}
+/**
+ * 区域
+ */
+export interface Region extends LatLng {
+    /**
+     * 纬度范围
+     */
+    latitudeDelta: number;
+    /**
+     * 经度范围
+     */
+    longitudeDelta: number;
+}
+/**
+ * 地图状态
+ */
+export interface MapStatus {
+    /**
+     * 中心坐标
+     */
+    center: LatLng;
+    /**
+     * 缩放级别
+     */
+    zoomLevel: number;
+    /**
+     * 朝向、旋转角度
+     */
+    rotation: number;
+    /**
+     * 倾斜角度
+     */
+    tilt: number;
+    /**
+     * 显示区域
+     */
+    region: Region;
+}
+/**
+ * 定位
+ */
+export interface Location extends LatLng {
+    /**
+     * 精度
+     */
+    accuracy: number;
+    /**
+     * 朝向
+     */
+    heading: number;
+    /**
+     * 海拔
+     */
+    altitude: number;
+    /**
+     * 运动速度
+     */
+    speed: number;
+}
+/**
+ * 地图类型
+ */
+export declare enum MapType {
+    /**
+     * 标准地图
+     */
+    Standard = 0,
+    /**
+     * 卫星地图
+     */
+    Satellite = 1,
+    /**
+     * 夜间地图
+     */
+    Night = 2,
+    /**
+     * 导航地图
+     */
+    Navi = 3,
+    /**
+     * 公交地图
+     */
+    Bus = 4
+}
diff --git a/node_modules/react-native-amap3d/lib/js/types.js b/node_modules/react-native-amap3d/lib/js/types.js
new file mode 100644
index 0000000..42399b6
--- /dev/null
+++ b/node_modules/react-native-amap3d/lib/js/types.js
@@ -0,0 +1,28 @@
+"use strict";
+exports.__esModule = true;
+/**
+ * 地图类型
+ */
+var MapType;
+(function (MapType) {
+    /**
+     * 标准地图
+     */
+    MapType[MapType["Standard"] = 0] = "Standard";
+    /**
+     * 卫星地图
+     */
+    MapType[MapType["Satellite"] = 1] = "Satellite";
+    /**
+     * 夜间地图
+     */
+    MapType[MapType["Night"] = 2] = "Night";
+    /**
+     * 导航地图
+     */
+    MapType[MapType["Navi"] = 3] = "Navi";
+    /**
+     * 公交地图
+     */
+    MapType[MapType["Bus"] = 4] = "Bus";
+})(MapType = exports.MapType || (exports.MapType = {}));
diff --git a/node_modules/react-native-amap3d/lib/src/circle.tsx b/node_modules/react-native-amap3d/lib/src/circle.tsx
deleted file mode 100644
index 00ab224..0000000
--- a/node_modules/react-native-amap3d/lib/src/circle.tsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import { requireNativeComponent } from "react-native";
-import { LatLng } from "./types";
-
-export interface CircleProps {
-  /**
-   * 圆点坐标
-   */
-  center: LatLng;
-
-  /**
-   * 半径（米）
-   */
-  radius: number;
-
-  /**
-   * 边线宽度
-   */
-  strokeWidth?: number;
-
-  /**
-   * 边线颜色
-   */
-  strokeColor?: string;
-
-  /**
-   * 填充颜色
-   */
-  fillColor?: string;
-
-  /**
-   * 层级
-   */
-  zIndex?: number;
-}
-
-export default requireNativeComponent<CircleProps>("AMapCircle");
diff --git a/node_modules/react-native-amap3d/lib/src/cluster/cluster-view.tsx b/node_modules/react-native-amap3d/lib/src/cluster/cluster-view.tsx
deleted file mode 100644
index 89fe38f..0000000
--- a/node_modules/react-native-amap3d/lib/src/cluster/cluster-view.tsx
+++ /dev/null
@@ -1,47 +0,0 @@
-import * as React from "react";
-import { StyleSheet, Text, View, ViewStyle } from "react-native";
-import { ClusterParams } from ".";
-import Marker from "../marker";
-
-interface Props {
-  cluster: ClusterParams;
-  style?: ViewStyle;
-  textStyle?: ViewStyle;
-  onPress?: (params: ClusterParams) => void;
-}
-
-export default class ClusterView extends React.PureComponent<Props> {
-  onPress = () => {
-    this.props.onPress?.call(this, this.props.cluster);
-  };
-
-  renderClusterView = () => {
-    const { count } = this.props.cluster;
-    const size = 36 + Math.log2(count);
-    const clusterStyle = { width: size, height: size, borderRadius: size / 2 };
-    return (
-      <View style={[style.cluster, clusterStyle, this.props.style]}>
-        <Text style={[style.text, this.props.textStyle]}>{count}</Text>
-      </View>
-    );
-  };
-
-  render() {
-    return (
-      <Marker onPress={this.onPress} position={this.props.cluster.position}>
-        {this.renderClusterView()}
-      </Marker>
-    );
-  }
-}
-
-const style = StyleSheet.create({
-  cluster: {
-    borderWidth: 4,
-    borderColor: "#fff",
-    backgroundColor: "rgba(245,83,61,0.9)",
-    alignItems: "center",
-    justifyContent: "center",
-  },
-  text: { color: "#fff", fontWeight: "600" },
-});
diff --git a/node_modules/react-native-amap3d/lib/src/cluster/index.tsx b/node_modules/react-native-amap3d/lib/src/cluster/index.tsx
deleted file mode 100644
index a0e66ef..0000000
--- a/node_modules/react-native-amap3d/lib/src/cluster/index.tsx
+++ /dev/null
@@ -1,105 +0,0 @@
-import * as React from "react";
-import { ViewStyle } from "react-native";
-import Supercluster, { ClusterFeature, ClusterProperties } from "supercluster";
-import { CameraEvent } from "../map-view";
-import { LatLng } from "../types";
-import ClusterView from "./cluster-view";
-
-export interface ClusterParams {
-  id: number;
-  count: number;
-  position: LatLng;
-}
-
-interface MarkerItem {
-  position: LatLng;
-  properties?: any;
-}
-
-interface Props {
-  radius?: number;
-  clusterStyle?: ViewStyle;
-  clusterTextStyle?: ViewStyle;
-  points: MarkerItem[];
-  renderMarker: (item: MarkerItem) => React.ReactNode;
-  renderCluster?: (params: ClusterParams) => React.ComponentType<any>;
-  onPress?: (params: ClusterParams) => void;
-}
-
-interface State {
-  clusters: ClusterFeature<ClusterProperties>[];
-}
-
-export default class Cluster extends React.PureComponent<Props, State> {
-  static defaultProps = { radius: 200 };
-  state: State = { clusters: [] };
-  cluster?: Supercluster<any, ClusterProperties>;
-
-  componentDidMount() {
-    this.init(this.props);
-  }
-
-  componentDidUpdate(props: Props) {
-    if (props.points != this.props.points) {
-      this.init(props);
-    }
-  }
-
-  init(props: Props) {
-    // 如果主线程占用太多计算资源，会导致 ios onLoad 事件无法触发，非常蛋疼
-    // 暂时想到的解决办法是丢到下一个事件循环，但这可能会导致 update 失败
-    setTimeout(() => {
-      const { radius } = props;
-      const options = { radius, minZoom: 3, maxZoom: 21 };
-      this.cluster = new Supercluster<any, ClusterProperties>(options).load(
-        props.points.map((marker) => ({
-          type: "Feature",
-          geometry: {
-            type: "Point",
-            coordinates: [marker.position.longitude, marker.position.latitude],
-          },
-          properties: marker.properties,
-        }))
-      );
-    }, 0);
-  }
-
-  update({ cameraPosition, latLngBounds }: CameraEvent) {
-    setTimeout(() => {
-      const { southwest, northeast } = latLngBounds;
-      const clusters = this.cluster!.getClusters(
-        [southwest.longitude, southwest.latitude, northeast.longitude, northeast.latitude],
-        Math.round(cameraPosition.zoom!)
-      );
-      this.setState({ clusters });
-    }, 0);
-  }
-
-  renderCluster = (cluster: ClusterParams) => (
-    <ClusterView
-      key={cluster.id}
-      cluster={cluster}
-      onPress={this.props.onPress}
-      style={this.props.clusterStyle}
-      textStyle={this.props.clusterTextStyle}
-    />
-  );
-
-  render() {
-    const { renderCluster, renderMarker } = this.props;
-    const render = renderCluster || this.renderCluster;
-    return this.state.clusters.map(({ geometry, properties }) => {
-      const position = {
-        latitude: geometry.coordinates[1],
-        longitude: geometry.coordinates[0],
-      };
-
-      if (properties.point_count > 0) {
-        const { cluster_id, point_count } = properties;
-        return render({ position, id: cluster_id, count: point_count });
-      }
-
-      return renderMarker({ position, properties });
-    });
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/src/component.ts b/node_modules/react-native-amap3d/lib/src/component.ts
deleted file mode 100644
index 95e6081..0000000
--- a/node_modules/react-native-amap3d/lib/src/component.ts
+++ /dev/null
@@ -1,31 +0,0 @@
-import { PureComponent } from "react";
-import { findNodeHandle, UIManager } from "react-native";
-
-export default class Component<P, S = {}> extends PureComponent<P, S> {
-  /**
-   * 原生 View 名称，继承时必须指定
-   */
-  name = "";
-  mounted = false;
-
-  componentDidMount() {
-    this.mounted = true;
-  }
-
-  componentWillUnmount() {
-    this.mounted = false;
-  }
-
-  /**
-   * 调用原生方法
-   */
-  invoke(name: string, params?: any[]) {
-    if (!this.mounted) return;
-
-    const handle = findNodeHandle(this);
-    if (handle) {
-      const command = UIManager.getViewManagerConfig(this.name).Commands[name];
-      UIManager.dispatchViewManagerCommand(handle, command, params);
-    }
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/src/heat-map.tsx b/node_modules/react-native-amap3d/lib/src/heat-map.tsx
deleted file mode 100644
index d9d3442..0000000
--- a/node_modules/react-native-amap3d/lib/src/heat-map.tsx
+++ /dev/null
@@ -1,21 +0,0 @@
-import { requireNativeComponent } from "react-native";
-import { LatLng } from "./types";
-
-export interface HeatMapProps {
-  /**
-   * 节点坐标
-   */
-  data: LatLng[];
-
-  /**
-   * 半径（米）
-   */
-  radius?: number;
-
-  /**
-   * 透明度
-   */
-  opacity?: number;
-}
-
-export default requireNativeComponent<HeatMapProps>("AMapHeatMap");
diff --git a/node_modules/react-native-amap3d/lib/src/index.ts b/node_modules/react-native-amap3d/lib/src/index.ts
deleted file mode 100644
index c2ded5a..0000000
--- a/node_modules/react-native-amap3d/lib/src/index.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-export { default as Circle } from "./circle";
-export { default as Cluster } from "./cluster";
-export { default as HeatMap } from "./heat-map";
-export { default as MapView } from "./map-view";
-export { default as Marker } from "./marker";
-export { default as MultiPoint } from "./multi-point";
-export { default as Polygon } from "./polygon";
-export { default as Polyline } from "./polyline";
-export * from "./types";
-export { AMapSdk };
-import * as AMapSdk from "./sdk";
diff --git a/node_modules/react-native-amap3d/lib/src/map-view.tsx b/node_modules/react-native-amap3d/lib/src/map-view.tsx
deleted file mode 100644
index 039f36e..0000000
--- a/node_modules/react-native-amap3d/lib/src/map-view.tsx
+++ /dev/null
@@ -1,230 +0,0 @@
-import * as React from "react";
-import {
-  NativeMethods,
-  NativeSyntheticEvent,
-  requireNativeComponent,
-  ViewProps,
-} from "react-native";
-import Component from "./component";
-import { CameraPosition, LatLng, LatLngBounds, MapPoi, MapType, Point } from "./types";
-
-export interface CameraEvent {
-  cameraPosition: CameraPosition;
-  latLngBounds: LatLngBounds;
-}
-
-export interface MapViewProps extends ViewProps {
-  /**
-   * 地图类型
-   */
-  mapType?: MapType;
-
-  /**
-   * 初始状态
-   */
-  initialCameraPosition?: CameraPosition;
-
-  /**
-   * 是否显示当前定位
-   */
-  myLocationEnabled?: boolean;
-
-  /**
-   * 是否显示室内地图
-   */
-  indoorViewEnabled?: boolean;
-
-  /**
-   * 是否显示3D建筑
-   */
-  buildingsEnabled?: boolean;
-
-  /**
-   * 是否显示标注
-   */
-  labelsEnabled?: boolean;
-
-  /**
-   * 是否显示指南针
-   */
-  compassEnabled?: boolean;
-
-  /**
-   * 是否显示放大缩小按钮
-   *
-   * @platform android
-   */
-  zoomControlsEnabled?: boolean;
-
-  /**
-   * 是否显示比例尺
-   */
-  scaleControlsEnabled?: boolean;
-
-  /**
-   * 是否显示定位按钮
-   *
-   * @platform android
-   */
-  myLocationButtonEnabled?: boolean;
-
-  /**
-   * 是否显示路况
-   */
-  trafficEnabled?: boolean;
-
-  /**
-   * 最大缩放级别
-   */
-  maxZoom?: number;
-
-  /**
-   * 最小缩放级别
-   */
-  minZoom?: number;
-
-  /**
-   * 是否启用缩放手势，用于放大缩小
-   */
-  zoomGesturesEnabled?: boolean;
-
-  /**
-   * 是否启用滑动手势，用于平移
-   */
-  scrollGesturesEnabled?: boolean;
-
-  /**
-   * 是否启用旋转手势，用于调整方向
-   */
-  rotateGesturesEnabled?: boolean;
-
-  /**
-   * 是否启用倾斜手势，用于改变视角
-   */
-  tiltGesturesEnabled?: boolean;
-
-  /**
-   * 设定定位的最小更新距离
-   *
-   * @platform android
-   */
-  distanceFilter?: number;
-
-  /**
-   * 设定最小更新角度，默认为 1 度
-   *
-   * @platform android
-   */
-  headingFilter?: number;
-
-  /**
-   * 点击事件
-   */
-  onPress?: (event: NativeSyntheticEvent<LatLng>) => void;
-
-  /**
-   * 标注点击事件
-   */
-  onPressPoi?: (event: NativeSyntheticEvent<MapPoi>) => void;
-
-  /**
-   * 长按事件
-   */
-  onLongPress?: (event: NativeSyntheticEvent<LatLng>) => void;
-
-  /**
-   * 地图状态改变事件，随地图状态变化不停地触发
-   */
-  onCameraMove?: (event: NativeSyntheticEvent<CameraEvent>) => void;
-
-  /**
-   * 地图状态改变事件，在停止变化后触发
-   */
-  onCameraIdle?: (event: NativeSyntheticEvent<CameraEvent>) => void;
-
-  /**
-   * 地图初始化完成事件
-   */
-  onLoad?: (event: NativeSyntheticEvent<void>) => void;
-
-  /**
-   * 地图定位更新事件
-   */
-  onLocation?: (event: NativeSyntheticEvent<GeolocationPosition>) => void;
-}
-
-const name = "AMapView";
-const NativeMapView = requireNativeComponent<MapViewProps>(name);
-
-export default class extends Component<MapViewProps> {
-  static defaultProps = {
-    style: { flex: 1 },
-    compassEnabled: true,
-    scaleControlsEnabled: true,
-    distanceFilter: 1,
-  };
-
-  name = name;
-  ref?: (React.Component<MapViewProps> & NativeMethods) | null;
-  state = { loaded: false };
-  callbackMap: { [key: number]: (data: any) => void } = {};
-
-  /**
-   * 移动视角
-   */
-  moveCamera(cameraPosition: CameraPosition, duration = 0) {
-    this.invoke("moveCamera", [cameraPosition, duration]);
-  }
-
-  /**
-   * 点坐标转地理坐标，主要用于地图选点
-   */
-  getLatLng(point: Point): Promise<LatLng> {
-    return this.call("getLatLng", point);
-  }
-
-  callback = ({ nativeEvent }: NativeSyntheticEvent<{ id: number; data: any }>) => {
-    this.callbackMap[nativeEvent.id]?.call(this, nativeEvent.data);
-    delete this.callbackMap[nativeEvent.id];
-  };
-
-  call(name: string, args: any): Promise<any> {
-    const id = Math.random();
-    this.invoke("call", [id, name, args]);
-    return new Promise((resolve) => (this.callbackMap[id] = resolve));
-  }
-
-  componentDidMount() {
-    super.componentDidMount();
-    // 无论如何也要在 1 秒后 setLoaded(true) ，防止 onLoad 事件不触发的情况下显示不正常
-    // 目前只在 iOS 上低概率出现
-    setTimeout(() => this.setState({ loaded: true }), 1000);
-  }
-
-  render() {
-    let { style, onLoad } = this.props;
-    if (!this.state.loaded) {
-      style = [style, { width: 1, height: 1 }];
-    }
-    return (
-      <NativeMapView
-        {...this.props}
-        ref={(ref) => (this.ref = ref)}
-        style={style}
-        // @ts-ignore: 内部接口
-        onCallback={this.callback}
-        onPress={(event) => {
-          if (event.nativeEvent.latitude) {
-            this.props.onPress?.call(this, event);
-          }
-        }}
-        onLoad={(event) => {
-          // android 地图部分控件不显示的问题在重新 layout 之后会恢复正常。
-          // 同时也能修复 ios 地图偶尔出现的 layout 异常
-          this.setState({ loaded: true });
-          onLoad?.call(this, event);
-        }}
-      />
-    );
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/src/marker.tsx b/node_modules/react-native-amap3d/lib/src/marker.tsx
deleted file mode 100644
index 7e46cd5..0000000
--- a/node_modules/react-native-amap3d/lib/src/marker.tsx
+++ /dev/null
@@ -1,128 +0,0 @@
-import * as React from "react";
-import {
-  ImageSourcePropType,
-  NativeSyntheticEvent,
-  requireNativeComponent,
-  View,
-  ViewStyle,
-} from "react-native";
-// @ts-ignore
-import resolveAssetSource from "react-native/Libraries/Image/resolveAssetSource";
-import Component from "./component";
-import { LatLng, Point } from "./types";
-
-export interface MarkerProps {
-  /**
-   * 坐标
-   */ position: LatLng;
-
-  /**
-   * 图标
-   */
-  icon?: ImageSourcePropType;
-
-  /**
-   * 透明度 [0, 1]
-   *
-   * @platform android
-   */
-  opacity?: number;
-
-  /**
-   * 是否可拖拽
-   */
-  draggable?: boolean;
-
-  /**
-   * 是否平贴地图
-   *
-   * @platform android
-   */
-  flat?: boolean;
-
-  /**
-   * 层级
-   */
-  zIndex?: number;
-
-  /**
-   * 覆盖物锚点比例
-   *
-   * @link http://a.amap.com/lbs/static/unzip/Android_Map_Doc/3D/com/amap/api/maps/model/Marker.html#setAnchor-float-float-
-   * @platform android
-   */
-  anchor?: Point;
-
-  /**
-   * 覆盖物偏移位置
-   *
-   * @link http://a.amap.com/lbs/static/unzip/iOS_Map_Doc/AMap_iOS_API_Doc_3D/interface_m_a_annotation_view.html#a78f23c1e6a6d92faf12a00877ac278a7
-   * @platform ios
-   */
-  centerOffset?: Point;
-
-  /**
-   * 自定义 View
-   */
-  children?: React.ReactNode;
-
-  /**
-   * 点击事件
-   */
-  onPress?: () => void;
-
-  /**
-   * 拖放开始事件
-   */
-  onDragStart?: () => void;
-
-  /**
-   * 拖放进行事件，类似于 mousemove，在结束之前会不断调用
-   */
-  onDrag?: () => void;
-
-  /**
-   * 拖放结束事件
-   */
-  onDragEnd?: (event: NativeSyntheticEvent<LatLng>) => void;
-}
-
-export default class extends Component<MarkerProps> {
-  name = name;
-
-  /**
-   * 触发自定义 view 更新
-   *
-   * 通常来说，不需要主动调用该方法，对于 android，如果自定义 view 存在异步更新，
-   * 例如，包含一个引用了网络图片的 <Image />，则需要在 view 更新后主动调用该方法触发
-   * icon 更新。
-   */
-  update = () => {
-    setTimeout(() => this.invoke("update"), 0);
-  };
-
-  componentDidUpdate() {
-    if (this.props.children) {
-      this.update();
-    }
-  }
-
-  render() {
-    const props = { ...this.props };
-    Reflect.set(props, "latLng", props.position);
-    // @ts-ignore android 不能用 position 作为属性，会发生冲突，也是个蛋疼的问题
-    delete props.position;
-    if (props.children) {
-      props.children = (
-        <View style={style} onLayout={this.update}>
-          {props.children}
-        </View>
-      );
-    }
-    return <NativeMarker {...props} icon={resolveAssetSource(props.icon)} />;
-  }
-}
-
-const name = "AMapMarker";
-const style: ViewStyle = { position: "absolute", zIndex: -1 };
-const NativeMarker = requireNativeComponent<MarkerProps>(name);
diff --git a/node_modules/react-native-amap3d/lib/src/multi-point.tsx b/node_modules/react-native-amap3d/lib/src/multi-point.tsx
deleted file mode 100644
index ba5f174..0000000
--- a/node_modules/react-native-amap3d/lib/src/multi-point.tsx
+++ /dev/null
@@ -1,28 +0,0 @@
-import * as React from "react";
-import { ImageSourcePropType, NativeSyntheticEvent, requireNativeComponent } from "react-native";
-// @ts-ignore
-import resolveAssetSource from "react-native/Libraries/Image/resolveAssetSource";
-import { LatLng } from "./types";
-
-const NativeMultiPoint = requireNativeComponent<MultiPointProps>("AMapMultiPoint");
-
-export interface MultiPointProps {
-  /**
-   * 坐标点集合
-   */
-  items?: LatLng[];
-
-  /**
-   * 图标
-   */
-  icon?: ImageSourcePropType;
-
-  /**
-   * 点击事件
-   */
-  onPress?: (event: NativeSyntheticEvent<{ index: number }>) => void;
-}
-
-export default (props: MultiPointProps) => {
-  return <NativeMultiPoint {...props} icon={resolveAssetSource(props.icon)} />;
-};
diff --git a/node_modules/react-native-amap3d/lib/src/offline.ts b/node_modules/react-native-amap3d/lib/src/offline.ts
deleted file mode 100644
index a8cd7af..0000000
--- a/node_modules/react-native-amap3d/lib/src/offline.ts
+++ /dev/null
@@ -1,72 +0,0 @@
-import { NativeModules, NativeEventEmitter } from "react-native";
-
-const { AMapOffline } = NativeModules;
-const eventEmitter = new NativeEventEmitter(AMapOffline);
-
-export enum OfflineState {
-  Waiting = "waiting",
-  Downloading = "downloading",
-  Downloaded = "downloaded",
-  Expired = "expired",
-  Unzip = "unzip",
-}
-
-export interface City {
-  name: string;
-  size: number;
-  state: OfflineState;
-}
-
-export interface Province extends City {
-  cities: City[];
-}
-
-/**
- * 下载监听器
- */
-export type DownloadListener = (state: {
-  name: string;
-  progress: number;
-  state: OfflineState;
-}) => void;
-
-export default class Offline {
-  /**
-   * 获取所有省份
-   */
-  static getProvinces(): Promise<Province[]> {
-    return AMapOffline.getProvinces();
-  }
-
-  /**
-   * 获取所有城市
-   */
-  static getCities(): Promise<City[]> {
-    return AMapOffline.getCities();
-  }
-
-  /**
-   * 下载离线地图
-   *
-   * @param name 城市名或省份名
-   */
-  static download(name: string) {
-    AMapOffline.download(name);
-  }
-
-  /**
-   * 移除离线地图
-   *
-   * @param name 城市名或省份名
-   */
-  static remove(name: string) {
-    AMapOffline.remove(name);
-  }
-
-  /**
-   * 添加下载监听器
-   */
-  static addDownloadListener(callback: DownloadListener) {
-    return eventEmitter.addListener("download", callback);
-  }
-}
diff --git a/node_modules/react-native-amap3d/lib/src/polygon.tsx b/node_modules/react-native-amap3d/lib/src/polygon.tsx
deleted file mode 100644
index 87ab910..0000000
--- a/node_modules/react-native-amap3d/lib/src/polygon.tsx
+++ /dev/null
@@ -1,31 +0,0 @@
-import { requireNativeComponent } from "react-native";
-import { LatLng } from "./types";
-
-export interface Polygon {
-  /**
-   * 节点坐标
-   */
-  points: LatLng[];
-
-  /**
-   * 边线宽度
-   */
-  strokeWidth?: number;
-
-  /**
-   * 边线颜色
-   */
-  strokeColor?: string;
-
-  /**
-   * 填充颜色
-   */
-  fillColor?: string;
-
-  /**
-   * 层级
-   */
-  zIndex?: number;
-}
-
-export default requireNativeComponent<Polygon>("AMapPolygon");
diff --git a/node_modules/react-native-amap3d/lib/src/polyline.tsx b/node_modules/react-native-amap3d/lib/src/polyline.tsx
deleted file mode 100644
index d414693..0000000
--- a/node_modules/react-native-amap3d/lib/src/polyline.tsx
+++ /dev/null
@@ -1,65 +0,0 @@
-import * as React from "react";
-import { ColorValue, Platform, processColor, requireNativeComponent } from "react-native";
-import { LatLng } from "./types";
-
-export interface PolylineProps {
-  /**
-   * 节点坐标
-   */
-  points: LatLng[];
-
-  /**
-   * 线段宽度
-   */
-  width?: number;
-
-  /**
-   * 线段颜色
-   */
-  color?: ColorValue;
-
-  /**
-   * 层级
-   */
-  zIndex?: number;
-
-  /**
-   * 多段颜色
-   */
-  colors: ColorValue[];
-
-  /**
-   * 是否使用颜色渐变
-   */
-  gradient?: boolean;
-
-  /**
-   * 是否绘制大地线
-   */
-  geodesic?: boolean;
-
-  /**
-   * 是否绘制虚线
-   */
-  dotted?: boolean;
-
-  /**
-   * 点击事件
-   */
-  onPress?: () => void;
-}
-
-export default class extends React.PureComponent<PolylineProps> {
-  static defaultProps = { colors: [] };
-
-  render() {
-    const props = {
-      ...this.props,
-      ...Platform.select({ android: { colors: this.props.colors.map(processColor) } }),
-    };
-    // @ts-ignore
-    return <NativePolyline {...props} />;
-  }
-}
-
-const NativePolyline = requireNativeComponent<PolylineProps>("AMapPolyline");
diff --git a/node_modules/react-native-amap3d/lib/src/sdk.ts b/node_modules/react-native-amap3d/lib/src/sdk.ts
deleted file mode 100644
index 1c4d4b1..0000000
--- a/node_modules/react-native-amap3d/lib/src/sdk.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import { NativeModules } from "react-native";
-
-const { AMapSdk } = NativeModules;
-
-export function setApiKey(apiKey?: string) {
-  AMapSdk.setApiKey(apiKey);
-}
-
-export function getVersion(): Promise<string> {
-  return AMapSdk.getVersion();
-}
diff --git a/node_modules/react-native-amap3d/lib/src/types.ts b/node_modules/react-native-amap3d/lib/src/types.ts
deleted file mode 100644
index aa16ba4..0000000
--- a/node_modules/react-native-amap3d/lib/src/types.ts
+++ /dev/null
@@ -1,137 +0,0 @@
-/**
- * 点坐标
- */
-export interface Point {
-  x: number;
-  y: number;
-}
-
-/**
- * 地理坐标
- */
-export interface LatLng {
-  /**
-   * 纬度
-   */
-  latitude: number;
-
-  /**
-   * 经度
-   */
-  longitude: number;
-}
-
-/**
- * 地图标注点
- */
-export interface MapPoi {
-  /**
-   * 标注点 ID
-   */
-  id: string;
-
-  /**
-   * 标注点名称
-   */
-  name: string;
-
-  /**
-   * 标注点坐标
-   */
-  position: LatLng;
-}
-
-/**
- * 矩形坐标边界
- */
-export interface LatLngBounds {
-  /**
-   * 西南坐标
-   */
-  southwest: LatLng;
-
-  /**
-   * 东北坐标
-   */
-  northeast: LatLng;
-}
-
-/**
- * 地图状态
- */
-export interface CameraPosition {
-  /**
-   * 中心坐标
-   */
-  target?: LatLng;
-
-  /**
-   * 缩放级别
-   */
-  zoom?: number;
-
-  /**
-   * 朝向、旋转角度
-   */
-  bearing?: number;
-
-  /**
-   * 倾斜角度
-   */
-  tilt?: number;
-}
-
-/**
- * 定位
- */
-export interface Location extends LatLng {
-  /**
-   * 精度
-   */
-  accuracy: number;
-
-  /**
-   * 朝向
-   */
-  heading: number;
-
-  /**
-   * 海拔
-   */
-  altitude: number;
-
-  /**
-   * 运动速度
-   */
-  speed: number;
-}
-
-/**
- * 地图类型
- */
-export enum MapType {
-  /**
-   * 标准地图
-   */
-  Standard,
-
-  /**
-   * 卫星地图
-   */
-  Satellite,
-
-  /**
-   * 夜间地图
-   */
-  Night,
-
-  /**
-   * 导航地图
-   */
-  Navi,
-
-  /**
-   * 公交地图
-   */
-  Bus,
-}
diff --git a/node_modules/react-native-amap3d/license b/node_modules/react-native-amap3d/license
index 8b2767d..23153f1 100644
--- a/node_modules/react-native-amap3d/license
+++ b/node_modules/react-native-amap3d/license
@@ -1,6 +1,6 @@
 MIT License
 
-Copyright (c) 2021 7c00 <i@7c00.cc>
+Copyright (c) 2020 7c00 <i@7c00.cc>
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/node_modules/react-native-amap3d/react-native.config.js b/node_modules/react-native-amap3d/react-native.config.js
index 4f12a86..8d23650 100644
--- a/node_modules/react-native-amap3d/react-native.config.js
+++ b/node_modules/react-native-amap3d/react-native.config.js
@@ -2,8 +2,8 @@ module.exports = {
   dependency: {
     platforms: {
       ios: { project: "lib/ios/react-native-amap3d.podspec" },
-      android: { sourceDir: "lib/android" },
-    },
+      android: { sourceDir: "lib/android" }
+    }
   },
   dependencies: {
     "react-native-amap3d": {
@@ -12,10 +12,10 @@ module.exports = {
         ios: { podspecPath: __dirname + "/lib/ios/react-native-amap3d.podspec" },
         android: {
           sourceDir: __dirname + "/lib/android",
-          packageImportPath: "import qiuxiang.amap3d.AMap3DPackage;",
-          packageInstance: "new AMap3DPackage()",
-        },
-      },
-    },
-  },
+          packageImportPath: "import cn.qiuxiang.react.amap3d.AMap3DPackage;",
+          packageInstance: "new AMap3DPackage()"
+        }
+      }
+    }
+  }
 };
diff --git a/node_modules/react-native-amap3d/readme.md b/node_modules/react-native-amap3d/readme.md
index 90734fd..93a86ee 100644
--- a/node_modules/react-native-amap3d/readme.md
+++ b/node_modules/react-native-amap3d/readme.md
@@ -1,6 +1,4 @@
-# react-native-amap3d [![][version-badge]][npm] [![](https://github.com/qiuxiang/react-native-amap3d/actions/workflows/build.yml/badge.svg)](https://github.com/qiuxiang/react-native-amap3d/actions/workflows/build.yml)
-
-**注意：该项目现在正在进行新版（v3）重构，接口重新设计且部分重新实现。**
+# react-native-amap3d [![npm version][version-badge]][npm] [![build status][build-badge]][build]
 
 react-native 高德地图组件，使用最新 3D SDK，支持 Android + iOS，受 [react-native-maps](https://github.com/airbnb/react-native-maps) 启发，提供功能丰富且易用的接口。
 
@@ -9,6 +7,8 @@ react-native 高德地图组件，使用最新 3D SDK，支持 Android + iOS，
 - [react-native-baidumap-sdk（百度地图 SDK）](https://github.com/qiuxiang/react-native-baidumap-sdk)
 - [react-native-amap-geolocation（高德地图定位模块）](https://github.com/qiuxiang/react-native-amap-geolocation)
 
+接口文档：https://qiuxiang.github.io/react-native-amap3d/api/globals.html
+
 ## 功能
 
 - 地图模式切换（常规、卫星、导航、夜间）
@@ -16,178 +16,137 @@ react-native 高德地图组件，使用最新 3D SDK，支持 Android + iOS，
 - 内置地图控件的显示隐藏（指南针、比例尺、定位按钮、缩放按钮）
 - 手势交互控制（平移、缩放、旋转、倾斜）
 - 中心坐标、缩放级别、倾斜度的设置，支持动画过渡
-- 地图事件（onPress、onLongPress、onLocation、onCameraMove、onCameraIdle 等）
+- 地图事件（onPress、onLongPress、onLocation、onStatusChange）
 - 地图标记（Marker）
+  - 自定义信息窗体
+  - 自定义图标
 - 折线绘制（Polyline）
 - 多边形绘制（Polygon）
 - 圆形绘制（Circle）
 - 热力图（HeatMap）
 - 海量点（MultiPoint）
-- 点聚合（Cluster）
+- 离线地图
+
+<img src="https://user-images.githubusercontent.com/1709072/40894475-907865ea-67dc-11e8-83f3-09ac73c95434.jpg" width="215"> <img src="https://user-images.githubusercontent.com/1709072/40894476-90ac38d4-67dc-11e8-9667-a4c36ef897bc.jpg" width="215"> <img src="https://user-images.githubusercontent.com/1709072/40894477-90dd258e-67dc-11e8-8809-e8f4e3198cee.jpg" width="215"> <img src="https://user-images.githubusercontent.com/1709072/40894478-91a87720-67dc-11e8-9135-c64680ad70eb.jpg" width="215">
 
 ## 安装
 
 ```bash
 npm i react-native-amap3d
+
+# ios 项目需要更新 pods
+cd ios
+pod install
 ```
 
-### 添加高德 API Key
+本项目从 v2.0.0 开始支持 RN 的 autolinking，不再需要手动配置。
 
-首先你需要获取高德地图 API Key：
+### 添加高德 Key
 
-- [Aandroid](http://lbs.amap.com/api/android-sdk/guide/create-project/get-key)
-- [iOS](https://lbs.amap.com/api/ios-sdk/guide/create-project/get-key)
+#### Android
 
-然后你需要在显示地图前调用接口设置 API key：
+1. [获取高德 Key](http://lbs.amap.com/api/android-sdk/guide/create-project/get-key)。
 
-```js
-import { AMapSdk } from "react-native-amap3d";
+2. 编辑 Android 项目的 `AndroidManifest.xml`（一般在 `android\app\src\main\AndroidManifest.xml`），添加如下代码：
+   ```xml
+   <application>
+     <meta-data
+       android:name="com.amap.api.v2.apikey"
+       android:value="你的高德 Key" />
+   </application>
+   ```
 
-AMapSdk.setApiKey(
-  Platform.select({
-    android: "c52c7169e6df23490e3114330098aaac",
-    ios: "186d3464209b74effa4d8391f441f14d",
-  })
-);
-```
+#### iOS
+
+1. [获取高德 Key](https://lbs.amap.com/api/ios-sdk/guide/create-project/get-key)。
+
+2. 在 `AppDelegate.m` 里引入 SDK  头文件 `#import <AMapFoundationKit/AMapFoundationKit.h>`，
+   并设置高德 Key `[AMapServices sharedServices].apiKey = @"你的高德 Key";`。
 
 ## 用法
 
-### 显示地图
+### 导入地图模块
 
 ```jsx
-import { MapView, MapType } from "react-native-amap3d";
+import { MapView } from "react-native-amap3d";
+```
 
+### 基本用法
+
+```jsx
 <MapView
-  mapType={MapType.Satellite}
-  initialCameraPosition={{
-    target: {
-      latitude: 39.91095,
-      longitude: 116.37296,
-    },
-    zoom: 8,
+  center={{
+    latitude: 39.91095,
+    longitude: 116.37296
   }}
-/>;
+/>
 ```
 
-<img src=https://user-images.githubusercontent.com/1709072/140698774-bdbfee64-d403-4e49-9a85-716d44783cfd.png height=500> <img src=https://user-images.githubusercontent.com/1709072/140849895-dada3f51-74c0-4685-b5d6-c1b69a4d06bb.PNG height=500>
-
-### 监听地图事件
+### 启用定位并监听定位事件
 
 ```jsx
-import { MapView } from "react-native-baidumap-sdk";
-
 <MapView
-  onLoad={() => console.log("onLoad")}
-  onPress={({ nativeEvent }) => console.log(nativeEvent)}
-  onCameraIdle={({ nativeEvent }) => console.log(nativeEvent)}
-/>;
+  locationEnabled
+  onLocation={({ nativeEvent }) => console.log(`${nativeEvent.latitude}, ${nativeEvent.longitude}`)}
+/>
 ```
 
-<img src=https://user-images.githubusercontent.com/1709072/140705501-9ed3e038-e52a-48c2-a98a-235c5c890549.png height=500> <img src=https://user-images.githubusercontent.com/1709072/140849894-3add3858-fc7f-47cd-9786-94aeef399ebc.PNG height=500>
-
-### 添加标记
-
-其中 `icon` 支持 [ImageSource](https://reactnative.dev/docs/image#imagesource)。
-
-同时支持 `children` 作为标记图标。
+### 添加可拖拽的地图标记
 
 ```jsx
-import { MapView, Marker } from "react-native-baidumap-sdk";
-
 <MapView>
-  <Marker
-    position={{ latitude: 39.806901, longitude: 116.397972 }}
-    icon={require("../images/flag.png")}
-    onPress={() => alert("onPress")}
-  />
-  <Marker
-    position={{ latitude: 39.806901, longitude: 116.297972 }}
-    icon={{
-      uri: "https://reactnative.dev/img/pwa/manifest-icon-512.png",
-      width: 64,
-      height: 64,
+  <MapView.Marker
+    draggable
+    title="这是一个可拖拽的标记"
+    onDragEnd={({ nativeEvent }) =>
+      console.log(`${nativeEvent.latitude}, ${nativeEvent.longitude}`)
+    }
+    coordinate={{
+      latitude: 39.91095,
+      longitude: 116.37296
     }}
   />
-  <Marker position={{ latitude: 39.906901, longitude: 116.397972 }}>
-    <Text
-      style={{
-        color: "#fff",
-        backgroundColor: "#009688",
-        alignItems: "center",
-        borderRadius: 5,
-        padding: 5,
-      }}
-    >
-      {new Date().toLocaleString()}
-    </Text>
-  </Marker>
-</MapView>;
+</MapView>
 ```
 
-<img src=https://user-images.githubusercontent.com/1709072/140707579-4abe070a-3fc1-481d-8a2e-91ac2ad8bdc7.png height=500> <img src=https://user-images.githubusercontent.com/1709072/140849886-7eb9322b-8fa8-4049-a7b0-3eb36d006992.PNG height=500>
-
-### 点聚合
-
-Marker 数量过多（尤其是使用自定义 View 的情况下）会导致性能问题，而且显示过于密集，这时候可以用点聚合改善。
+### 自定义标记图片及信息窗体
 
 ```jsx
-import { Cluster, MapView, Marker } from "react-native-amap3d";
-
-const markers = Array(1000)
-  .fill(0)
-  .map((_, i) => ({
-    position: { latitude: 39.5 + Math.random(), longitude: 116 + Math.random() },
-    properties: { key: `Marker${i}` },
-  }));
-
-<MapView
-  ref={(ref) => (this.mapView = ref)}
-  onLoad={() => this.mapView?.moveCamera({ zoom: 8 }, 100)}
-  onCameraIdle={({ nativeEvent }) => {
-    this.status = nativeEvent;
-    this.cluster?.update(nativeEvent);
-  }}
->
-  <Cluster
-    ref={(ref) => (this.cluster = ref)}
-    points={markers}
-    renderMarker={(item) => (
-      <Marker
-        key={item.properties.key}
-        icon={require("../images/flag.png")}
-        position={item.position}
-      />
-    )}
-  />
-</MapView>;
+const coordinate = {
+  latitude: 39.706901,
+  longitude: 116.397972,
+}
+
+<MapView.Marker image='flag' coordinate={coordinate}>
+  <View style={styles.customInfoWindow}>
+    <Text>自定义信息窗体</Text>
+  </View>
+</MapView.Marker>
 ```
 
-<img src=https://user-images.githubusercontent.com/1709072/140710764-40f767cd-74fd-47ca-8310-897bbf58fbbd.png height=500> <img src=https://user-images.githubusercontent.com/1709072/140849888-6b6609c1-2e55-41c2-bdc3-f9d3fcc7a112.PNG height=500>
-
-<img src=https://user-images.githubusercontent.com/1709072/140710758-63e81ade-2635-4412-a5fa-b6948605fe75.png height=500> <img src=https://user-images.githubusercontent.com/1709072/140849880-9eb7609d-55a7-43be-8b6a-bac725fb0a82.PNG height=500>
-
 ### 更多示例
 
-参考 [example](https://github.com/qiuxiang/react-native-amap3d/tree/master/example)。
+参考 [examples](https://github.com/qiuxiang/react-native-amap3d/tree/master/example/examples)，或直接下载安装[示例 app](https://github.com/qiuxiang/react-native-amap3d/releases/download/v2.0.1/app-release.apk)。
 
 #### Android
 
 ```bash
-npm run android
+yarn run-android
 ```
 
 #### iOS
 
 ```bash
 cd ios && pod install && cd ..
-npm run ios
+yarn run-ios
 ```
 
 ## 常见问题
 
-- 尽量使用真实设备进行测试，在模拟器可能存在一些问题（常见的是 Android 模拟器因为缺少 GPU 加速而导致闪退）。
-- onLocation 没有返回定位数据通常是因为 key 不正确，或没有申请 PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION 权限
+- 该项目不打算做数据接口，地理/逆地理编码、路径规划、搜索等功能请使用 [Web 服务](https://lbs.amap.com/api/webservice/summary)。
+- 尽量使用设备进行测试，在模拟器可能存在一些问题（常见的是 Android 模拟器因为缺少硬件加速而导致闪退）。
 
 [npm]: https://www.npmjs.com/package/react-native-amap3d
-[version-badge]: https://img.shields.io/npm/v/react-native-amap3d.svg
+[version-badge]: https://badge.fury.io/js/react-native-amap3d.svg
+[build-badge]: https://travis-ci.org/qiuxiang/react-native-amap3d.svg?branch=master
+[build]: https://travis-ci.org/qiuxiang/react-native-amap3d
